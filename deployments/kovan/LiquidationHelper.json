{
  "address": "0x46323361190FE8356cDc28D5Ce235f0D8E2E5858",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aaveAddressProvider",
          "type": "address"
        },
        {
          "internalType": "contract IBalancerVaultV2",
          "name": "_balancerVault",
          "type": "address"
        },
        {
          "internalType": "contract IBSVault",
          "name": "_warpVault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "ADDRESSES_PROVIDER",
      "outputs": [
        {
          "internalType": "contract ILendingPoolAddressesProviderV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LENDING_POOL",
      "outputs": [
        {
          "internalType": "contract ILendingPoolV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balancerVault",
      "outputs": [
        {
          "internalType": "contract IBalancerVaultV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "premiums",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "executeOperation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBSLendingPair",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "borrowers",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "flashLoanToLiquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "warpVault",
      "outputs": [
        {
          "internalType": "contract IBSVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x038f21bf4a41072cec8c1a806236933f7e4c44ab8ddad004f501dcfe5339dd3e",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xF5B35b607377850696cAF2ac4841D61E7d825a3b",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "1945773",
    "logsBloom": "0x
    "blockHash": "0x0a1db51a3652c77c9bd307dce63319f1cedefcf9ea2e78d8a2b8933c2d96428a",
    "transactionHash": "0x038f21bf4a41072cec8c1a806236933f7e4c44ab8ddad004f501dcfe5339dd3e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 31846207,
        "transactionHash": "0x038f21bf4a41072cec8c1a806236933f7e4c44ab8ddad004f501dcfe5339dd3e",
        "address": "0x46323361190FE8356cDc28D5Ce235f0D8E2E5858",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x0a1db51a3652c77c9bd307dce63319f1cedefcf9ea2e78d8a2b8933c2d96428a"
      }
    ],
    "blockNumber": 31846207,
    "cumulativeGasUsed": "1945773",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd69C16706F6Fa8d3A8329B0b48C208745740fD86",
    "0xac3e94cc094d20c801935b40b7efa0f93e3ec4c4",
    "0x67EeB1E1dd79a4ec823256Dd6c5C6474025618f6"
  ],
  "solcInputHash": "b199bc12a1394cd8820c04e71f3141e5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aaveAddressProvider\",\"type\":\"address\"},{\"internalType\":\"contract IBalancerVaultV2\",\"name\":\"_balancerVault\",\"type\":\"address\"},{\"internalType\":\"contract IBSVault\",\"name\":\"_warpVault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"ADDRESSES_PROVIDER\",\"outputs\":[{\"internalType\":\"contract ILendingPoolAddressesProviderV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LENDING_POOL\",\"outputs\":[{\"internalType\":\"contract ILendingPoolV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerVault\",\"outputs\":[{\"internalType\":\"contract IBalancerVaultV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"premiums\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBSLendingPair\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"borrowers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"flashLoanToLiquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"warpVault\",\"outputs\":[{\"internalType\":\"contract IBSVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"@conlot-crypto\",\"kind\":\"dev\",\"methods\":{\"executeOperation(address[],uint256[],uint256[],address,bytes)\":{\"details\":\"This function must be called only be the LENDING_POOL and takes care of repaying active debt positions, migrating collateral and incurring new V2 debt token debt.\",\"params\":{\"amounts\":\"The array of flash loaned asset amounts used to repay debts.\",\"assets\":\"The array of flash loaned assets used to repay debts.\",\"initiator\":\"The address that initiated the flash loan, unused.\",\"params\":\"The byte array containing\",\"premiums\":\"The array of premiums incurred as additional debts.\"}},\"flashLoanToLiquidate(address,address[],uint256)\":{\"details\":\"This function will trigger logic to flashloan borrow and liquidate\",\"params\":{\"amount\":\"of tokens to borrow & liquidate\",\"borrowers\":\"who will be liquidated\",\"pair\":\"warp finance pair\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(address)\":{\"details\":\"Withdraw asset.\",\"params\":{\"asset\":\"Asset to be withdrawn.\"}}},\"stateVariables\":{\"balancerVault\":{\"details\":\"Balancer V2 Vault\"},\"warpVault\":{\"details\":\"warp.finanace vault\"}},\"title\":\"LiquidationHelper\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Element finance Principal(EFP) token Liquidator Contract. A contract that takes the flash loan from Aave. Repays the debt and liquidates the collateral via the EFP pools. Then uses the remaining funds to repay back the flashloan and keeps the rest as profit For USDC PT/USDC, wBTC PT/wBTC, DAI PT/DAI pairs\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/liquidation/LiquidationHelper.sol\":\"LiquidationHelper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport \\\"./interfaces/IInterestRateModel.sol\\\";\\nimport \\\"./interfaces/IBSWrapperToken.sol\\\";\\nimport \\\"./interfaces/IDebtToken.sol\\\";\\n\\n////////////////////////////////////////////////////////////////////////////////////////////\\n/// @title DataTypes\\n/// @author @samparsky\\n////////////////////////////////////////////////////////////////////////////////////////////\\n\\nlibrary DataTypes {\\n    struct LendingPairVars {\\n        string name;\\n        string symbol;\\n        IERC20 asset;\\n        IERC20 collateralAsset;\\n        address guardian;\\n    }\\n\\n    struct RiskConfiguration {\\n        uint256 depositCollateralLimit;\\n        uint256 depositBorrowLimit;\\n        uint256 totalPairDebtLimit;\\n    }\\n\\n    struct BorrowAssetConfig {\\n        uint256 initialExchangeRateMantissa;\\n        uint256 reserveFactorMantissa;\\n        uint256 collateralFactor;\\n        IBSWrapperToken wrappedBorrowAsset;\\n        uint256 liquidationFee;\\n        IDebtToken debtToken;\\n    }\\n\\n    function validBorrowAssetConfig(BorrowAssetConfig memory self, address _owner) internal view {\\n        require(self.initialExchangeRateMantissa > 0, \\\"E\\\");\\n        require(self.reserveFactorMantissa > 0, \\\"F\\\");\\n        require(self.collateralFactor > 0, \\\"C\\\");\\n        require(self.liquidationFee > 0, \\\"L\\\");\\n        require(address(self.wrappedBorrowAsset) != address(0), \\\"B\\\");\\n        require(address(self.debtToken) != address(0), \\\"IB\\\");\\n        require(self.wrappedBorrowAsset.owner() == _owner, \\\"IW\\\");\\n        require(self.debtToken.owner() == _owner, \\\"IVW\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x9f0826b1976adf2aa12971840b30306b2399bd130325301fba73d4806b529fe8\",\"license\":\"MIT\"},\"contracts/interfaces/IBSLendingPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IPriceOracleAggregator.sol\\\";\\nimport \\\"./IBSWrapperToken.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\nimport \\\"./IBSVault.sol\\\";\\nimport \\\"../DataTypes.sol\\\";\\n\\ninterface IBSLendingPair {\\n    event Initialized(\\n        address indexed pair,\\n        address indexed asset,\\n        address indexed collateralAsset,\\n        address guardian\\n    );\\n\\n    /**\\n     * Emitted on deposit\\n     *\\n     * @param pair The pair being interacted with\\n     * @param asset The asset deposited in the pair\\n     * @param tokenReceipeint The user the receives the bsTokens\\n     * @param user The user that made the deposit\\n     * @param amount The amount deposited\\n     **/\\n    event Deposit(\\n        address indexed pair,\\n        address indexed asset,\\n        address indexed tokenReceipeint,\\n        address user,\\n        uint256 amount\\n    );\\n\\n    event Borrow(address indexed borrower, uint256 amount);\\n\\n    /**\\n     * Emitted on Redeem\\n     *\\n     * @param pair The pair being interacted with\\n     * @param asset The asset withdraw in the pair\\n     * @param user The user that's making the withdrawal\\n     * @param to The user the receives the withdrawn tokens\\n     * @param amount The amount being withdrawn\\n     **/\\n    event Redeem(\\n        address indexed pair,\\n        address indexed asset,\\n        address indexed user,\\n        address to,\\n        uint256 amount,\\n        uint256 amountofWrappedBurned\\n    );\\n\\n    event WithdrawCollateral(address account, uint256 amount);\\n\\n    event ReserveWithdraw(address user, uint256 shares);\\n\\n    /**\\n     * Emitted on repay\\n     *\\n     * @param pair The pair being interacted with\\n     * @param asset The asset repaid in the pair\\n     * @param beneficiary The user that's getting their debt reduced\\n     * @param repayer The user that's providing the funds\\n     * @param amount The amount being repaid\\n     **/\\n    event Repay(\\n        address indexed pair,\\n        address indexed asset,\\n        address indexed beneficiary,\\n        address repayer,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * Emitted on liquidation\\n     *\\n     * @param pair The pair being interacted with\\n     * @param asset The asset that getting liquidated\\n     * @param user The user that's getting liquidated\\n     * @param liquidatedCollateralAmount The of collateral transferred to the liquidator\\n     * @param liquidator The liquidator\\n     **/\\n    event Liquidate(\\n        address indexed pair,\\n        address indexed asset,\\n        address indexed user,\\n        uint256 liquidatedCollateralAmount,\\n        address liquidator\\n    );\\n\\n    /**\\n     * @dev Emitted on flashLoan\\n     * @param target The address of the flash loan receiver contract\\n     * @param initiator The address initiating the flash loan\\n     * @param asset The address of the asset being flash borrowed\\n     * @param amount The amount flash borrowed\\n     * @param premium The fee flash borrowed\\n     **/\\n    event FlashLoan(\\n        address indexed target,\\n        address indexed initiator,\\n        address indexed asset,\\n        uint256 amount,\\n        uint256 premium\\n    );\\n\\n    /**\\n     * @dev Emitted on interest accrued\\n     * @param accrualBlockNumber block number\\n     * @param borrowIndex borrow index\\n     * @param totalBorrows total borrows\\n     * @param totalReserves total reserves\\n     **/\\n    event InterestAccrued(\\n        address indexed pair,\\n        uint256 accrualBlockNumber,\\n        uint256 borrowIndex,\\n        uint256 totalBorrows,\\n        uint256 totalReserves\\n    );\\n\\n    /**\\n     * Emitted when update riskConfiguration\\n     *\\n     * @param depositCollateralLimit new deposit collateralAsset limit\\n     * @param depositBorrowLimit new deposit borrowAsset limit\\n     * @param totalPairDebtLimit new debt limit\\n     * @param blockNumber number of blocks when event is triggered\\n     **/\\n    event UpdateRiskConfiguration(\\n        uint256 depositCollateralLimit,\\n        uint256 depositBorrowLimit,\\n        uint256 totalPairDebtLimit,\\n        uint256 blockNumber\\n    );\\n\\n    event InterestShortCircuit(uint256 blockNumber);\\n\\n    event ActionPaused(uint8 action, uint256 timestamp);\\n    event ActionUnPaused(uint8 action, uint256 timestamp);\\n\\n    function initialize(\\n        DataTypes.LendingPairVars memory pariVars,\\n        DataTypes.BorrowAssetConfig calldata borrowConfig,\\n        IBSWrapperToken _wrappedCollateralAsset,\\n        IInterestRateModel _interestRate,\\n        DataTypes.RiskConfiguration memory _riskConfig\\n    ) external;\\n\\n    function asset() external view returns (IERC20);\\n\\n    function depositBorrowAsset(address _tokenReceipeint, uint256 _amount) external;\\n\\n    function depositCollateral(address _tokenReceipeint, uint256 _vaultShareAmount) external;\\n\\n    function redeem(address _to, uint256 _amount) external returns (uint256);\\n\\n    function collateralOfAccount(address _account) external view returns (uint256);\\n\\n    function getMaxWithdrawAllowed(address account) external returns (uint256);\\n\\n    function oracle() external view returns (IPriceOracleAggregator);\\n\\n    function collateralAsset() external view returns (IERC20);\\n\\n    function calcBorrowLimit(uint256 amount) external view returns (uint256);\\n\\n    function accountInterestIndex(address) external view returns (uint256);\\n\\n    function borrowIndex() external view returns (uint256);\\n\\n    function debtToken() external view returns (IDebtToken);\\n\\n    function borrowBalancePrior(address _account) external view returns (uint256);\\n\\n    function wrapperBorrowedAsset() external view returns (IBSWrapperToken);\\n\\n    function wrappedCollateralAsset() external view returns (IBSWrapperToken);\\n\\n    function totalReserves() external view returns (uint256);\\n\\n    function withdrawFees(uint256 amount) external;\\n\\n    function liquidate(address user) external;\\n}\\n\",\"keccak256\":\"0x95a5d8511f4c922116cf3baa0ee294ce34af6f28ccc7dae77b6b17669d1c0776\",\"license\":\"MIT\"},\"contracts/interfaces/IBSVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IERC3156FlashLender.sol\\\";\\n\\ninterface IBSVault is IERC3156FlashLender {\\n    // ************** //\\n    // *** EVENTS *** //\\n    // ************** //\\n\\n    /// @notice Emitted on deposit\\n    /// @param token being deposited\\n    /// @param from address making the depsoit\\n    /// @param to address to credit the tokens being deposited\\n    /// @param amount being deposited\\n    /// @param shares the represent the amount deposited in the vault\\n    event Deposit(\\n        IERC20 indexed token,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        uint256 shares\\n    );\\n\\n    /// @notice Emitted on withdraw\\n    /// @param token being deposited\\n    /// @param from address making the depsoit\\n    /// @param to address to credit the tokens being withdrawn\\n    /// @param amount Amount of underlying being withdrawn\\n    /// @param shares the represent the amount withdraw from the vault\\n    event Withdraw(\\n        IERC20 indexed token,\\n        address indexed from,\\n        address indexed to,\\n        uint256 shares,\\n        uint256 amount\\n    );\\n\\n    event Transfer(IERC20 indexed token, address indexed from, address indexed to, uint256 amount);\\n\\n    event FlashLoan(\\n        address indexed borrower,\\n        IERC20 indexed token,\\n        uint256 amount,\\n        uint256 feeAmount,\\n        address indexed receiver\\n    );\\n\\n    event TransferControl(address _newTeam, uint256 timestamp);\\n\\n    event UpdateFlashLoanRate(uint256 newRate);\\n\\n    event Approval(address indexed user, address indexed allowed, bool status);\\n\\n    event OwnershipAccepted(address prevOwner, address newOwner, uint256 timestamp);\\n\\n    event RegisterProtocol(address sender);\\n\\n    event AllowContract(address whitelist, bool status);\\n\\n    event RescueFunds(IERC20 token, uint256 amount);\\n\\n    // ************** //\\n    // *** FUNCTIONS *** //\\n    // ************** //\\n\\n    function initialize(uint256 _flashLoanRate, address _owner) external;\\n\\n    function approveContract(\\n        address _user,\\n        address _contract,\\n        bool _status,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function deposit(\\n        IERC20 _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external returns (uint256, uint256);\\n\\n    function withdraw(\\n        IERC20 _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external returns (uint256);\\n\\n    function balanceOf(IERC20, address) external view returns (uint256);\\n\\n    function transfer(\\n        IERC20 _token,\\n        address _from,\\n        address _to,\\n        uint256 _shares\\n    ) external;\\n\\n    function toShare(\\n        IERC20 token,\\n        uint256 amount,\\n        bool ceil\\n    ) external view returns (uint256);\\n\\n    function toUnderlying(IERC20 token, uint256 share) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc0323afa216ff7958b03edc38475bd0c8b56c7866a66429bf28debeeea22a3ff\",\"license\":\"MIT\"},\"contracts/interfaces/IBSWrapperToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IRewardDistributorManager.sol\\\";\\n\\ninterface IBSWrapperTokenBase is IERC20 {\\n    function initialize(\\n        address _owner,\\n        address _underlying,\\n        string memory _tokenName,\\n        string memory _tokenSymbol,\\n        IRewardDistributorManager _manager\\n    ) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n\\n    function owner() external view returns (address);\\n}\\n\\ninterface IBSWrapperToken is IBSWrapperTokenBase {\\n    function mint(address _to, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xb517729706c5471ef0fea6e8daf03586f6cc926c9eeb716ae7d13a8de2053e70\",\"license\":\"MIT\"},\"contracts/interfaces/IBalancerVaultV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\ninterface IBalancerVaultV2 {\\n    enum SwapKind {GIVEN_IN, GIVEN_OUT}\\n\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        address assetIn;\\n        address assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n}\\n\",\"keccak256\":\"0xe89291596d94917868afa6e00caa5ebe310ec6c6277a3dda186630094a3e2a6a\",\"license\":\"MIT\"},\"contracts/interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport {IBSWrapperTokenBase} from \\\"./IBSWrapperToken.sol\\\";\\n\\ninterface IDebtToken is IBSWrapperTokenBase {\\n    event DelegateBorrow(address from, address to, uint256 amount, uint256 timestamp);\\n\\n    function increaseTotalDebt(uint256 _amount) external;\\n\\n    function principal(address _account) external view returns (uint256);\\n\\n    function mint(\\n        address _to,\\n        address _owner,\\n        uint256 _amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcad520d843e96fae406142ca82ec1333a7600c3900424707c4a91283126e739a\",\"license\":\"MIT\"},\"contracts/interfaces/IERC3156FlashBorrower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\ninterface IERC3156FlashBorrower {\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0xc72afde3ab27c13b3437769c92b10e48dc143565ba2bcf9e78f6713d4695d924\",\"license\":\"MIT\"},\"contracts/interfaces/IERC3156FlashLender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.1;\\nimport \\\"./IERC3156FlashBorrower.sol\\\";\\n\\ninterface IERC3156FlashLender {\\n    /**\\n     * @dev The amount of currency available to be lent.\\n     * @param token The loan currency.\\n     * @return The amount of `token` that can be borrowed.\\n     */\\n    function maxFlashLoan(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev The fee to be charged for a given loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n     */\\n    function flashFee(address token, uint256 amount) external view returns (uint256);\\n\\n    /**\\n     * @dev Initiate a flash loan.\\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     */\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x381589754fc2917129ff2192df23588009fecb73f6df12bc9218dd731d25758d\",\"license\":\"MIT\"},\"contracts/interfaces/IInterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\ninterface IInterestRateModel {\\n    /**\\n     * @notice Calculates the current borrow interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amount of reserves the market has\\n     * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getBorrowRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Calculates the current supply interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amount of reserves the market has\\n     * @param reserveFactorMantissa The current reserve factor the market has\\n     * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getSupplyRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves,\\n        uint256 reserveFactorMantissa\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe6b72371b9b062ac92f3f18f7d6481e951714c95c2dd50a3ee13a266b72c2882\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\ninterface IOracle {\\n    /// @notice Price update event\\n    /// @param asset the asset\\n    /// @param newPrice price of the asset\\n    event PriceUpdated(address asset, uint256 newPrice);\\n\\n    /// @dev returns latest answer\\n    function latestAnswer() external view returns (int256);\\n}\\n\",\"keccak256\":\"0x28eea16f99e07c31d30e3bee3df4491c2e04ca9edbd235fd93903e8c5a21f01b\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceOracleAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\n\\ninterface IPriceOracleAggregator {\\n    event UpdateOracle(IERC20 token, IOracle oracle);\\n\\n    function getPriceInUSD(IERC20 _token) external view returns (uint256);\\n\\n    function getPriceInUSDMultiple(IERC20[] calldata _tokens)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function setOracleForAsset(IERC20[] calldata _asset, IOracle[] calldata _oracle) external;\\n\\n    event OwnershipAccepted(address prevOwner, address newOwner, uint256 timestamp);\\n    event TransferControl(address _newTeam, uint256 timestamp);\\n    event StableTokenAdded(IERC20 _token, uint256 timestamp);\\n}\\n\",\"keccak256\":\"0xc80f3e036368823b093e495b017b23aa7eb541e1909b7c4cf0355f02e423d6a1\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRewardDistributor {\\n    event Initialized(\\n        IERC20 indexed _rewardToken,\\n        uint256 _amountDistributePerSecond,\\n        uint256 _startTimestamp,\\n        uint256 _endTimestamp,\\n        address _guardian,\\n        uint256 timestamp\\n    );\\n\\n    function accumulateReward(address _tokenAddr, address _user) external;\\n\\n    function endTimestamp() external returns (uint256);\\n\\n    function initialize(\\n        string calldata _name,\\n        IERC20 _rewardToken,\\n        uint256 _amountDistributePerSecond,\\n        uint256 _startTimestamp,\\n        uint256 _endTimestamp,\\n        address _guardian\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2d752f87ed5d75fe0498b53e76ad181ece87eb6287432f15a440b92a4efd18cd\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardDistributorManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport \\\"./IRewardDistributor.sol\\\";\\n\\ninterface IRewardDistributorManager {\\n    /// @dev Emitted on Initialization\\n    event Initialized(address owner, uint256 timestamp);\\n\\n    event DistributorStatusUpdated(IRewardDistributor distributor, bool approve, uint256 timestamp);\\n    event AddReward(address tokenAddr, IRewardDistributor distributor, uint256 timestamp);\\n    event RemoveReward(address tokenAddr, IRewardDistributor distributor, uint256 timestamp);\\n    event TransferControl(address _newTeam, uint256 timestamp);\\n    event OwnershipAccepted(address prevOwner, address newOwner, uint256 timestamp);\\n\\n    function activateReward(address _tokenAddr) external;\\n\\n    function removeReward(address _tokenAddr, IRewardDistributor _distributor) external;\\n\\n    function accumulateRewards(address _from, address _to) external;\\n}\\n\",\"keccak256\":\"0xd1a2340e9a25277cd5efdf1f57a26f0bb14c43301c10aa4427d7f5c105c61173\",\"license\":\"MIT\"},\"contracts/interfaces/aaveV2/IFlashLoanReceiverV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\nimport {ILendingPoolAddressesProviderV2} from \\\"./ILendingPoolAddressesProviderV2.sol\\\";\\nimport {ILendingPoolV2} from \\\"./ILendingPoolV2.sol\\\";\\n\\n/**\\n * @title IFlashLoanReceiverV2 interface\\n * @notice Interface for the Aave fee IFlashLoanReceiver.\\n * @author Aave\\n * @dev implement this interface to develop a flashloan-compatible flashLoanReceiver contract\\n **/\\ninterface IFlashLoanReceiverV2 {\\n    function executeOperation(\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata premiums,\\n        address initiator,\\n        bytes calldata params\\n    ) external returns (bool);\\n\\n    function ADDRESSES_PROVIDER() external view returns (ILendingPoolAddressesProviderV2);\\n\\n    function LENDING_POOL() external view returns (ILendingPoolV2);\\n}\\n\",\"keccak256\":\"0x52a72de940c2c19643c8689aec33858c79cdcb0f623089f570eabf1ec88d24ef\",\"license\":\"MIT\"},\"contracts/interfaces/aaveV2/ILendingPoolAddressesProviderV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProviderV2 {\\n    event MarketIdSet(string newMarketId);\\n    event LendingPoolUpdated(address indexed newAddress);\\n    event ConfigurationAdminUpdated(address indexed newAddress);\\n    event EmergencyAdminUpdated(address indexed newAddress);\\n    event LendingPoolConfiguratorUpdated(address indexed newAddress);\\n    event LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n    event PriceOracleUpdated(address indexed newAddress);\\n    event LendingRateOracleUpdated(address indexed newAddress);\\n    event ProxyCreated(bytes32 id, address indexed newAddress);\\n    event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n    function getMarketId() external view returns (string memory);\\n\\n    function setMarketId(string calldata marketId) external;\\n\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    function setAddressAsProxy(bytes32 id, address impl) external;\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    function getLendingPool() external view returns (address);\\n\\n    function setLendingPoolImpl(address pool) external;\\n\\n    function getLendingPoolConfigurator() external view returns (address);\\n\\n    function setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n    function getLendingPoolCollateralManager() external view returns (address);\\n\\n    function setLendingPoolCollateralManager(address manager) external;\\n\\n    function getPoolAdmin() external view returns (address);\\n\\n    function setPoolAdmin(address admin) external;\\n\\n    function getEmergencyAdmin() external view returns (address);\\n\\n    function setEmergencyAdmin(address admin) external;\\n\\n    function getPriceOracle() external view returns (address);\\n\\n    function setPriceOracle(address priceOracle) external;\\n\\n    function getLendingRateOracle() external view returns (address);\\n\\n    function setLendingRateOracle(address lendingRateOracle) external;\\n}\\n\",\"keccak256\":\"0x6c9398161c15e70d323d6772719ccc3ef5c14864c96d2b3ac19e842596215e5b\",\"license\":\"MIT\"},\"contracts/interfaces/aaveV2/ILendingPoolV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\nimport {ILendingPoolAddressesProviderV2} from \\\"./ILendingPoolAddressesProviderV2.sol\\\";\\nimport {AaveDataTypes} from \\\"../../libraries/AaveDataTypes.sol\\\";\\n\\ninterface ILendingPoolV2 {\\n    /**\\n     * @dev Emitted on deposit()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address initiating the deposit\\n     * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n     * @param amount The amount deposited\\n     * @param referral The referral code used\\n     **/\\n    event Deposit(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint16 indexed referral\\n    );\\n\\n    /**\\n     * @dev Emitted on withdraw()\\n     * @param reserve The address of the underlyng asset being withdrawn\\n     * @param user The address initiating the withdrawal, owner of aTokens\\n     * @param to Address that will receive the underlying\\n     * @param amount The amount to be withdrawn\\n     **/\\n    event Withdraw(\\n        address indexed reserve,\\n        address indexed user,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n     * @param reserve The address of the underlying asset being borrowed\\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n     * initiator of the transaction on flashLoan()\\n     * @param onBehalfOf The address that will be getting the debt\\n     * @param amount The amount borrowed out\\n     * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n     * @param borrowRate The numeric rate at which the user has borrowed\\n     * @param referral The referral code used\\n     **/\\n    event Borrow(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint256 borrowRateMode,\\n        uint256 borrowRate,\\n        uint16 indexed referral\\n    );\\n\\n    /**\\n     * @dev Emitted on repay()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The beneficiary of the repayment, getting his debt reduced\\n     * @param repayer The address of the user initiating the repay(), providing the funds\\n     * @param amount The amount repaid\\n     **/\\n    event Repay(\\n        address indexed reserve,\\n        address indexed user,\\n        address indexed repayer,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted on swapBorrowRateMode()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user swapping his rate mode\\n     * @param rateMode The rate mode that the user wants to swap to\\n     **/\\n    event Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     **/\\n    event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     **/\\n    event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n    /**\\n     * @dev Emitted on rebalanceStableBorrowRate()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user for which the rebalance has been executed\\n     **/\\n    event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n    /**\\n     * @dev Emitted on flashLoan()\\n     * @param target The address of the flash loan receiver contract\\n     * @param initiator The address initiating the flash loan\\n     * @param asset The address of the asset being flash borrowed\\n     * @param amount The amount flash borrowed\\n     * @param premium The fee flash borrowed\\n     * @param referralCode The referral code used\\n     **/\\n    event FlashLoan(\\n        address indexed target,\\n        address indexed initiator,\\n        address indexed asset,\\n        uint256 amount,\\n        uint256 premium,\\n        uint16 referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted when the pause is triggered.\\n     */\\n    event Paused();\\n\\n    /**\\n     * @dev Emitted when the pause is lifted.\\n     */\\n    event Unpaused();\\n\\n    /**\\n     * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n     * LendingPoolCollateral manager using a DELEGATECALL\\n     * This allows to have the events in the generated ABI for LendingPool.\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n     * @param liquidator The address of the liquidator\\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     **/\\n    event LiquidationCall(\\n        address indexed collateralAsset,\\n        address indexed debtAsset,\\n        address indexed user,\\n        uint256 debtToCover,\\n        uint256 liquidatedCollateralAmount,\\n        address liquidator,\\n        bool receiveAToken\\n    );\\n\\n    /**\\n     * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n     * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n     * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n     * gets added to the LendingPool ABI\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param liquidityRate The new liquidity rate\\n     * @param stableBorrowRate The new stable borrow rate\\n     * @param variableBorrowRate The new variable borrow rate\\n     * @param liquidityIndex The new liquidity index\\n     * @param variableBorrowIndex The new variable borrow index\\n     **/\\n    event ReserveDataUpdated(\\n        address indexed reserve,\\n        uint256 liquidityRate,\\n        uint256 stableBorrowRate,\\n        uint256 variableBorrowRate,\\n        uint256 liquidityIndex,\\n        uint256 variableBorrowIndex\\n    );\\n\\n    /**\\n     * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n     * @param asset The address of the underlying asset to deposit\\n     * @param amount The amount to be deposited\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n     * @param asset The address of the underlying asset to withdraw\\n     * @param amount The underlying amount to be withdrawn\\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n     * @param to Address that will receive the underlying, same as msg.sender if the user\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *   different wallet\\n     * @return The final amount withdrawn\\n     **/\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n     * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n     * @param asset The address of the underlying asset to borrow\\n     * @param amount The amount to be borrowed\\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n     * if he has been given credit delegation allowance\\n     **/\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) external;\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @return The final amount repaid\\n     **/\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 rateMode,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n     * @param asset The address of the underlying asset borrowed\\n     * @param rateMode The rate mode that the user wants to swap to\\n     **/\\n    function swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n    /**\\n     * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n     * - Users can be rebalanced if the following conditions are satisfied:\\n     *     1. Usage ratio is above 95%\\n     *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n     *        borrowed at a stable rate and depositors are not earning enough\\n     * @param asset The address of the underlying asset borrowed\\n     * @param user The address of the user to be rebalanced\\n     **/\\n    function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n    /**\\n     * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n     * @param asset The address of the underlying asset deposited\\n     * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n     **/\\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n    /**\\n     * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     **/\\n    function liquidationCall(\\n        address collateralAsset,\\n        address debtAsset,\\n        address user,\\n        uint256 debtToCover,\\n        bool receiveAToken\\n    ) external;\\n\\n    /**\\n     * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n     * as long as the amount taken plus a fee is returned.\\n     * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n     * For further details please visit https://developers.aave.com\\n     * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n     * @param assets The addresses of the assets being flash-borrowed\\n     * @param amounts The amounts amounts being flash-borrowed\\n     * @param modes Types of the debt to open if the flash loan is not returned:\\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n     * @param params Variadic packed params to pass to the receiver as extra information\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata modes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @dev Returns the user account data across all the reserves\\n     * @param user The address of the user\\n     * @return totalCollateralETH the total collateral in ETH of the user\\n     * @return totalDebtETH the total debt in ETH of the user\\n     * @return availableBorrowsETH the borrowing power left of the user\\n     * @return currentLiquidationThreshold the liquidation threshold of the user\\n     * @return ltv the loan to value of the user\\n     * @return healthFactor the current health factor of the user\\n     **/\\n    function getUserAccountData(address user)\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralETH,\\n            uint256 totalDebtETH,\\n            uint256 availableBorrowsETH,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n\\n    function initReserve(\\n        address reserve,\\n        address aTokenAddress,\\n        address stableDebtAddress,\\n        address variableDebtAddress,\\n        address interestRateStrategyAddress\\n    ) external;\\n\\n    function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress)\\n        external;\\n\\n    function setConfiguration(address reserve, uint256 configuration) external;\\n\\n    /**\\n     * @dev Returns the configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The configuration of the reserve\\n     **/\\n    function getConfiguration(address asset)\\n        external\\n        view\\n        returns (AaveDataTypes.ReserveConfigurationMap memory);\\n\\n    /**\\n     * @dev Returns the configuration of the user across all the reserves\\n     * @param user The user address\\n     * @return The configuration of the user\\n     **/\\n    function getUserConfiguration(address user)\\n        external\\n        view\\n        returns (AaveDataTypes.UserConfigurationMap memory);\\n\\n    /**\\n     * @dev Returns the normalized income normalized income of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve's normalized income\\n     */\\n    function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the normalized variable debt per unit of asset\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve normalized variable debt\\n     */\\n    function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the state and configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The state of the reserve\\n     **/\\n    function getReserveData(address asset) external view returns (AaveDataTypes.ReserveData memory);\\n\\n    function finalizeTransfer(\\n        address asset,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 balanceFromAfter,\\n        uint256 balanceToBefore\\n    ) external;\\n\\n    function getReservesList() external view returns (address[] memory);\\n\\n    function getAddressesProvider() external view returns (ILendingPoolAddressesProviderV2);\\n\\n    function setPause(bool val) external;\\n\\n    function paused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd93cc9647671d321852be520d8995ca7dfd6485bd975f719ec150233f7a56ee0\",\"license\":\"MIT\"},\"contracts/libraries/AaveDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\n/**\\n * @dev This is the Aave V2 DataTypes library.\\n */\\nlibrary AaveDataTypes {\\n    // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        //the liquidity index. Expressed in ray\\n        uint128 liquidityIndex;\\n        //variable borrow index. Expressed in ray\\n        uint128 variableBorrowIndex;\\n        //the current supply rate. Expressed in ray\\n        uint128 currentLiquidityRate;\\n        //the current variable borrow rate. Expressed in ray\\n        uint128 currentVariableBorrowRate;\\n        //the current stable borrow rate. Expressed in ray\\n        uint128 currentStableBorrowRate;\\n        uint40 lastUpdateTimestamp;\\n        //tokens addresses\\n        address aTokenAddress;\\n        address stableDebtTokenAddress;\\n        address variableDebtTokenAddress;\\n        //address of the interest rate strategy\\n        address interestRateStrategyAddress;\\n        //the id of the reserve. Represents the position in the list of the active reserves\\n        uint8 id;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: LTV\\n        //bit 16-31: Liq. threshold\\n        //bit 32-47: Liq. bonus\\n        //bit 48-55: Decimals\\n        //bit 56: Reserve is active\\n        //bit 57: reserve is frozen\\n        //bit 58: borrowing is enabled\\n        //bit 59: stable rate borrowing enabled\\n        //bit 60-63: reserved\\n        //bit 64-79: reserve factor\\n        uint256 data;\\n    }\\n\\n    struct UserConfigurationMap {\\n        uint256 data;\\n    }\\n\\n    enum InterestRateMode {NONE, STABLE, VARIABLE}\\n}\\n\",\"keccak256\":\"0x7cac7b6509d502db06adfa690a805debd40b26415ef8a1dd5b39f007313ef108\",\"license\":\"MIT\"},\"contracts/liquidation/LiquidationHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\nimport \\\"./aave/FlashLoanReceiverBaseV2.sol\\\";\\nimport \\\"../util/Withdrawable.sol\\\";\\nimport \\\"../interfaces/aaveV2/ILendingPoolAddressesProviderV2.sol\\\";\\nimport \\\"../interfaces/aaveV2/ILendingPoolV2.sol\\\";\\nimport \\\"../interfaces/IBalancerVaultV2.sol\\\";\\nimport \\\"../interfaces/IBSLendingPair.sol\\\";\\nimport \\\"../interfaces/IBSVault.sol\\\";\\n\\n////////////////////////////////////////////////////////////////////////////////////////////\\n///\\n/// @title LiquidationHelper\\n/// @author @conlot-crypto\\n/// @notice Element finance Principal(EFP) token Liquidator Contract.\\n/// A contract that takes the flash loan from Aave.\\n/// Repays the debt and liquidates the collateral via the EFP pools.\\n/// Then uses the remaining funds to repay back the flashloan and keeps the rest as profit\\n/// For USDC PT/USDC, wBTC PT/wBTC, DAI PT/DAI pairs\\n///\\n////////////////////////////////////////////////////////////////////////////////////////////\\n\\ncontract LiquidationHelper is FlashLoanReceiverBaseV2, Withdrawable {\\n    struct LiquidationCallLocalVars {\\n        uint256 initFlashBorrowedBalance;\\n        uint256 diffFlashBorrowedBalance;\\n        uint256 initCollateralBalance;\\n        uint256 diffCollateralBalance;\\n        uint256 flashLoanDebt;\\n        uint256 soldAmount;\\n        uint256 remainingCollateralTokens;\\n        uint256 borrowedAssetLeftovers;\\n    }\\n\\n    struct FlashLoanParams {\\n        address pair;\\n        address collateralAsset;\\n        address borrowedAsset;\\n        address initiator;\\n        address[] borrowers;\\n    }\\n\\n    /// @dev Balancer V2 Vault\\n    IBalancerVaultV2 public immutable balancerVault;\\n\\n    /// @dev warp.finanace vault\\n    IBSVault public immutable warpVault;\\n\\n    constructor(\\n        address _aaveAddressProvider,\\n        IBalancerVaultV2 _balancerVault,\\n        IBSVault _warpVault\\n    ) public FlashLoanReceiverBaseV2(_aaveAddressProvider) {\\n        require(address(_balancerVault) != address(0), \\\"Invalid Balancer Vault\\\");\\n        require(address(_warpVault) != address(0), \\\"Invalid Warp Vault\\\");\\n\\n        balancerVault = _balancerVault;\\n        warpVault = _warpVault;\\n    }\\n\\n    /**\\n     * @dev\\n     * @param flashBorrowedAmount flash borrowed amount from Aave\\n     * @param params FlashLoanParams parameters\\n     * @param premium FlashLoanBorrow fee\\n     */\\n    function _liquidateAndSwap(\\n        uint256 flashBorrowedAmount,\\n        FlashLoanParams memory params,\\n        uint256 premium\\n    ) internal {\\n        LiquidationCallLocalVars memory vars;\\n        vars.initCollateralBalance = IERC20(params.collateralAsset).balanceOf(address(this));\\n\\n        vars.initFlashBorrowedBalance = IERC20(params.borrowedAsset).balanceOf(address(this));\\n\\n        // Track leftover balance to rescue funds in case of external transfers into this contract\\n        vars.borrowedAssetLeftovers = vars.initFlashBorrowedBalance - flashBorrowedAmount;\\n\\n        vars.flashLoanDebt = flashBorrowedAmount + premium;\\n\\n        // approve to deposit into vault\\n        IERC20(params.borrowedAsset).approve(address(warpVault), flashBorrowedAmount);\\n\\n        // deposit borrwoed asset into warp vault\\n        warpVault.deposit(\\n            IERC20(params.borrowedAsset),\\n            address(this),\\n            address(this),\\n            flashBorrowedAmount\\n        );\\n\\n        // approve pair to transfer tokens\\n        warpVault.approveContract(address(this), address(params.pair), true, 0, 0, 0);\\n\\n        // Liquidate the user position and release the underlying collateral\\n        for (uint256 i = 0; i < params.borrowers.length; i++) {\\n            IBSLendingPair(params.pair).liquidate(params.borrowers[i]);\\n        }\\n\\n        // withdraw borrowasset from warp vault\\n        warpVault.withdraw(\\n            IERC20(params.borrowedAsset),\\n            address(this),\\n            address(this),\\n            warpVault.balanceOf(IERC20(params.borrowedAsset), address(this))\\n        );\\n\\n        // withdraw collateral from warp vault\\n        uint256 collateralBalanceAfter =\\n            warpVault.withdraw(\\n                IERC20(params.collateralAsset),\\n                address(this),\\n                address(this),\\n                warpVault.balanceOf(IERC20(params.collateralAsset), address(this))\\n            );\\n\\n        // Track only collateral released, not current asset balance of the contract\\n        vars.diffCollateralBalance = collateralBalanceAfter - vars.initCollateralBalance;\\n\\n        // Discover flash loan balance after the liquidation\\n        uint256 flashBorrowedAssetAfter = IERC20(params.borrowedAsset).balanceOf(address(this));\\n\\n        // Use only flash loan borrowed assets, not current asset balance of the contract\\n        vars.diffFlashBorrowedBalance = flashBorrowedAssetAfter - vars.borrowedAssetLeftovers;\\n\\n        // Swap released collateral into the debt asset, to repay the flash loan\\n        // @TODO improve the swapping of collateral for borrowed asset by calculating the minimum expected collateral offchain\\n        vars.soldAmount = _swapTokensForExactTokens(\\n            params.collateralAsset,\\n            params.borrowedAsset,\\n            vars.diffCollateralBalance,\\n            vars.flashLoanDebt - vars.diffFlashBorrowedBalance\\n        );\\n\\n        vars.remainingCollateralTokens = vars.diffCollateralBalance - vars.soldAmount;\\n\\n        // Allow repay of flash loan\\n        IERC20(params.borrowedAsset).approve(address(LENDING_POOL), vars.flashLoanDebt);\\n\\n        // Transfer remaining collateral tokens to initiator\\n        if (vars.remainingCollateralTokens > 0) {\\n            IERC20(params.collateralAsset).transfer(\\n                params.initiator,\\n                vars.remainingCollateralTokens\\n            );\\n        }\\n\\n        // Transfer remaining borrowed tokens ot initiator\\n        uint256 availableBorrowedAssetAmount =\\n            IERC20(params.borrowedAsset).balanceOf(address(this));\\n        if (availableBorrowedAssetAmount > vars.flashLoanDebt) {\\n            IERC20(params.borrowedAsset).transfer(\\n                params.initiator,\\n                availableBorrowedAssetAmount - vars.flashLoanDebt\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev swap Tokens on Balancer vault\\n     * @param assetToSwapFrom Origin asset\\n     * @param assetToSwapTo Destination asset\\n     * @param maxAmountToSwap Max amount of `assetToSwapFrom` allowed to be swapped\\n     * @param amountToReceive amount of `assetToSwapTo` to receive\\n     * @return amountToSwapped amount swapped\\n     */\\n    function _swapTokensForExactTokens(\\n        address assetToSwapFrom,\\n        address assetToSwapTo,\\n        uint256 maxAmountToSwap,\\n        uint256 amountToReceive\\n    ) internal returns (uint256 amountToSwapped) {\\n        // approve tokens to send to balancer vault to swap\\n        IERC20(assetToSwapFrom).approve(address(balancerVault), maxAmountToSwap);\\n\\n        // purchase amountToReceive from balancer vault via swap\\n        amountToSwapped = balancerVault.swap(\\n            IBalancerVaultV2.SingleSwap({\\n                poolId: \\\"\\\",\\n                kind: IBalancerVaultV2.SwapKind.GIVEN_IN,\\n                assetIn: assetToSwapFrom,\\n                assetOut: assetToSwapTo,\\n                amount: maxAmountToSwap,\\n                userData: \\\"0x00\\\"\\n            }),\\n            IBalancerVaultV2.FundManagement({\\n                sender: address(this),\\n                fromInternalBalance: false,\\n                recipient: payable(address(this)),\\n                toInternalBalance: false\\n            }),\\n            amountToReceive,\\n            block.timestamp + 1 hours\\n        );\\n    }\\n\\n    /**\\n     * @dev Decodes the information encoded in the flash loan params\\n     * @param params Additional variadic field to include extra params\\n     * @return FlashLoanParams struct containing decoded params\\n     */\\n    function _decodeParams(bytes memory params) internal pure returns (FlashLoanParams memory) {\\n        (\\n            address pair,\\n            address collateralAsset,\\n            address borrowedAsset,\\n            address initiator,\\n            address[] memory borrowers\\n        ) = abi.decode(params, (address, address, address, address, address[]));\\n\\n        return FlashLoanParams(pair, collateralAsset, borrowedAsset, initiator, borrowers);\\n    }\\n\\n    /**\\n     * @dev This function must be called only be the LENDING_POOL and takes care of repaying\\n     * active debt positions, migrating collateral and incurring new V2 debt token debt.\\n     *\\n     * @param assets The array of flash loaned assets used to repay debts.\\n     * @param amounts The array of flash loaned asset amounts used to repay debts.\\n     * @param premiums The array of premiums incurred as additional debts.\\n     * @param initiator The address that initiated the flash loan, unused.\\n     * @param params The byte array containing\\n     */\\n    function executeOperation(\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata premiums,\\n        address initiator,\\n        bytes calldata params\\n    ) external override returns (bool) {\\n        FlashLoanParams memory decodedParams = _decodeParams(params);\\n\\n        require(\\n            assets.length == 1 &&\\n                assets[0] == decodedParams.borrowedAsset &&\\n                decodedParams.borrowers.length > 0,\\n            \\\"INCONSISTENT_PARAMS\\\"\\n        );\\n\\n        _liquidateAndSwap(amounts[0], decodedParams, premiums[0]);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev This function will trigger logic to flashloan borrow and liquidate\\n     *\\n     * @param pair warp finance pair\\n     * @param borrowers who will be liquidated\\n     * @param amount of tokens to borrow & liquidate\\n     */\\n    function flashLoanToLiquidate(\\n        IBSLendingPair pair,\\n        address[] memory borrowers,\\n        uint256 amount\\n    ) public {\\n        require(address(pair) != address(0), \\\"Invalid Pair\\\");\\n\\n        uint256[] memory modes = new uint256[](1);\\n        modes[0] = 0; // 0 = no debt (flash), 1 = stable, 2 = variable\\n\\n        address[] memory assets = new address[](1);\\n        assets[0] = address(pair.asset());\\n\\n        uint256[] memory amounts = new uint256[](1);\\n        amounts[0] = amount;\\n\\n        bytes memory params =\\n            abi.encode(address(pair), pair.collateralAsset(), pair.asset(), msg.sender, borrowers);\\n\\n        LENDING_POOL.flashLoan(\\n            address(this), // receiverAddress\\n            assets,\\n            amounts,\\n            modes,\\n            address(this), // onBehalfOf\\n            params,\\n            0 // referralCode\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xb44177d6e98b34a490f905be08554e734c9c29b3a57eec26a11da40669b5e506\",\"license\":\"MIT\"},\"contracts/liquidation/aave/FlashLoanReceiverBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IFlashLoanReceiverV2} from \\\"../../interfaces/aaveV2/IFlashLoanReceiverV2.sol\\\";\\nimport {\\n    ILendingPoolAddressesProviderV2\\n} from \\\"../../interfaces/aaveV2/ILendingPoolAddressesProviderV2.sol\\\";\\nimport {ILendingPoolV2} from \\\"../../interfaces/aaveV2/ILendingPoolV2.sol\\\";\\n\\n/** \\n    !!!\\n    Never keep funds permanently on your FlashLoanReceiverBase contract as they could be \\n    exposed to a 'griefing' attack, where the stored funds are used by an attacker.\\n    !!!\\n */\\nabstract contract FlashLoanReceiverBaseV2 is IFlashLoanReceiverV2 {\\n    using SafeERC20 for IERC20;\\n\\n    ILendingPoolAddressesProviderV2 public immutable override ADDRESSES_PROVIDER;\\n    ILendingPoolV2 public immutable override LENDING_POOL;\\n\\n    constructor(address provider) {\\n        ADDRESSES_PROVIDER = ILendingPoolAddressesProviderV2(provider);\\n        LENDING_POOL = ILendingPoolV2(ILendingPoolAddressesProviderV2(provider).getLendingPool());\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xecbfce2c46893b11543ad7bbbc0d895dbbf677830cc82bb475264420a871b357\",\"license\":\"MIT\"},\"contracts/util/Withdrawable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n////////////////////////////////////////////////////////////////////////////////////////////\\n///\\n/// @title Withdrawable\\n/// @author @conlot-crypto\\n/// @notice withdraw ERC20 tokens and Ether from the contract\\n///\\n////////////////////////////////////////////////////////////////////////////////////////////\\n\\ncontract Withdrawable is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    address constant ETHER = address(0);\\n\\n    event LogWithdraw(address indexed to, address indexed asset, uint256 amount, uint256 timestamp);\\n\\n    // Fallback function is called when msg.data is not empty\\n    fallback() external payable {}\\n\\n    /// @dev Withdraw asset.\\n    /// @param asset Asset to be withdrawn.\\n    function withdraw(address asset) public onlyOwner {\\n        uint256 assetBalance;\\n        if (asset == ETHER) {\\n            address self = address(this); // workaround for a possible solidity bug\\n            assetBalance = self.balance;\\n            payable(msg.sender).transfer(assetBalance);\\n        } else {\\n            assetBalance = IERC20(asset).balanceOf(address(this));\\n            IERC20(asset).safeTransfer(msg.sender, assetBalance);\\n        }\\n        emit LogWithdraw(msg.sender, asset, assetBalance, block.timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0x9b3405cd3c0844b0568d2ad272c770368244f8947d21ec4d20a55c6cc50ccf17\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b50604051620024a6380380620024a68339810160408190526200003591620001d4565b82806001600160a01b03166080816001600160a01b031660601b81525050806001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200008d57600080fd5b505afa158015620000a2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000c89190620001ae565b60601b6001600160601b03191660a052506000620000e5620001aa565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160a01b038216620001615760405162461bcd60e51b8152600401620001589062000227565b60405180910390fd5b6001600160a01b0381166200018a5760405162461bcd60e51b815260040162000158906200025e565b6001600160601b0319606092831b811660c052911b1660e05250620002a3565b3390565b600060208284031215620001c0578081fd5b8151620001cd816200028a565b9392505050565b600080600060608486031215620001e9578182fd5b8351620001f6816200028a565b602085015190935062000209816200028a565b60408501519092506200021c816200028a565b809150509250925092565b60208082526016908201527f496e76616c69642042616c616e636572205661756c7400000000000000000000604082015260600190565b602080825260129082015271125b9d985b1a590815d85c9c0815985d5b1d60721b604082015260600190565b6001600160a01b0381168114620002a057600080fd5b50565b60805160601c60a05160601c60c05160601c60e05160601c61217e62000328600039600081816108b101528181610bf101528181610c8a01528181610d3001528181610e6e0152610f920152600081816101e5015281816114b401526115a80152600081816106d90152818161088d01526111b9015260006101c1015261217e6000f3fe6080604052600436106100955760003560e01c8063902877be11610059578063902877be14610128578063920f5c8414610148578063b4dcfc7714610175578063deb18f791461018a578063f2fde38b1461019f5761009c565b80630542975c1461009e578063158274a5146100c957806351cff8d9146100de578063715018a6146100fe5780638da5cb5b146101135761009c565b3661009c57005b005b3480156100aa57600080fd5b506100b36101bf565b6040516100c09190611c61565b60405180910390f35b3480156100d557600080fd5b506100b36101e3565b3480156100ea57600080fd5b5061009c6100f936600461182d565b610207565b34801561010a57600080fd5b5061009c61037b565b34801561011f57600080fd5b506100b3610411565b34801561013457600080fd5b5061009c610143366004611a56565b610420565b34801561015457600080fd5b50610168610163366004611939565b610756565b6040516100c09190611d82565b34801561018157600080fd5b506100b361088b565b34801561019657600080fd5b506100b36108af565b3480156101ab57600080fd5b5061009c6101ba36600461182d565b6108d3565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b61020f6109a0565b6001600160a01b0316610220610411565b6001600160a01b03161461024f5760405162461bcd60e51b815260040161024690611e96565b60405180910390fd5b60006001600160a01b038216610298575060405130803191339083156108fc029084906000818181858888f19350505050158015610291573d6000803e3d6000fd5b505061032a565b6040516370a0823160e01b81526001600160a01b038316906370a08231906102c4903090600401611c61565b60206040518083038186803b1580156102dc57600080fd5b505afa1580156102f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103149190611b28565b905061032a6001600160a01b03831633836109a4565b816001600160a01b0316336001600160a01b03167f74217ce088f00bfd283666b763c64f0d1b1c345591dfdd01891dddf52446694e834260405161036f929190612027565b60405180910390a35050565b6103836109a0565b6001600160a01b0316610394610411565b6001600160a01b0316146103ba5760405162461bcd60e51b815260040161024690611e96565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000546001600160a01b031690565b6001600160a01b0383166104465760405162461bcd60e51b815260040161024690611e2a565b6040805160018082528183019092526000916020808301908036833701905050905060008160008151811061048b57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152604080516001808252818301909252600091816020016020820280368337019050509050846001600160a01b03166338d52e0f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156104f357600080fd5b505afa158015610507573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052b9190611b0c565b8160008151811061054c57634e487b7160e01b600052603260045260246000fd5b6001600160a01b03929092166020928302919091019091015260408051600180825281830190925260009181602001602082028036833701905050905083816000815181106105ab57634e487b7160e01b600052603260045260246000fd5b602002602001018181525050600086876001600160a01b031663aabaecd66040518163ffffffff1660e01b815260040160206040518083038186803b1580156105f357600080fd5b505afa158015610607573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062b9190611b0c565b886001600160a01b03166338d52e0f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561066457600080fd5b505afa158015610678573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069c9190611b0c565b33896040516020016106b2959493929190611d2d565b60408051601f198184030181529082905263ab9c4b5d60e01b825291506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063ab9c4b5d9061071b903090879087908a9084908990600090600401611cae565b600060405180830381600087803b15801561073557600080fd5b505af1158015610749573d6000803e3d6000fd5b5050505050505050505050565b60008061079884848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610a2c92505050565b905060018a1480156107f4575080604001516001600160a01b03168b8b60008181106107d457634e487b7160e01b600052603260045260246000fd5b90506020020160208101906107e9919061182d565b6001600160a01b0316145b801561080557506000816080015151115b6108215760405162461bcd60e51b815260040161024690611ecb565b61087a8989600081811061084557634e487b7160e01b600052603260045260246000fd5b90506020020135828989600081811061086e57634e487b7160e01b600052603260045260246000fd5b90506020020135610a94565b5060019a9950505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6108db6109a0565b6001600160a01b03166108ec610411565b6001600160a01b0316146109125760405162461bcd60e51b815260040161024690611e96565b6001600160a01b0381166109385760405162461bcd60e51b815260040161024690611de4565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b3390565b610a278363a9059cbb60e01b84846040516024016109c3929190611d69565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526113fe565b505050565b610a3461176f565b600080600080600086806020019051810190610a509190611849565b6040805160a0810182526001600160a01b03968716815294861660208601529285169284019290925290921660608201526080810191909152979650505050505050565b610a9c61179f565b82602001516001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610acc9190611c61565b60206040518083038186803b158015610ae457600080fd5b505afa158015610af8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1c9190611b28565b81604001818152505082604001516001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610b559190611c61565b60206040518083038186803b158015610b6d57600080fd5b505afa158015610b81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba59190611b28565b808252610bb39085906120a2565b60e0820152610bc2828561208a565b6080820152604080840151905163095ea7b360e01b81526001600160a01b039091169063095ea7b390610c1b907f0000000000000000000000000000000000000000000000000000000000000000908890600401611d69565b602060405180830381600087803b158015610c3557600080fd5b505af1158015610c49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6d9190611a36565b506040808401519051630284c3f560e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691630284c3f591610cc49190309081908a90600401611da7565b6040805180830381600087803b158015610cdd57600080fd5b505af1158015610cf1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d159190611b40565b50508251604051630fc8706d60e21b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691633f21c1b491610d6f91309160019060009081908190600401611c75565b600060405180830381600087803b158015610d8957600080fd5b505af1158015610d9d573d6000803e3d6000fd5b5050505060005b836080015151811015610e515783600001516001600160a01b0316632f86556885608001518381518110610de857634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b8152600401610e0c9190611c61565b600060405180830381600087803b158015610e2657600080fd5b505af1158015610e3a573d6000803e3d6000fd5b505050508080610e49906120e9565b915050610da4565b506040808401519051633de222bb60e21b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691630b620b819130908190859063f7888aec90610eb19086908590600401611d8d565b60206040518083038186803b158015610ec957600080fd5b505afa158015610edd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f019190611b28565b6040518563ffffffff1660e01b8152600401610f209493929190611da7565b602060405180830381600087803b158015610f3a57600080fd5b505af1158015610f4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f729190611b28565b506020830151604051633de222bb60e21b81526000916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691630b620b81919030908190859063f7888aec90610fd69086908590600401611d8d565b60206040518083038186803b158015610fee57600080fd5b505afa158015611002573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110269190611b28565b6040518563ffffffff1660e01b81526004016110459493929190611da7565b602060405180830381600087803b15801561105f57600080fd5b505af1158015611073573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110979190611b28565b90508160400151816110a991906120a2565b606083015260408085015190516370a0823160e01b81526000916001600160a01b0316906370a08231906110e1903090600401611c61565b60206040518083038186803b1580156110f957600080fd5b505afa15801561110d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111319190611b28565b90508260e001518161114391906120a2565b602080850182905286015160408701516060860151608087015161116f9461116a916120a2565b61148d565b60a08401819052606084015161118591906120a2565b60c08401526040808601516080850151915163095ea7b360e01b81526001600160a01b039091169163095ea7b3916111e1917f000000000000000000000000000000000000000000000000000000000000000091600401611d69565b602060405180830381600087803b1580156111fb57600080fd5b505af115801561120f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112339190611a36565b5060c0830151156112cc5784602001516001600160a01b031663a9059cbb86606001518560c001516040518363ffffffff1660e01b8152600401611278929190611d69565b602060405180830381600087803b15801561129257600080fd5b505af11580156112a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ca9190611a36565b505b600085604001516001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016112fe9190611c61565b60206040518083038186803b15801561131657600080fd5b505afa15801561132a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134e9190611b28565b905083608001518111156113f55785604001516001600160a01b031663a9059cbb876060015186608001518461138491906120a2565b6040518363ffffffff1660e01b81526004016113a1929190611d69565b602060405180830381600087803b1580156113bb57600080fd5b505af11580156113cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f39190611a36565b505b50505050505050565b6000611453826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166116579092919063ffffffff16565b805190915015610a2757808060200190518101906114719190611a36565b610a275760405162461bcd60e51b815260040161024690611f39565b60405163095ea7b360e01b81526000906001600160a01b0386169063095ea7b3906114de907f0000000000000000000000000000000000000000000000000000000000000000908790600401611d69565b602060405180830381600087803b1580156114f857600080fd5b505af115801561150c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115309190611a36565b506040805160c081018252600080825260208083018290526001600160a01b038981168486015288811660608086019190915260808086018a90528651808801885260048152630307830360e41b8186015260a0870152865190810187523080825293810185905295860192909252908401919091527f000000000000000000000000000000000000000000000000000000000000000016916352bbbe299190856115dd42610e1061208a565b6040518563ffffffff1660e01b81526004016115fc9493929190611f83565b602060405180830381600087803b15801561161657600080fd5b505af115801561162a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164e9190611b28565b95945050505050565b60606116668484600085611670565b90505b9392505050565b6060824710156116925760405162461bcd60e51b815260040161024690611e50565b61169b85611730565b6116b75760405162461bcd60e51b815260040161024690611f02565b600080866001600160a01b031685876040516116d39190611c45565b60006040518083038185875af1925050503d8060008114611710576040519150601f19603f3d011682016040523d82523d6000602084013e611715565b606091505b5091509150611725828286611736565b979650505050505050565b3b151590565b60608315611745575081611669565b8251156117555782518084602001fd5b8160405162461bcd60e51b81526004016102469190611dd1565b6040805160a081018252600080825260208201819052918101829052606080820192909252608081019190915290565b60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60008083601f8401126117f5578182fd5b50813567ffffffffffffffff81111561180c578182fd5b602083019150836020808302850101111561182657600080fd5b9250929050565b60006020828403121561183e578081fd5b813561166981612130565b600080600080600060a08688031215611860578081fd5b855161186b81612130565b8095505060208087015161187e81612130565b604088015190955061188f81612130565b60608801519094506118a081612130565b608088015190935067ffffffffffffffff8111156118bc578283fd5b8701601f810189136118cc578283fd5b80516118df6118da82612066565b612035565b81815283810190838501858402850186018d10156118fb578687fd5b8694505b8385101561192657805161191281612130565b8352600194909401939185019185016118ff565b5080955050505050509295509295909350565b600080600080600080600080600060a08a8c031215611956578384fd5b893567ffffffffffffffff8082111561196d578586fd5b6119798d838e016117e4565b909b50995060208c0135915080821115611991578586fd5b61199d8d838e016117e4565b909950975060408c01359150808211156119b5578586fd5b6119c18d838e016117e4565b909750955060608c013591506119d682612130565b90935060808b013590808211156119eb578384fd5b818c0191508c601f8301126119fe578384fd5b813581811115611a0c578485fd5b8d6020828501011115611a1d578485fd5b6020830194508093505050509295985092959850929598565b600060208284031215611a47578081fd5b81518015158114611669578182fd5b600080600060608486031215611a6a578283fd5b8335611a7581612130565b925060208481013567ffffffffffffffff811115611a91578384fd5b8501601f81018713611aa1578384fd5b8035611aaf6118da82612066565b81815283810190838501858402850186018b1015611acb578788fd5b8794505b83851015611af6578035611ae281612130565b835260019490940193918501918501611acf565b5096999698505050506040949094013593505050565b600060208284031215611b1d578081fd5b815161166981612130565b600060208284031215611b39578081fd5b5051919050565b60008060408385031215611b52578182fd5b505080516020909101519092909150565b6001600160a01b03169052565b6000815180845260208085019450808401835b83811015611ba85781516001600160a01b031687529582019590820190600101611b83565b509495945050505050565b6000815180845260208085019450808401835b83811015611ba857815187529582019590820190600101611bc6565b60008151808452611bfa8160208601602086016120b9565b601f01601f19169290920160200192915050565b6001600160a01b03808251168352602082015115156020840152806040830151166040840152506060810151151560608301525050565b60008251611c578184602087016120b9565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039687168152949095166020850152911515604084015260ff166060830152608082015260a081019190915260c00190565b60006001600160a01b03808a16835260e06020840152611cd160e084018a611b70565b8381036040850152611ce3818a611bb3565b90508381036060850152611cf78189611bb3565b9050818716608085015283810360a0850152611d138187611be2565b9250505061ffff831660c083015298975050505050505050565b60006001600160a01b0380881683528087166020840152808616604084015280851660608401525060a0608083015261172560a0830184611b70565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6000602082526116696020830184611be2565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252600c908201526b24b73b30b634b2102830b4b960a11b604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526013908201527f494e434f4e53495354454e545f504152414d5300000000000000000000000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b600060e08252855160e0830152602086015160028110611fb157634e487b7160e01b82526021600452602482fd5b6101008301526040860151611fca610120840182611b63565b506060860151611fde610140840182611b63565b50608086015161016083015260a086015160c06101808401526120056101a0840182611be2565b9150506120156020830186611c0e565b60a082019390935260c0015292915050565b918252602082015260400190565b604051601f8201601f1916810167ffffffffffffffff8111828210171561205e5761205e61211a565b604052919050565b600067ffffffffffffffff8211156120805761208061211a565b5060209081020190565b6000821982111561209d5761209d612104565b500190565b6000828210156120b4576120b4612104565b500390565b60005b838110156120d45781810151838201526020016120bc565b838111156120e3576000848401525b50505050565b60006000198214156120fd576120fd612104565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461214557600080fd5b5056fea26469706673582212209127812ad4a9843026423141ff5388fe1a1d436adc5a4547ae1c0b49ade5245d64736f6c63430008010033",
  "deployedBytecode": "0x6080604052600436106100955760003560e01c8063902877be11610059578063902877be14610128578063920f5c8414610148578063b4dcfc7714610175578063deb18f791461018a578063f2fde38b1461019f5761009c565b80630542975c1461009e578063158274a5146100c957806351cff8d9146100de578063715018a6146100fe5780638da5cb5b146101135761009c565b3661009c57005b005b3480156100aa57600080fd5b506100b36101bf565b6040516100c09190611c61565b60405180910390f35b3480156100d557600080fd5b506100b36101e3565b3480156100ea57600080fd5b5061009c6100f936600461182d565b610207565b34801561010a57600080fd5b5061009c61037b565b34801561011f57600080fd5b506100b3610411565b34801561013457600080fd5b5061009c610143366004611a56565b610420565b34801561015457600080fd5b50610168610163366004611939565b610756565b6040516100c09190611d82565b34801561018157600080fd5b506100b361088b565b34801561019657600080fd5b506100b36108af565b3480156101ab57600080fd5b5061009c6101ba36600461182d565b6108d3565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b61020f6109a0565b6001600160a01b0316610220610411565b6001600160a01b03161461024f5760405162461bcd60e51b815260040161024690611e96565b60405180910390fd5b60006001600160a01b038216610298575060405130803191339083156108fc029084906000818181858888f19350505050158015610291573d6000803e3d6000fd5b505061032a565b6040516370a0823160e01b81526001600160a01b038316906370a08231906102c4903090600401611c61565b60206040518083038186803b1580156102dc57600080fd5b505afa1580156102f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103149190611b28565b905061032a6001600160a01b03831633836109a4565b816001600160a01b0316336001600160a01b03167f74217ce088f00bfd283666b763c64f0d1b1c345591dfdd01891dddf52446694e834260405161036f929190612027565b60405180910390a35050565b6103836109a0565b6001600160a01b0316610394610411565b6001600160a01b0316146103ba5760405162461bcd60e51b815260040161024690611e96565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000546001600160a01b031690565b6001600160a01b0383166104465760405162461bcd60e51b815260040161024690611e2a565b6040805160018082528183019092526000916020808301908036833701905050905060008160008151811061048b57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152604080516001808252818301909252600091816020016020820280368337019050509050846001600160a01b03166338d52e0f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156104f357600080fd5b505afa158015610507573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052b9190611b0c565b8160008151811061054c57634e487b7160e01b600052603260045260246000fd5b6001600160a01b03929092166020928302919091019091015260408051600180825281830190925260009181602001602082028036833701905050905083816000815181106105ab57634e487b7160e01b600052603260045260246000fd5b602002602001018181525050600086876001600160a01b031663aabaecd66040518163ffffffff1660e01b815260040160206040518083038186803b1580156105f357600080fd5b505afa158015610607573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062b9190611b0c565b886001600160a01b03166338d52e0f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561066457600080fd5b505afa158015610678573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069c9190611b0c565b33896040516020016106b2959493929190611d2d565b60408051601f198184030181529082905263ab9c4b5d60e01b825291506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063ab9c4b5d9061071b903090879087908a9084908990600090600401611cae565b600060405180830381600087803b15801561073557600080fd5b505af1158015610749573d6000803e3d6000fd5b5050505050505050505050565b60008061079884848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610a2c92505050565b905060018a1480156107f4575080604001516001600160a01b03168b8b60008181106107d457634e487b7160e01b600052603260045260246000fd5b90506020020160208101906107e9919061182d565b6001600160a01b0316145b801561080557506000816080015151115b6108215760405162461bcd60e51b815260040161024690611ecb565b61087a8989600081811061084557634e487b7160e01b600052603260045260246000fd5b90506020020135828989600081811061086e57634e487b7160e01b600052603260045260246000fd5b90506020020135610a94565b5060019a9950505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6108db6109a0565b6001600160a01b03166108ec610411565b6001600160a01b0316146109125760405162461bcd60e51b815260040161024690611e96565b6001600160a01b0381166109385760405162461bcd60e51b815260040161024690611de4565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b3390565b610a278363a9059cbb60e01b84846040516024016109c3929190611d69565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526113fe565b505050565b610a3461176f565b600080600080600086806020019051810190610a509190611849565b6040805160a0810182526001600160a01b03968716815294861660208601529285169284019290925290921660608201526080810191909152979650505050505050565b610a9c61179f565b82602001516001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610acc9190611c61565b60206040518083038186803b158015610ae457600080fd5b505afa158015610af8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1c9190611b28565b81604001818152505082604001516001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610b559190611c61565b60206040518083038186803b158015610b6d57600080fd5b505afa158015610b81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba59190611b28565b808252610bb39085906120a2565b60e0820152610bc2828561208a565b6080820152604080840151905163095ea7b360e01b81526001600160a01b039091169063095ea7b390610c1b907f0000000000000000000000000000000000000000000000000000000000000000908890600401611d69565b602060405180830381600087803b158015610c3557600080fd5b505af1158015610c49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6d9190611a36565b506040808401519051630284c3f560e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691630284c3f591610cc49190309081908a90600401611da7565b6040805180830381600087803b158015610cdd57600080fd5b505af1158015610cf1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d159190611b40565b50508251604051630fc8706d60e21b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691633f21c1b491610d6f91309160019060009081908190600401611c75565b600060405180830381600087803b158015610d8957600080fd5b505af1158015610d9d573d6000803e3d6000fd5b5050505060005b836080015151811015610e515783600001516001600160a01b0316632f86556885608001518381518110610de857634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b8152600401610e0c9190611c61565b600060405180830381600087803b158015610e2657600080fd5b505af1158015610e3a573d6000803e3d6000fd5b505050508080610e49906120e9565b915050610da4565b506040808401519051633de222bb60e21b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691630b620b819130908190859063f7888aec90610eb19086908590600401611d8d565b60206040518083038186803b158015610ec957600080fd5b505afa158015610edd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f019190611b28565b6040518563ffffffff1660e01b8152600401610f209493929190611da7565b602060405180830381600087803b158015610f3a57600080fd5b505af1158015610f4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f729190611b28565b506020830151604051633de222bb60e21b81526000916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691630b620b81919030908190859063f7888aec90610fd69086908590600401611d8d565b60206040518083038186803b158015610fee57600080fd5b505afa158015611002573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110269190611b28565b6040518563ffffffff1660e01b81526004016110459493929190611da7565b602060405180830381600087803b15801561105f57600080fd5b505af1158015611073573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110979190611b28565b90508160400151816110a991906120a2565b606083015260408085015190516370a0823160e01b81526000916001600160a01b0316906370a08231906110e1903090600401611c61565b60206040518083038186803b1580156110f957600080fd5b505afa15801561110d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111319190611b28565b90508260e001518161114391906120a2565b602080850182905286015160408701516060860151608087015161116f9461116a916120a2565b61148d565b60a08401819052606084015161118591906120a2565b60c08401526040808601516080850151915163095ea7b360e01b81526001600160a01b039091169163095ea7b3916111e1917f000000000000000000000000000000000000000000000000000000000000000091600401611d69565b602060405180830381600087803b1580156111fb57600080fd5b505af115801561120f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112339190611a36565b5060c0830151156112cc5784602001516001600160a01b031663a9059cbb86606001518560c001516040518363ffffffff1660e01b8152600401611278929190611d69565b602060405180830381600087803b15801561129257600080fd5b505af11580156112a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ca9190611a36565b505b600085604001516001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016112fe9190611c61565b60206040518083038186803b15801561131657600080fd5b505afa15801561132a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134e9190611b28565b905083608001518111156113f55785604001516001600160a01b031663a9059cbb876060015186608001518461138491906120a2565b6040518363ffffffff1660e01b81526004016113a1929190611d69565b602060405180830381600087803b1580156113bb57600080fd5b505af11580156113cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f39190611a36565b505b50505050505050565b6000611453826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166116579092919063ffffffff16565b805190915015610a2757808060200190518101906114719190611a36565b610a275760405162461bcd60e51b815260040161024690611f39565b60405163095ea7b360e01b81526000906001600160a01b0386169063095ea7b3906114de907f0000000000000000000000000000000000000000000000000000000000000000908790600401611d69565b602060405180830381600087803b1580156114f857600080fd5b505af115801561150c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115309190611a36565b506040805160c081018252600080825260208083018290526001600160a01b038981168486015288811660608086019190915260808086018a90528651808801885260048152630307830360e41b8186015260a0870152865190810187523080825293810185905295860192909252908401919091527f000000000000000000000000000000000000000000000000000000000000000016916352bbbe299190856115dd42610e1061208a565b6040518563ffffffff1660e01b81526004016115fc9493929190611f83565b602060405180830381600087803b15801561161657600080fd5b505af115801561162a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164e9190611b28565b95945050505050565b60606116668484600085611670565b90505b9392505050565b6060824710156116925760405162461bcd60e51b815260040161024690611e50565b61169b85611730565b6116b75760405162461bcd60e51b815260040161024690611f02565b600080866001600160a01b031685876040516116d39190611c45565b60006040518083038185875af1925050503d8060008114611710576040519150601f19603f3d011682016040523d82523d6000602084013e611715565b606091505b5091509150611725828286611736565b979650505050505050565b3b151590565b60608315611745575081611669565b8251156117555782518084602001fd5b8160405162461bcd60e51b81526004016102469190611dd1565b6040805160a081018252600080825260208201819052918101829052606080820192909252608081019190915290565b60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60008083601f8401126117f5578182fd5b50813567ffffffffffffffff81111561180c578182fd5b602083019150836020808302850101111561182657600080fd5b9250929050565b60006020828403121561183e578081fd5b813561166981612130565b600080600080600060a08688031215611860578081fd5b855161186b81612130565b8095505060208087015161187e81612130565b604088015190955061188f81612130565b60608801519094506118a081612130565b608088015190935067ffffffffffffffff8111156118bc578283fd5b8701601f810189136118cc578283fd5b80516118df6118da82612066565b612035565b81815283810190838501858402850186018d10156118fb578687fd5b8694505b8385101561192657805161191281612130565b8352600194909401939185019185016118ff565b5080955050505050509295509295909350565b600080600080600080600080600060a08a8c031215611956578384fd5b893567ffffffffffffffff8082111561196d578586fd5b6119798d838e016117e4565b909b50995060208c0135915080821115611991578586fd5b61199d8d838e016117e4565b909950975060408c01359150808211156119b5578586fd5b6119c18d838e016117e4565b909750955060608c013591506119d682612130565b90935060808b013590808211156119eb578384fd5b818c0191508c601f8301126119fe578384fd5b813581811115611a0c578485fd5b8d6020828501011115611a1d578485fd5b6020830194508093505050509295985092959850929598565b600060208284031215611a47578081fd5b81518015158114611669578182fd5b600080600060608486031215611a6a578283fd5b8335611a7581612130565b925060208481013567ffffffffffffffff811115611a91578384fd5b8501601f81018713611aa1578384fd5b8035611aaf6118da82612066565b81815283810190838501858402850186018b1015611acb578788fd5b8794505b83851015611af6578035611ae281612130565b835260019490940193918501918501611acf565b5096999698505050506040949094013593505050565b600060208284031215611b1d578081fd5b815161166981612130565b600060208284031215611b39578081fd5b5051919050565b60008060408385031215611b52578182fd5b505080516020909101519092909150565b6001600160a01b03169052565b6000815180845260208085019450808401835b83811015611ba85781516001600160a01b031687529582019590820190600101611b83565b509495945050505050565b6000815180845260208085019450808401835b83811015611ba857815187529582019590820190600101611bc6565b60008151808452611bfa8160208601602086016120b9565b601f01601f19169290920160200192915050565b6001600160a01b03808251168352602082015115156020840152806040830151166040840152506060810151151560608301525050565b60008251611c578184602087016120b9565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039687168152949095166020850152911515604084015260ff166060830152608082015260a081019190915260c00190565b60006001600160a01b03808a16835260e06020840152611cd160e084018a611b70565b8381036040850152611ce3818a611bb3565b90508381036060850152611cf78189611bb3565b9050818716608085015283810360a0850152611d138187611be2565b9250505061ffff831660c083015298975050505050505050565b60006001600160a01b0380881683528087166020840152808616604084015280851660608401525060a0608083015261172560a0830184611b70565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6000602082526116696020830184611be2565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252600c908201526b24b73b30b634b2102830b4b960a11b604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526013908201527f494e434f4e53495354454e545f504152414d5300000000000000000000000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b600060e08252855160e0830152602086015160028110611fb157634e487b7160e01b82526021600452602482fd5b6101008301526040860151611fca610120840182611b63565b506060860151611fde610140840182611b63565b50608086015161016083015260a086015160c06101808401526120056101a0840182611be2565b9150506120156020830186611c0e565b60a082019390935260c0015292915050565b918252602082015260400190565b604051601f8201601f1916810167ffffffffffffffff8111828210171561205e5761205e61211a565b604052919050565b600067ffffffffffffffff8211156120805761208061211a565b5060209081020190565b6000821982111561209d5761209d612104565b500190565b6000828210156120b4576120b4612104565b500390565b60005b838110156120d45781810151838201526020016120bc565b838111156120e3576000848401525b50505050565b60006000198214156120fd576120fd612104565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461214557600080fd5b5056fea26469706673582212209127812ad4a9843026423141ff5388fe1a1d436adc5a4547ae1c0b49ade5245d64736f6c63430008010033",
  "devdoc": {
    "author": "@conlot-crypto",
    "kind": "dev",
    "methods": {
      "executeOperation(address[],uint256[],uint256[],address,bytes)": {
        "details": "This function must be called only be the LENDING_POOL and takes care of repaying active debt positions, migrating collateral and incurring new V2 debt token debt.",
        "params": {
          "amounts": "The array of flash loaned asset amounts used to repay debts.",
          "assets": "The array of flash loaned assets used to repay debts.",
          "initiator": "The address that initiated the flash loan, unused.",
          "params": "The byte array containing",
          "premiums": "The array of premiums incurred as additional debts."
        }
      },
      "flashLoanToLiquidate(address,address[],uint256)": {
        "details": "This function will trigger logic to flashloan borrow and liquidate",
        "params": {
          "amount": "of tokens to borrow & liquidate",
          "borrowers": "who will be liquidated",
          "pair": "warp finance pair"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(address)": {
        "details": "Withdraw asset.",
        "params": {
          "asset": "Asset to be withdrawn."
        }
      }
    },
    "stateVariables": {
      "balancerVault": {
        "details": "Balancer V2 Vault"
      },
      "warpVault": {
        "details": "warp.finanace vault"
      }
    },
    "title": "LiquidationHelper",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Element finance Principal(EFP) token Liquidator Contract. A contract that takes the flash loan from Aave. Repays the debt and liquidates the collateral via the EFP pools. Then uses the remaining funds to repay back the flashloan and keeps the rest as profit For USDC PT/USDC, wBTC PT/wBTC, DAI PT/DAI pairs",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/liquidation/LiquidationHelper.sol:LiquidationHelper",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}