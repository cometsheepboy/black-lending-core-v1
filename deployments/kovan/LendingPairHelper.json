{
  "address": "0x635385EFc06e4EEF151C343fc281c0d7293072eC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBSVault",
          "name": "_vault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IBSVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBSLendingPair[]",
          "name": "pairs",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "viewBorrowLimit",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "totals",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBSLendingPair[]",
          "name": "pairs",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "viewBorrowedValue",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "totals",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBSLendingPair[]",
          "name": "pairs",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "viewBorrowedValueInUSD",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "totals",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "args": [
    "0xD6f7c1cE6d2C9C598F0360dF3662c550BC66cf8E"
  ],
  "solcInputHash": "d8f710d108043478052b140f0bad2611",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBSVault\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IBSVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBSLendingPair[]\",\"name\":\"pairs\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"viewBorrowLimit\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"totals\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBSLendingPair[]\",\"name\":\"pairs\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"viewBorrowedValue\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"totals\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBSLendingPair[]\",\"name\":\"pairs\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"viewBorrowedValueInUSD\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"totals\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"@samparsky\",\"kind\":\"dev\",\"methods\":{},\"title\":\"LendingPair\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Helper functions to fetch data from LendingPairs\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/helper/LendingPairHelper.sol\":\"LendingPairHelper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"contracts/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport \\\"./interfaces/IInterestRateModel.sol\\\";\\nimport \\\"./interfaces/IBSWrapperToken.sol\\\";\\nimport \\\"./interfaces/IDebtToken.sol\\\";\\n\\n////////////////////////////////////////////////////////////////////////////////////////////\\n/// @title DataTypes\\n/// @author @samparsky\\n////////////////////////////////////////////////////////////////////////////////////////////\\n\\nlibrary DataTypes {\\n    struct BorrowAssetConfig {\\n        uint256 initialExchangeRateMantissa;\\n        uint256 reserveFactorMantissa;\\n        uint256 collateralFactor;\\n        IBSWrapperToken wrappedBorrowAsset;\\n        uint256 liquidationFee;\\n        IDebtToken debtToken;\\n    }\\n\\n    function validBorrowAssetConfig(BorrowAssetConfig memory self, address _owner) internal view {\\n        require(self.initialExchangeRateMantissa > 0, \\\"E\\\");\\n        require(self.reserveFactorMantissa > 0, \\\"F\\\");\\n        require(self.collateralFactor > 0, \\\"C\\\");\\n        require(self.liquidationFee > 0, \\\"L\\\");\\n        require(address(self.wrappedBorrowAsset) != address(0), \\\"B\\\");\\n        require(address(self.debtToken) != address(0), \\\"IB\\\");\\n        require(self.wrappedBorrowAsset.owner() == _owner, \\\"IW\\\");\\n        require(self.debtToken.owner() == _owner, \\\"IVW\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xd1864e62a3b1c4ccdd74371dd42742ddbdad9495e534824b6b876a9b7a63cf56\",\"license\":\"MIT\"},\"contracts/helper/LendingPairHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport \\\"../interfaces/IBSLendingPair.sol\\\";\\n\\n////////////////////////////////////////////////////////////////////////////////////////////\\n///\\n/// @title LendingPair\\n/// @author @samparsky\\n/// @notice Helper functions to fetch data from LendingPairs\\n///\\n////////////////////////////////////////////////////////////////////////////////////////////\\n\\ncontract LendingPairHelper {\\n    IBSVault public immutable vault;\\n\\n    constructor(IBSVault _vault) {\\n        vault = _vault;\\n    }\\n\\n    function viewBorrowedValue(IBSLendingPair[] calldata pairs, address _account)\\n        external\\n        view\\n        returns (uint256[] memory totals)\\n    {\\n        totals = new uint256[](pairs.length);\\n        for (uint256 i = 0; i < pairs.length; i++) {\\n            IBSLendingPair pair = pairs[i];\\n            totals[i] = pair.debtToken().balanceOf(_account);\\n        }\\n    }\\n\\n    function viewBorrowedValueInUSD(IBSLendingPair[] calldata pairs, address _account)\\n        external\\n        view\\n        returns (uint256[] memory totals)\\n    {\\n        totals = new uint256[](pairs.length);\\n        for (uint256 i = 0; i < pairs.length; i++) {\\n            IBSLendingPair pair = pairs[i];\\n            uint256 currentBorrowBalance = pair.borrowBalancePrior(_account);\\n            uint256 priceInUSD = pair.oracle().getPriceInUSD(pair.asset()) * currentBorrowBalance;\\n            totals[i] = priceInUSD;\\n        }\\n    }\\n\\n    function viewBorrowLimit(IBSLendingPair[] calldata pairs, address _account)\\n        external\\n        view\\n        returns (uint256[] memory totals)\\n    {\\n        totals = new uint256[](pairs.length);\\n        for (uint256 i = 0; i < pairs.length; i++) {\\n            IBSLendingPair pair = pairs[i];\\n            uint256 underlyingAmount =\\n                vault.toUnderlying(pair.collateralAsset(), pair.collateralOfAccount(_account));\\n\\n            totals[i] = pair.calcBorrowLimit(underlyingAmount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x77f25348ea29d27163d8d0875d13a906121ef0081da74463b086e9186828826d\",\"license\":\"MIT\"},\"contracts/interfaces/IBSLendingPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IPriceOracleAggregator.sol\\\";\\nimport \\\"./IBSWrapperToken.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\nimport \\\"./IBSVault.sol\\\";\\nimport \\\"../DataTypes.sol\\\";\\n\\ninterface IBSLendingPair {\\n    event Initialized(\\n        address indexed pair,\\n        address indexed asset,\\n        address indexed collateralAsset,\\n        address pauseGuardian\\n    );\\n\\n    /**\\n     * Emitted on deposit\\n     *\\n     * @param pair The pair being interacted with\\n     * @param asset The asset deposited in the pair\\n     * @param tokenReceipeint The user the receives the bsTokens\\n     * @param user The user that made the deposit\\n     * @param amount The amount deposited\\n     **/\\n    event Deposit(\\n        address indexed pair,\\n        address indexed asset,\\n        address indexed tokenReceipeint,\\n        address user,\\n        uint256 amount\\n    );\\n\\n    event Borrow(address indexed borrower, uint256 amount);\\n\\n    /**\\n     * Emitted on Redeem\\n     *\\n     * @param pair The pair being interacted with\\n     * @param asset The asset withdraw in the pair\\n     * @param user The user that's making the withdrawal\\n     * @param to The user the receives the withdrawn tokens\\n     * @param amount The amount being withdrawn\\n     **/\\n    event Redeem(\\n        address indexed pair,\\n        address indexed asset,\\n        address indexed user,\\n        address to,\\n        uint256 amount,\\n        uint256 amountofWrappedBurned\\n    );\\n\\n    event WithdrawCollateral(address account, uint256 amount);\\n\\n    event ReserveWithdraw(address user, uint256 shares);\\n\\n    /**\\n     * Emitted on repay\\n     *\\n     * @param pair The pair being interacted with\\n     * @param asset The asset repaid in the pair\\n     * @param beneficiary The user that's getting their debt reduced\\n     * @param repayer The user that's providing the funds\\n     * @param amount The amount being repaid\\n     **/\\n    event Repay(\\n        address indexed pair,\\n        address indexed asset,\\n        address indexed beneficiary,\\n        address repayer,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * Emitted on liquidation\\n     *\\n     * @param pair The pair being interacted with\\n     * @param asset The asset that getting liquidated\\n     * @param user The user that's getting liquidated\\n     * @param liquidatedCollateralAmount The of collateral transferred to the liquidator\\n     * @param liquidator The liquidator\\n     **/\\n    event Liquidate(\\n        address indexed pair,\\n        address indexed asset,\\n        address indexed user,\\n        uint256 liquidatedCollateralAmount,\\n        address liquidator\\n    );\\n\\n    /**\\n     * @dev Emitted on flashLoan\\n     * @param target The address of the flash loan receiver contract\\n     * @param initiator The address initiating the flash loan\\n     * @param asset The address of the asset being flash borrowed\\n     * @param amount The amount flash borrowed\\n     * @param premium The fee flash borrowed\\n     **/\\n    event FlashLoan(\\n        address indexed target,\\n        address indexed initiator,\\n        address indexed asset,\\n        uint256 amount,\\n        uint256 premium\\n    );\\n\\n    /**\\n     * @dev Emitted on interest accrued\\n     * @param accrualBlockNumber block number\\n     * @param borrowIndex borrow index\\n     * @param totalBorrows total borrows\\n     * @param totalReserves total reserves\\n     **/\\n    event InterestAccrued(\\n        address indexed pair,\\n        uint256 accrualBlockNumber,\\n        uint256 borrowIndex,\\n        uint256 totalBorrows,\\n        uint256 totalReserves\\n    );\\n\\n    event InterestShortCircuit(uint256 blockNumber);\\n\\n    event ActionPaused(uint8 action, uint256 timestamp);\\n    event ActionUnPaused(uint8 action, uint256 timestamp);\\n\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        IERC20 _asset,\\n        IERC20 _collateralAsset,\\n        DataTypes.BorrowAssetConfig calldata borrowConfig,\\n        IBSWrapperToken _wrappedCollateralAsset,\\n        IInterestRateModel _interestRate,\\n        address _pauseGuardian\\n    ) external;\\n\\n    function asset() external view returns (IERC20);\\n\\n    function depositBorrowAsset(address _tokenReceipeint, uint256 _amount) external;\\n\\n    function depositCollateral(address _tokenReceipeint, uint256 _vaultShareAmount) external;\\n\\n    function redeem(address _to, uint256 _amount) external;\\n\\n    function collateralOfAccount(address _account) external view returns (uint256);\\n\\n    function getMaxWithdrawAllowed(address account) external returns (uint256);\\n\\n    function oracle() external view returns (IPriceOracleAggregator);\\n\\n    function collateralAsset() external view returns (IERC20);\\n\\n    function calcBorrowLimit(uint256 amount) external view returns (uint256);\\n\\n    function accountInterestIndex(address) external view returns (uint256);\\n\\n    function borrowIndex() external view returns (uint256);\\n\\n    function debtToken() external view returns (IDebtToken);\\n\\n    function borrowBalancePrior(address _account) external view returns (uint256);\\n\\n    function wrapperBorrowedAsset() external view returns (IBSWrapperToken);\\n\\n    function wrappedCollateralAsset() external view returns (IBSWrapperToken);\\n\\n    function totalReserves() external view returns (uint256);\\n\\n    function withdrawFees(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xdad72f619915bc1af119ca59398ad1c7247c71cd503e004f55b7056e63928b41\",\"license\":\"MIT\"},\"contracts/interfaces/IBSVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IERC3156FlashLender.sol\\\";\\n\\ninterface IBSVault is IERC3156FlashLender {\\n    // ************** //\\n    // *** EVENTS *** //\\n    // ************** //\\n\\n    /// @notice Emitted on deposit\\n    /// @param token being deposited\\n    /// @param from address making the depsoit\\n    /// @param to address to credit the tokens being deposited\\n    /// @param amount being deposited\\n    /// @param shares the represent the amount deposited in the vault\\n    event Deposit(\\n        IERC20 indexed token,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        uint256 shares\\n    );\\n\\n    /// @notice Emitted on withdraw\\n    /// @param token being deposited\\n    /// @param from address making the depsoit\\n    /// @param to address to credit the tokens being withdrawn\\n    /// @param amount Amount of underlying being withdrawn\\n    /// @param shares the represent the amount withdraw from the vault\\n    event Withdraw(\\n        IERC20 indexed token,\\n        address indexed from,\\n        address indexed to,\\n        uint256 shares,\\n        uint256 amount\\n    );\\n\\n    event Transfer(IERC20 indexed token, address indexed from, address indexed to, uint256 amount);\\n\\n    event FlashLoan(\\n        address indexed borrower,\\n        IERC20 indexed token,\\n        uint256 amount,\\n        uint256 feeAmount,\\n        address indexed receiver\\n    );\\n\\n    event TransferControl(address _newTeam, uint256 timestamp);\\n\\n    event UpdateFlashLoanRate(uint256 newRate);\\n\\n    event Approval(address indexed user, address indexed allowed, bool status);\\n\\n    event OwnershipAccepted(address newOwner, uint256 timestamp);\\n\\n    event RegisterProtocol(address sender);\\n\\n    event AllowContract(address whitelist, bool status);\\n\\n    event RescueFunds(IERC20 token, uint256 amount);\\n\\n    // ************** //\\n    // *** FUNCTIONS *** //\\n    // ************** //\\n\\n    function initialize(uint256 _flashLoanRate, address _owner) external;\\n\\n    function approveContract(\\n        address _user,\\n        address _contract,\\n        bool _status,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function deposit(\\n        IERC20 _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external returns (uint256);\\n\\n    function withdraw(\\n        IERC20 _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external returns (uint256);\\n\\n    function balanceOf(IERC20, address) external view returns (uint256);\\n\\n    function transfer(\\n        IERC20 _token,\\n        address _from,\\n        address _to,\\n        uint256 _shares\\n    ) external;\\n\\n    function toShare(\\n        IERC20 token,\\n        uint256 amount,\\n        bool ceil\\n    ) external view returns (uint256);\\n\\n    function toUnderlying(IERC20 token, uint256 share) external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0x3dd32eeae3b83d329e1498e2f82e608c882c100ea06e7545e0d5c531baea600d\",\"license\":\"MIT\"},\"contracts/interfaces/IBSWrapperToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IRewardDistributorManager.sol\\\";\\n\\ninterface IBSWrapperTokenBase is IERC20 {\\n    function initialize(\\n        address _owner,\\n        address _underlying,\\n        string memory _tokenName,\\n        string memory _tokenSymbol,\\n        IRewardDistributorManager _manager\\n    ) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n\\n    function owner() external view returns (address);\\n}\\n\\ninterface IBSWrapperToken is IBSWrapperTokenBase {\\n    function mint(address _to, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xb517729706c5471ef0fea6e8daf03586f6cc926c9eeb716ae7d13a8de2053e70\",\"license\":\"MIT\"},\"contracts/interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport {IBSWrapperTokenBase} from \\\"./IBSWrapperToken.sol\\\";\\n\\ninterface IDebtToken is IBSWrapperTokenBase {\\n    event DelegateBorrow(address from, address to, uint256 amount, uint256 timestamp);\\n\\n    function increaseTotalDebt(uint256 _amount) external;\\n\\n    function principal(address _account) external view returns (uint256);\\n\\n    function mint(\\n        address _to,\\n        address _owner,\\n        uint256 _amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcad520d843e96fae406142ca82ec1333a7600c3900424707c4a91283126e739a\",\"license\":\"MIT\"},\"contracts/interfaces/IERC3156FlashBorrower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\ninterface IERC3156FlashBorrower {\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0xc72afde3ab27c13b3437769c92b10e48dc143565ba2bcf9e78f6713d4695d924\",\"license\":\"MIT\"},\"contracts/interfaces/IERC3156FlashLender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.1;\\nimport \\\"./IERC3156FlashBorrower.sol\\\";\\n\\ninterface IERC3156FlashLender {\\n    /**\\n     * @dev The amount of currency available to be lent.\\n     * @param token The loan currency.\\n     * @return The amount of `token` that can be borrowed.\\n     */\\n    function maxFlashLoan(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev The fee to be charged for a given loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n     */\\n    function flashFee(address token, uint256 amount) external view returns (uint256);\\n\\n    /**\\n     * @dev Initiate a flash loan.\\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     */\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x381589754fc2917129ff2192df23588009fecb73f6df12bc9218dd731d25758d\",\"license\":\"MIT\"},\"contracts/interfaces/IInterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\ninterface IInterestRateModel {\\n    /**\\n     * @notice Calculates the current borrow interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amount of reserves the market has\\n     * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getBorrowRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Calculates the current supply interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amount of reserves the market has\\n     * @param reserveFactorMantissa The current reserve factor the market has\\n     * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getSupplyRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves,\\n        uint256 reserveFactorMantissa\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe6b72371b9b062ac92f3f18f7d6481e951714c95c2dd50a3ee13a266b72c2882\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\ninterface IOracle {\\n    /// @notice Price update event\\n    /// @param asset the asset\\n    /// @param newPrice price of the asset\\n    event PriceUpdated(address asset, uint256 newPrice);\\n\\n    /// @dev returns latest answer\\n    function latestAnswer() external view returns (int256);\\n}\\n\",\"keccak256\":\"0x28eea16f99e07c31d30e3bee3df4491c2e04ca9edbd235fd93903e8c5a21f01b\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceOracleAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\n\\ninterface IPriceOracleAggregator {\\n    event UpdateOracle(IERC20 token, IOracle oracle);\\n\\n    function getPriceInUSD(IERC20 _token) external view returns (uint256);\\n\\n    function getPriceInUSDMultiple(IERC20[] calldata _tokens)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function setOracleForAsset(IERC20[] calldata _asset, IOracle[] calldata _oracle) external;\\n\\n    event OwnershipAccepted(address newOwner, uint256 timestamp);\\n    event TransferControl(address _newTeam, uint256 timestamp);\\n    event StableTokenAdded(IERC20 _token, uint256 timestamp);\\n}\\n\",\"keccak256\":\"0xee8b12a38e513badf81f26e3ff225cf28c1d6f1b731f61b67fcb3a12f49b8bb9\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRewardDistributor {\\n    event Initialized(\\n        IERC20 indexed _rewardToken,\\n        uint256 _amountDistributePerSecond,\\n        uint256 _startTimestamp,\\n        uint256 _endTimestamp,\\n        address _guardian,\\n        uint256 timestamp\\n    );\\n\\n    function accumulateReward(address _tokenAddr, address _user) external;\\n\\n    function endTimestamp() external returns (uint256);\\n\\n    function initialize(\\n        string calldata _name,\\n        IERC20 _rewardToken,\\n        uint256 _amountDistributePerSecond,\\n        uint256 _startTimestamp,\\n        uint256 _endTimestamp,\\n        address _guardian\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2d752f87ed5d75fe0498b53e76ad181ece87eb6287432f15a440b92a4efd18cd\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardDistributorManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport \\\"./IRewardDistributor.sol\\\";\\n\\ninterface IRewardDistributorManager {\\n    /// @dev Emitted on Initialization\\n    event Initialized(address owner, uint256 timestamp);\\n\\n    event ApprovedDistributor(IRewardDistributor distributor, uint256 timestamp);\\n    event AddReward(address tokenAddr, IRewardDistributor distributor, uint256 timestamp);\\n    event RemoveReward(address tokenAddr, IRewardDistributor distributor, uint256 timestamp);\\n    event TransferControl(address _newTeam, uint256 timestamp);\\n    event OwnershipAccepted(address newOwner, uint256 timestamp);\\n\\n    function activateReward(address _tokenAddr) external;\\n\\n    function removeReward(address _tokenAddr, IRewardDistributor _distributor) external;\\n\\n    function accumulateRewards(address _from, address _to) external;\\n}\\n\",\"keccak256\":\"0xab04e19e0e0f936e38c3cd18bd1f8db04507c2288db488b7051643faf6feb361\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610ad5380380610ad583398101604081905261002f91610044565b60601b6001600160601b031916608052610072565b600060208284031215610055578081fd5b81516001600160a01b038116811461006b578182fd5b9392505050565b60805160601c610a3e610097600039600081816105e4015261082d0152610a3e6000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063b133c29114610051578063b81c1aa61461007a578063c1605f061461008d578063fbfa77cf146100a0575b600080fd5b61006461005f36600461084f565b6100b5565b604051610071919061093a565b60405180910390f35b61006461008836600461084f565b610280565b61006461009b36600461084f565b610547565b6100a861082b565b6040516100719190610926565b60608267ffffffffffffffff8111156100de57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610107578160200160208202803683370190505b50905060005b8381101561027857600085858381811061013757634e487b7160e01b600052603260045260246000fd5b905060200201602081019061014c91906108cf565b9050806001600160a01b031663f8d898986040518163ffffffff1660e01b815260040160206040518083038186803b15801561018757600080fd5b505afa15801561019b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101bf91906108f2565b6001600160a01b03166370a08231856040518263ffffffff1660e01b81526004016101ea9190610926565b60206040518083038186803b15801561020257600080fd5b505afa158015610216573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023a919061090e565b83838151811061025a57634e487b7160e01b600052603260045260246000fd5b60209081029190910101525080610270816109bf565b91505061010d565b509392505050565b60608267ffffffffffffffff8111156102a957634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156102d2578160200160208202803683370190505b50905060005b8381101561027857600085858381811061030257634e487b7160e01b600052603260045260246000fd5b905060200201602081019061031791906108cf565b90506000816001600160a01b0316637746efab866040518263ffffffff1660e01b81526004016103479190610926565b60206040518083038186803b15801561035f57600080fd5b505afa158015610373573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610397919061090e565b9050600081836001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b1580156103d557600080fd5b505afa1580156103e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040d91906108f2565b6001600160a01b03166302266147856001600160a01b03166338d52e0f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561045457600080fd5b505afa158015610468573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048c91906108f2565b6040518263ffffffff1660e01b81526004016104a89190610926565b60206040518083038186803b1580156104c057600080fd5b505afa1580156104d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f8919061090e565b61050291906109a0565b90508085858151811061052557634e487b7160e01b600052603260045260246000fd5b602002602001018181525050505050808061053f906109bf565b9150506102d8565b60608267ffffffffffffffff81111561057057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610599578160200160208202803683370190505b50905060005b838110156102785760008585838181106105c957634e487b7160e01b600052603260045260246000fd5b90506020020160208101906105de91906108cf565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635299493b836001600160a01b031663aabaecd66040518163ffffffff1660e01b815260040160206040518083038186803b15801561064a57600080fd5b505afa15801561065e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068291906108f2565b60405163f919b4bf60e01b81526001600160a01b0386169063f919b4bf906106ae908b90600401610926565b60206040518083038186803b1580156106c657600080fd5b505afa1580156106da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fe919061090e565b6040518363ffffffff1660e01b815260040161071b92919061097e565b60206040518083038186803b15801561073357600080fd5b505afa158015610747573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076b919061090e565b6040516376b0397b60e11b81529091506001600160a01b0383169063ed6072f69061079a908490600401610997565b60206040518083038186803b1580156107b257600080fd5b505afa1580156107c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ea919061090e565b84848151811061080a57634e487b7160e01b600052603260045260246000fd5b60200260200101818152505050508080610823906109bf565b91505061059f565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080600060408486031215610863578283fd5b833567ffffffffffffffff8082111561087a578485fd5b818601915086601f83011261088d578485fd5b81358181111561089b578586fd5b87602080830285010111156108ae578586fd5b602092830195509350508401356108c4816109f0565b809150509250925092565b6000602082840312156108e0578081fd5b81356108eb816109f0565b9392505050565b600060208284031215610903578081fd5b81516108eb816109f0565b60006020828403121561091f578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6020808252825182820181905260009190848201906040850190845b8181101561097257835183529284019291840191600101610956565b50909695505050505050565b6001600160a01b03929092168252602082015260400190565b90815260200190565b60008160001904831182151516156109ba576109ba6109da565b500290565b60006000198214156109d3576109d36109da565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114610a0557600080fd5b5056fea2646970667358221220261393c2459d219a37472625a13f7ca5c41187319975aa0d7ea915ca0029a6f364736f6c63430008010033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063b133c29114610051578063b81c1aa61461007a578063c1605f061461008d578063fbfa77cf146100a0575b600080fd5b61006461005f36600461084f565b6100b5565b604051610071919061093a565b60405180910390f35b61006461008836600461084f565b610280565b61006461009b36600461084f565b610547565b6100a861082b565b6040516100719190610926565b60608267ffffffffffffffff8111156100de57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610107578160200160208202803683370190505b50905060005b8381101561027857600085858381811061013757634e487b7160e01b600052603260045260246000fd5b905060200201602081019061014c91906108cf565b9050806001600160a01b031663f8d898986040518163ffffffff1660e01b815260040160206040518083038186803b15801561018757600080fd5b505afa15801561019b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101bf91906108f2565b6001600160a01b03166370a08231856040518263ffffffff1660e01b81526004016101ea9190610926565b60206040518083038186803b15801561020257600080fd5b505afa158015610216573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023a919061090e565b83838151811061025a57634e487b7160e01b600052603260045260246000fd5b60209081029190910101525080610270816109bf565b91505061010d565b509392505050565b60608267ffffffffffffffff8111156102a957634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156102d2578160200160208202803683370190505b50905060005b8381101561027857600085858381811061030257634e487b7160e01b600052603260045260246000fd5b905060200201602081019061031791906108cf565b90506000816001600160a01b0316637746efab866040518263ffffffff1660e01b81526004016103479190610926565b60206040518083038186803b15801561035f57600080fd5b505afa158015610373573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610397919061090e565b9050600081836001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b1580156103d557600080fd5b505afa1580156103e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040d91906108f2565b6001600160a01b03166302266147856001600160a01b03166338d52e0f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561045457600080fd5b505afa158015610468573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048c91906108f2565b6040518263ffffffff1660e01b81526004016104a89190610926565b60206040518083038186803b1580156104c057600080fd5b505afa1580156104d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f8919061090e565b61050291906109a0565b90508085858151811061052557634e487b7160e01b600052603260045260246000fd5b602002602001018181525050505050808061053f906109bf565b9150506102d8565b60608267ffffffffffffffff81111561057057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610599578160200160208202803683370190505b50905060005b838110156102785760008585838181106105c957634e487b7160e01b600052603260045260246000fd5b90506020020160208101906105de91906108cf565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635299493b836001600160a01b031663aabaecd66040518163ffffffff1660e01b815260040160206040518083038186803b15801561064a57600080fd5b505afa15801561065e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068291906108f2565b60405163f919b4bf60e01b81526001600160a01b0386169063f919b4bf906106ae908b90600401610926565b60206040518083038186803b1580156106c657600080fd5b505afa1580156106da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fe919061090e565b6040518363ffffffff1660e01b815260040161071b92919061097e565b60206040518083038186803b15801561073357600080fd5b505afa158015610747573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076b919061090e565b6040516376b0397b60e11b81529091506001600160a01b0383169063ed6072f69061079a908490600401610997565b60206040518083038186803b1580156107b257600080fd5b505afa1580156107c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ea919061090e565b84848151811061080a57634e487b7160e01b600052603260045260246000fd5b60200260200101818152505050508080610823906109bf565b91505061059f565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080600060408486031215610863578283fd5b833567ffffffffffffffff8082111561087a578485fd5b818601915086601f83011261088d578485fd5b81358181111561089b578586fd5b87602080830285010111156108ae578586fd5b602092830195509350508401356108c4816109f0565b809150509250925092565b6000602082840312156108e0578081fd5b81356108eb816109f0565b9392505050565b600060208284031215610903578081fd5b81516108eb816109f0565b60006020828403121561091f578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6020808252825182820181905260009190848201906040850190845b8181101561097257835183529284019291840191600101610956565b50909695505050505050565b6001600160a01b03929092168252602082015260400190565b90815260200190565b60008160001904831182151516156109ba576109ba6109da565b500290565b60006000198214156109d3576109d36109da565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114610a0557600080fd5b5056fea2646970667358221220261393c2459d219a37472625a13f7ca5c41187319975aa0d7ea915ca0029a6f364736f6c63430008010033",
  "devdoc": {
    "author": "@samparsky",
    "kind": "dev",
    "methods": {},
    "title": "LendingPair",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Helper functions to fetch data from LendingPairs",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}