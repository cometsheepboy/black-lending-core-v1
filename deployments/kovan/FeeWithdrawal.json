{
  "address": "0xfd036f32f8bdaae83c7792442BfCABf3bcD97e29",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBSVault",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_warpToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wethAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "uuid",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "codeAddress",
          "type": "address"
        }
      ],
      "name": "CodeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogRescueFunds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogTransferToReceiver",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogUpdateAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalWarpReceived",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogWithSwap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalWithdrawnFees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogWithdrawFees",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCodeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "codeAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapV2Router",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "rescueFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amountOuts",
          "type": "uint256[]"
        }
      ],
      "name": "swapFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferToReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapRouter",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "updateAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "updateCode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IBSVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "warpToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBSLendingPair[]",
          "name": "_lendingPairs",
          "type": "address[]"
        }
      ],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "args": [
    "0xD6f7c1cE6d2C9C598F0360dF3662c550BC66cf8E",
    "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",
    "0xed40834a13129509a89be39a9be9c0e96a0ddd71",
    "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
  ],
  "solcInputHash": "d8f710d108043478052b140f0bad2611",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBSVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_warpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"uuid\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"codeAddress\",\"type\":\"address\"}],\"name\":\"CodeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogRescueFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogTransferToReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogUpdateAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalWarpReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogWithSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalWithdrawnFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawFees\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCodeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"codeAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapV2Router\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"rescueFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountOuts\",\"type\":\"uint256[]\"}],\"name\":\"swapFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferToReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"updateAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IBSVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"warpToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBSLendingPair[]\",\"name\":\"_lendingPairs\",\"type\":\"address[]\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_receiver\":\"address of the contract to transfer Warp to\",\"_vault\":\"vault address\",\"_warpToken\":\"address of warp token\",\"_wethAddress\":\"WETH address\"}},\"getCodeAddress()\":{\"details\":\"Get current implementation code address.\"},\"proxiableUUID()\":{\"details\":\"Proxiable UUID marker function.      This would help to avoid wrong logic contract to be used for upgrading.\"},\"swapFees(address[],uint256[])\":{\"details\":\"swap Fees with warpToken\",\"params\":{\"_assets\":\"assets to be swaped\",\"amountOuts\":\"Minimum expected amountOut of the lending pair reserve swap\"}},\"withdrawFees(address[])\":{\"details\":\"to avoid gas costs we are gonna send the underlying pair's asset as param & compute the amount off-chain\",\"params\":{\"_lendingPairs\":\"lending pair addresses\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"WETH()\":{\"notice\":\"WETH address\"},\"admin()\":{\"notice\":\"The admin\"},\"constructor\":{\"notice\":\"Create a new FeeWithdrawal contract\"},\"receiver()\":{\"notice\":\"The address to transfer the swapped WARP to\"},\"uniswapRouter()\":{\"notice\":\"IUniswapRouter used to swap erc20 fee token into warpToken\"},\"vault()\":{\"notice\":\"vault address\"},\"warpToken()\":{\"notice\":\"the token's address that is swapped against any other fee token\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/helper/FeeWithdrawal.sol\":\"FeeWithdrawal\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9abb3184c06afb50807598533c4c0943dd864080d310ac28cbb5b2cfae6a18b1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport \\\"./interfaces/IInterestRateModel.sol\\\";\\nimport \\\"./interfaces/IBSWrapperToken.sol\\\";\\nimport \\\"./interfaces/IDebtToken.sol\\\";\\n\\n////////////////////////////////////////////////////////////////////////////////////////////\\n/// @title DataTypes\\n/// @author @samparsky\\n////////////////////////////////////////////////////////////////////////////////////////////\\n\\nlibrary DataTypes {\\n    struct BorrowAssetConfig {\\n        uint256 initialExchangeRateMantissa;\\n        uint256 reserveFactorMantissa;\\n        uint256 collateralFactor;\\n        IBSWrapperToken wrappedBorrowAsset;\\n        uint256 liquidationFee;\\n        IDebtToken debtToken;\\n    }\\n\\n    function validBorrowAssetConfig(BorrowAssetConfig memory self, address _owner) internal view {\\n        require(self.initialExchangeRateMantissa > 0, \\\"E\\\");\\n        require(self.reserveFactorMantissa > 0, \\\"F\\\");\\n        require(self.collateralFactor > 0, \\\"C\\\");\\n        require(self.liquidationFee > 0, \\\"L\\\");\\n        require(address(self.wrappedBorrowAsset) != address(0), \\\"B\\\");\\n        require(address(self.debtToken) != address(0), \\\"IB\\\");\\n        require(self.wrappedBorrowAsset.owner() == _owner, \\\"IW\\\");\\n        require(self.debtToken.owner() == _owner, \\\"IVW\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xd1864e62a3b1c4ccdd74371dd42742ddbdad9495e534824b6b876a9b7a63cf56\",\"license\":\"MIT\"},\"contracts/helper/FeeWithdrawal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport {UUPSProxiable} from \\\"../upgradability/UUPSProxiable.sol\\\";\\nimport \\\"../interfaces/IBSLendingPair.sol\\\";\\n\\ncontract FeeWithdrawal is UUPSProxiable {\\n    using SafeERC20 for IERC20;\\n\\n    event LogUpdateAdmin(address newAdmin, uint256 timestamp);\\n    event LogRescueFunds(address token, uint256 amount, uint256 timestamp);\\n    event LogTransferToReceiver(address receiver, uint256 amount, uint256 timestamp);\\n    event LogWithdrawFees(uint256 totalWithdrawnFees, uint256 timestamp);\\n    event LogWithSwap(uint256 totalWarpReceived, uint256 timestamp);\\n\\n    uint256 public constant VERSION = 0x1;\\n\\n    /// @notice The address to transfer the swapped WARP to\\n    address public immutable receiver;\\n\\n    /// @notice vault address\\n    IBSVault public immutable vault;\\n\\n    /// @notice the token's address that is swapped against any other fee token\\n    address public immutable warpToken;\\n\\n    /// @notice WETH address\\n    address public immutable WETH;\\n\\n    /// @notice The admin\\n    address public admin;\\n\\n    /// @notice IUniswapRouter used to swap erc20 fee token into warpToken\\n    IUniswapV2Router02 public uniswapRouter;\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"ONLY_ADMIN\\\");\\n        _;\\n    }\\n\\n    modifier onlyEOA() {\\n        // Try to make flash-loan exploit harder to do by only allowing externally-owned addresses.\\n        require(msg.sender == tx.origin, \\\"MUST_BE_EOA\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Create a new FeeWithdrawal contract\\n     * @param _vault vault address\\n     * @param _receiver address of the contract to transfer Warp to\\n     * @param _warpToken address of warp token\\n     * @param _wethAddress WETH address\\n     */\\n    constructor(\\n        IBSVault _vault,\\n        address _receiver,\\n        address _warpToken,\\n        address _wethAddress\\n    ) {\\n        require(address(_vault) != address(0), \\\"INVALID_VAULT\\\");\\n        require(_receiver != address(0), \\\"INVALID_RECEIVER\\\");\\n\\n        require(_warpToken != address(0), \\\"FeeWithdrawal: invalid token address\\\");\\n\\n        require(_wethAddress != address(0), \\\"FeeWithdrawal: invalid weth address\\\");\\n\\n        warpToken = _warpToken;\\n        WETH = _wethAddress;\\n        vault = _vault;\\n        receiver = _receiver;\\n    }\\n\\n    /// @dev to avoid gas costs we are gonna send the underlying pair's asset as param & compute the amount off-chain\\n    /// @param _lendingPairs lending pair addresses\\n    function withdrawFees(IBSLendingPair[] calldata _lendingPairs) external onlyEOA {\\n        require(_lendingPairs.length > 0, \\\"lendingPairs.length\\\");\\n\\n        uint256 totalWithdrawnFees = 0;\\n\\n        for (uint256 i = 0; i < _lendingPairs.length; i++) {\\n            IBSLendingPair pair = _lendingPairs[i];\\n\\n            IERC20 asset = pair.asset();\\n            uint256 amountToWithdraw = pair.totalReserves();\\n\\n            // withdraw to vault\\n            pair.withdrawFees(amountToWithdraw);\\n\\n            // withdraw underlying\\n            vault.withdraw(asset, address(this), address(this), amountToWithdraw);\\n\\n            totalWithdrawnFees += amountToWithdraw;\\n        }\\n\\n        emit LogWithdrawFees(totalWithdrawnFees, block.timestamp);\\n    }\\n\\n    /// @dev swap Fees with warpToken\\n    /// @param _assets assets to be swaped\\n    /// @param amountOuts Minimum expected amountOut of the lending pair reserve swap\\n    function swapFees(IERC20[] calldata _assets, uint256[] calldata amountOuts) external onlyAdmin {\\n        require(_assets.length > 0, \\\"assets.length\\\");\\n\\n        uint256 totalWarpReceived = 0;\\n\\n        for (uint256 i = 0; i < _assets.length; i++) {\\n            IERC20 asset = _assets[i];\\n\\n            uint256 amountToTrade = asset.balanceOf(address(this));\\n\\n            if (address(asset) != warpToken) {\\n                totalWarpReceived += _convertToWarp(address(asset), amountToTrade, amountOuts[i]);\\n            } else {\\n                totalWarpReceived += amountToTrade;\\n            }\\n        }\\n\\n        emit LogWithSwap(totalWarpReceived, block.timestamp);\\n    }\\n\\n    function transferToReceiver() external {\\n        uint256 amount = IERC20(warpToken).balanceOf(address(this));\\n        IERC20(warpToken).transfer(receiver, amount);\\n\\n        emit LogTransferToReceiver(receiver, amount, block.timestamp);\\n    }\\n\\n    function updateAdmin(address _newAdmin) external onlyAdmin {\\n        require(_newAdmin != address(0), \\\"INVALID_ADMIN\\\");\\n        admin = _newAdmin;\\n        emit LogUpdateAdmin(_newAdmin, block.timestamp);\\n    }\\n\\n    function rescueFunds(address _token) external onlyAdmin {\\n        uint256 balance = IERC20(_token).balanceOf(address(this));\\n        IERC20(_token).safeTransfer(admin, balance);\\n        emit LogRescueFunds(_token, balance, block.timestamp);\\n    }\\n\\n    function getPath(address from) internal view returns (address[] memory path) {\\n        if (from == WETH) {\\n            path = new address[](2);\\n            path[0] = WETH;\\n            path[1] = warpToken;\\n        } else {\\n            path = new address[](3);\\n            path[0] = from;\\n            path[1] = WETH;\\n            path[2] = warpToken;\\n        }\\n    }\\n\\n    function _convertToWarp(\\n        address from,\\n        uint256 amount,\\n        uint256 amountOut\\n    ) private returns (uint256) {\\n        address[] memory path = getPath(from);\\n\\n        IERC20(from).safeIncreaseAllowance(address(uniswapRouter), amount);\\n\\n        uint256[] memory amounts =\\n            uniswapRouter.swapExactTokensForTokens(amount, amountOut, path, address(this), 10**64);\\n\\n        return amounts[amounts.length - 1];\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    // UUPSProxiable\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\n    function initialize(address _admin, address _uniswapV2Router) external initializer {\\n        require(_admin != address(0), \\\"INVALID_ADMIN\\\");\\n        admin = _admin;\\n\\n        require(_uniswapV2Router != address(0), \\\"FeeWithdrawal: invalid router address\\\");\\n        uniswapRouter = IUniswapV2Router02(_uniswapV2Router);\\n    }\\n\\n    function proxiableUUID() public pure override returns (bytes32) {\\n        return keccak256(\\\"org.warp.contracts.warphelper.feewithdrawal\\\");\\n    }\\n\\n    function updateCode(address newAddress) external override onlyAdmin {\\n        _updateCodeAddress(newAddress);\\n    }\\n}\\n\",\"keccak256\":\"0xda33b8772e330b5b059430b062b305aee2a6aa97c7b1c868b877ef9c6bdf4987\",\"license\":\"MIT\"},\"contracts/interfaces/IBSLendingPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IPriceOracleAggregator.sol\\\";\\nimport \\\"./IBSWrapperToken.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\nimport \\\"./IBSVault.sol\\\";\\nimport \\\"../DataTypes.sol\\\";\\n\\ninterface IBSLendingPair {\\n    event Initialized(\\n        address indexed pair,\\n        address indexed asset,\\n        address indexed collateralAsset,\\n        address pauseGuardian\\n    );\\n\\n    /**\\n     * Emitted on deposit\\n     *\\n     * @param pair The pair being interacted with\\n     * @param asset The asset deposited in the pair\\n     * @param tokenReceipeint The user the receives the bsTokens\\n     * @param user The user that made the deposit\\n     * @param amount The amount deposited\\n     **/\\n    event Deposit(\\n        address indexed pair,\\n        address indexed asset,\\n        address indexed tokenReceipeint,\\n        address user,\\n        uint256 amount\\n    );\\n\\n    event Borrow(address indexed borrower, uint256 amount);\\n\\n    /**\\n     * Emitted on Redeem\\n     *\\n     * @param pair The pair being interacted with\\n     * @param asset The asset withdraw in the pair\\n     * @param user The user that's making the withdrawal\\n     * @param to The user the receives the withdrawn tokens\\n     * @param amount The amount being withdrawn\\n     **/\\n    event Redeem(\\n        address indexed pair,\\n        address indexed asset,\\n        address indexed user,\\n        address to,\\n        uint256 amount,\\n        uint256 amountofWrappedBurned\\n    );\\n\\n    event WithdrawCollateral(address account, uint256 amount);\\n\\n    event ReserveWithdraw(address user, uint256 shares);\\n\\n    /**\\n     * Emitted on repay\\n     *\\n     * @param pair The pair being interacted with\\n     * @param asset The asset repaid in the pair\\n     * @param beneficiary The user that's getting their debt reduced\\n     * @param repayer The user that's providing the funds\\n     * @param amount The amount being repaid\\n     **/\\n    event Repay(\\n        address indexed pair,\\n        address indexed asset,\\n        address indexed beneficiary,\\n        address repayer,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * Emitted on liquidation\\n     *\\n     * @param pair The pair being interacted with\\n     * @param asset The asset that getting liquidated\\n     * @param user The user that's getting liquidated\\n     * @param liquidatedCollateralAmount The of collateral transferred to the liquidator\\n     * @param liquidator The liquidator\\n     **/\\n    event Liquidate(\\n        address indexed pair,\\n        address indexed asset,\\n        address indexed user,\\n        uint256 liquidatedCollateralAmount,\\n        address liquidator\\n    );\\n\\n    /**\\n     * @dev Emitted on flashLoan\\n     * @param target The address of the flash loan receiver contract\\n     * @param initiator The address initiating the flash loan\\n     * @param asset The address of the asset being flash borrowed\\n     * @param amount The amount flash borrowed\\n     * @param premium The fee flash borrowed\\n     **/\\n    event FlashLoan(\\n        address indexed target,\\n        address indexed initiator,\\n        address indexed asset,\\n        uint256 amount,\\n        uint256 premium\\n    );\\n\\n    /**\\n     * @dev Emitted on interest accrued\\n     * @param accrualBlockNumber block number\\n     * @param borrowIndex borrow index\\n     * @param totalBorrows total borrows\\n     * @param totalReserves total reserves\\n     **/\\n    event InterestAccrued(\\n        address indexed pair,\\n        uint256 accrualBlockNumber,\\n        uint256 borrowIndex,\\n        uint256 totalBorrows,\\n        uint256 totalReserves\\n    );\\n\\n    event InterestShortCircuit(uint256 blockNumber);\\n\\n    event ActionPaused(uint8 action, uint256 timestamp);\\n    event ActionUnPaused(uint8 action, uint256 timestamp);\\n\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        IERC20 _asset,\\n        IERC20 _collateralAsset,\\n        DataTypes.BorrowAssetConfig calldata borrowConfig,\\n        IBSWrapperToken _wrappedCollateralAsset,\\n        IInterestRateModel _interestRate,\\n        address _pauseGuardian\\n    ) external;\\n\\n    function asset() external view returns (IERC20);\\n\\n    function depositBorrowAsset(address _tokenReceipeint, uint256 _amount) external;\\n\\n    function depositCollateral(address _tokenReceipeint, uint256 _vaultShareAmount) external;\\n\\n    function redeem(address _to, uint256 _amount) external;\\n\\n    function collateralOfAccount(address _account) external view returns (uint256);\\n\\n    function getMaxWithdrawAllowed(address account) external returns (uint256);\\n\\n    function oracle() external view returns (IPriceOracleAggregator);\\n\\n    function collateralAsset() external view returns (IERC20);\\n\\n    function calcBorrowLimit(uint256 amount) external view returns (uint256);\\n\\n    function accountInterestIndex(address) external view returns (uint256);\\n\\n    function borrowIndex() external view returns (uint256);\\n\\n    function debtToken() external view returns (IDebtToken);\\n\\n    function borrowBalancePrior(address _account) external view returns (uint256);\\n\\n    function wrapperBorrowedAsset() external view returns (IBSWrapperToken);\\n\\n    function wrappedCollateralAsset() external view returns (IBSWrapperToken);\\n\\n    function totalReserves() external view returns (uint256);\\n\\n    function withdrawFees(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xdad72f619915bc1af119ca59398ad1c7247c71cd503e004f55b7056e63928b41\",\"license\":\"MIT\"},\"contracts/interfaces/IBSVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IERC3156FlashLender.sol\\\";\\n\\ninterface IBSVault is IERC3156FlashLender {\\n    // ************** //\\n    // *** EVENTS *** //\\n    // ************** //\\n\\n    /// @notice Emitted on deposit\\n    /// @param token being deposited\\n    /// @param from address making the depsoit\\n    /// @param to address to credit the tokens being deposited\\n    /// @param amount being deposited\\n    /// @param shares the represent the amount deposited in the vault\\n    event Deposit(\\n        IERC20 indexed token,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        uint256 shares\\n    );\\n\\n    /// @notice Emitted on withdraw\\n    /// @param token being deposited\\n    /// @param from address making the depsoit\\n    /// @param to address to credit the tokens being withdrawn\\n    /// @param amount Amount of underlying being withdrawn\\n    /// @param shares the represent the amount withdraw from the vault\\n    event Withdraw(\\n        IERC20 indexed token,\\n        address indexed from,\\n        address indexed to,\\n        uint256 shares,\\n        uint256 amount\\n    );\\n\\n    event Transfer(IERC20 indexed token, address indexed from, address indexed to, uint256 amount);\\n\\n    event FlashLoan(\\n        address indexed borrower,\\n        IERC20 indexed token,\\n        uint256 amount,\\n        uint256 feeAmount,\\n        address indexed receiver\\n    );\\n\\n    event TransferControl(address _newTeam, uint256 timestamp);\\n\\n    event UpdateFlashLoanRate(uint256 newRate);\\n\\n    event Approval(address indexed user, address indexed allowed, bool status);\\n\\n    event OwnershipAccepted(address newOwner, uint256 timestamp);\\n\\n    event RegisterProtocol(address sender);\\n\\n    event AllowContract(address whitelist, bool status);\\n\\n    event RescueFunds(IERC20 token, uint256 amount);\\n\\n    // ************** //\\n    // *** FUNCTIONS *** //\\n    // ************** //\\n\\n    function initialize(uint256 _flashLoanRate, address _owner) external;\\n\\n    function approveContract(\\n        address _user,\\n        address _contract,\\n        bool _status,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function deposit(\\n        IERC20 _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external returns (uint256);\\n\\n    function withdraw(\\n        IERC20 _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external returns (uint256);\\n\\n    function balanceOf(IERC20, address) external view returns (uint256);\\n\\n    function transfer(\\n        IERC20 _token,\\n        address _from,\\n        address _to,\\n        uint256 _shares\\n    ) external;\\n\\n    function toShare(\\n        IERC20 token,\\n        uint256 amount,\\n        bool ceil\\n    ) external view returns (uint256);\\n\\n    function toUnderlying(IERC20 token, uint256 share) external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0x3dd32eeae3b83d329e1498e2f82e608c882c100ea06e7545e0d5c531baea600d\",\"license\":\"MIT\"},\"contracts/interfaces/IBSWrapperToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IRewardDistributorManager.sol\\\";\\n\\ninterface IBSWrapperTokenBase is IERC20 {\\n    function initialize(\\n        address _owner,\\n        address _underlying,\\n        string memory _tokenName,\\n        string memory _tokenSymbol,\\n        IRewardDistributorManager _manager\\n    ) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n\\n    function owner() external view returns (address);\\n}\\n\\ninterface IBSWrapperToken is IBSWrapperTokenBase {\\n    function mint(address _to, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xb517729706c5471ef0fea6e8daf03586f6cc926c9eeb716ae7d13a8de2053e70\",\"license\":\"MIT\"},\"contracts/interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport {IBSWrapperTokenBase} from \\\"./IBSWrapperToken.sol\\\";\\n\\ninterface IDebtToken is IBSWrapperTokenBase {\\n    event DelegateBorrow(address from, address to, uint256 amount, uint256 timestamp);\\n\\n    function increaseTotalDebt(uint256 _amount) external;\\n\\n    function principal(address _account) external view returns (uint256);\\n\\n    function mint(\\n        address _to,\\n        address _owner,\\n        uint256 _amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcad520d843e96fae406142ca82ec1333a7600c3900424707c4a91283126e739a\",\"license\":\"MIT\"},\"contracts/interfaces/IERC3156FlashBorrower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\ninterface IERC3156FlashBorrower {\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0xc72afde3ab27c13b3437769c92b10e48dc143565ba2bcf9e78f6713d4695d924\",\"license\":\"MIT\"},\"contracts/interfaces/IERC3156FlashLender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.1;\\nimport \\\"./IERC3156FlashBorrower.sol\\\";\\n\\ninterface IERC3156FlashLender {\\n    /**\\n     * @dev The amount of currency available to be lent.\\n     * @param token The loan currency.\\n     * @return The amount of `token` that can be borrowed.\\n     */\\n    function maxFlashLoan(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev The fee to be charged for a given loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n     */\\n    function flashFee(address token, uint256 amount) external view returns (uint256);\\n\\n    /**\\n     * @dev Initiate a flash loan.\\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     */\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x381589754fc2917129ff2192df23588009fecb73f6df12bc9218dd731d25758d\",\"license\":\"MIT\"},\"contracts/interfaces/IInterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\ninterface IInterestRateModel {\\n    /**\\n     * @notice Calculates the current borrow interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amount of reserves the market has\\n     * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getBorrowRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Calculates the current supply interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amount of reserves the market has\\n     * @param reserveFactorMantissa The current reserve factor the market has\\n     * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getSupplyRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves,\\n        uint256 reserveFactorMantissa\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe6b72371b9b062ac92f3f18f7d6481e951714c95c2dd50a3ee13a266b72c2882\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\ninterface IOracle {\\n    /// @notice Price update event\\n    /// @param asset the asset\\n    /// @param newPrice price of the asset\\n    event PriceUpdated(address asset, uint256 newPrice);\\n\\n    /// @dev returns latest answer\\n    function latestAnswer() external view returns (int256);\\n}\\n\",\"keccak256\":\"0x28eea16f99e07c31d30e3bee3df4491c2e04ca9edbd235fd93903e8c5a21f01b\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceOracleAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\n\\ninterface IPriceOracleAggregator {\\n    event UpdateOracle(IERC20 token, IOracle oracle);\\n\\n    function getPriceInUSD(IERC20 _token) external view returns (uint256);\\n\\n    function getPriceInUSDMultiple(IERC20[] calldata _tokens)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function setOracleForAsset(IERC20[] calldata _asset, IOracle[] calldata _oracle) external;\\n\\n    event OwnershipAccepted(address newOwner, uint256 timestamp);\\n    event TransferControl(address _newTeam, uint256 timestamp);\\n    event StableTokenAdded(IERC20 _token, uint256 timestamp);\\n}\\n\",\"keccak256\":\"0xee8b12a38e513badf81f26e3ff225cf28c1d6f1b731f61b67fcb3a12f49b8bb9\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRewardDistributor {\\n    event Initialized(\\n        IERC20 indexed _rewardToken,\\n        uint256 _amountDistributePerSecond,\\n        uint256 _startTimestamp,\\n        uint256 _endTimestamp,\\n        address _guardian,\\n        uint256 timestamp\\n    );\\n\\n    function accumulateReward(address _tokenAddr, address _user) external;\\n\\n    function endTimestamp() external returns (uint256);\\n\\n    function initialize(\\n        string calldata _name,\\n        IERC20 _rewardToken,\\n        uint256 _amountDistributePerSecond,\\n        uint256 _startTimestamp,\\n        uint256 _endTimestamp,\\n        address _guardian\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2d752f87ed5d75fe0498b53e76ad181ece87eb6287432f15a440b92a4efd18cd\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardDistributorManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport \\\"./IRewardDistributor.sol\\\";\\n\\ninterface IRewardDistributorManager {\\n    /// @dev Emitted on Initialization\\n    event Initialized(address owner, uint256 timestamp);\\n\\n    event ApprovedDistributor(IRewardDistributor distributor, uint256 timestamp);\\n    event AddReward(address tokenAddr, IRewardDistributor distributor, uint256 timestamp);\\n    event RemoveReward(address tokenAddr, IRewardDistributor distributor, uint256 timestamp);\\n    event TransferControl(address _newTeam, uint256 timestamp);\\n    event OwnershipAccepted(address newOwner, uint256 timestamp);\\n\\n    function activateReward(address _tokenAddr) external;\\n\\n    function removeReward(address _tokenAddr, IRewardDistributor _distributor) external;\\n\\n    function accumulateRewards(address _from, address _to) external;\\n}\\n\",\"keccak256\":\"0xab04e19e0e0f936e38c3cd18bd1f8db04507c2288db488b7051643faf6feb361\",\"license\":\"MIT\"},\"contracts/upgradability/UUPSProxiable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\nimport {UUPSUtils} from \\\"./UUPSUtils.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev UUPS (Universal Upgradeable Proxy Standard) Proxiable contract.\\n */\\nabstract contract UUPSProxiable is Initializable {\\n    /**\\n     * @dev Get current implementation code address.\\n     */\\n    function getCodeAddress() public view returns (address codeAddress) {\\n        return UUPSUtils.implementation();\\n    }\\n\\n    function updateCode(address newAddress) external virtual;\\n\\n    /**\\n     * @dev Proxiable UUID marker function.\\n     *      This would help to avoid wrong logic contract to be used for upgrading.\\n     */\\n    function proxiableUUID() public view virtual returns (bytes32);\\n\\n    /**\\n     * @dev Update code address function.\\n     *      It is internal, so the derived contract could setup its own permission logic.\\n     */\\n    function _updateCodeAddress(address newAddress) internal {\\n        require(UUPSUtils.implementation() != address(0), \\\"UUPSProxiable: not upgradable\\\");\\n        require(\\n            proxiableUUID() == UUPSProxiable(newAddress).proxiableUUID(),\\n            \\\"UUPSProxiable: not compatible logic\\\"\\n        );\\n        UUPSUtils.setImplementation(newAddress);\\n        emit CodeUpdated(proxiableUUID(), newAddress);\\n    }\\n\\n    event CodeUpdated(bytes32 uuid, address codeAddress);\\n}\\n\",\"keccak256\":\"0xd569c1730923697f98cd3d4d74d21749d14ff6bea8b763fcb98343a17a43f535\",\"license\":\"MIT\"},\"contracts/upgradability/UUPSUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\n/**\\n * @title UUPS (Universal Upgradeable Proxy Standard) Shared Library\\n */\\nlibrary UUPSUtils {\\n    /**\\n     * @dev Implementation slot constant.\\n     * Using https://eips.ethereum.org/EIPS/eip-1967 standard\\n     * Storage slot 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\\n     * (obtained as bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1)).\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /// @dev Get implementation address.\\n    function implementation() internal view returns (address impl) {\\n        assembly {\\n            // solium-disable-line\\n            impl := sload(_IMPLEMENTATION_SLOT)\\n        }\\n    }\\n\\n    /// @dev Set new implementation address.\\n    function setImplementation(address codeAddress) internal {\\n        assembly {\\n            // solium-disable-line\\n            sstore(_IMPLEMENTATION_SLOT, codeAddress)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x125441f574989269c1e471e61085d33d064903e006f8b29e81eba2b79e2be1da\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b5060405162001e8338038062001e83833981016040819052620000359162000110565b6001600160a01b038416620000675760405162461bcd60e51b81526004016200005e90620001bb565b60405180910390fd5b6001600160a01b038316620000905760405162461bcd60e51b81526004016200005e90620001e2565b6001600160a01b038216620000b95760405162461bcd60e51b81526004016200005e9062000177565b6001600160a01b038116620000e25760405162461bcd60e51b81526004016200005e906200020c565b6001600160601b0319606092831b811660c05290821b811660e05292811b831660a0521b1660805262000268565b6000806000806080858703121562000126578384fd5b845162000133816200024f565b602086015190945062000146816200024f565b604086015190935062000159816200024f565b60608601519092506200016c816200024f565b939692955090935050565b60208082526024908201527f4665655769746864726177616c3a20696e76616c696420746f6b656e206164646040820152637265737360e01b606082015260800190565b6020808252600d908201526c1253959053125117d590555315609a1b604082015260600190565b60208082526010908201526f24a72b20a624a22fa922a1a2a4ab22a960811b604082015260600190565b60208082526023908201527f4665655769746864726177616c3a20696e76616c69642077657468206164647260408201526265737360e81b606082015260800190565b6001600160a01b03811681146200026557600080fd5b50565b60805160601c60a05160601c60c05160601c60e05160601c611b88620002fb6000396000818161084301528181610f6d01528181610fc701526110f3015260008181610206015281816102a50152818161054f01528181610a300152818161102901526111550152600081816107500152610c580152600081816102d2015281816103720152610c1f0152611b886000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063ad5c464811610097578063f7260d3e11610066578063f7260d3e146101cc578063f851a440146101d4578063fbfa77cf146101dc578063ffa1ad74146101e457610100565b8063ad5c46481461018b578063e2f273bd14610193578063e53a7e53146101a6578063e53b2017146101b957610100565b806352d1902d116100d357806352d1902d14610153578063735de9f714610168578063841b0ae414610170578063a697b8c71461017857610100565b8063462567e714610105578063469519541461010f578063485cc9551461012257806350d75d2514610135575b600080fd5b61010d6101ec565b005b61010d61011d36600461145b565b6103ad565b61010d610130366004611477565b6103f2565b61013d61050b565b60405161014a9190611687565b60405180910390f35b61015b61051a565b60405161014a91906116ef565b61013d61053e565b61013d61054d565b61010d6101863660046114af565b610571565b61013d610841565b61010d6101a136600461145b565b610865565b61010d6101b43660046114ef565b61091c565b61010d6101c736600461145b565b610b0c565b61013d610c1d565b61013d610c41565b61013d610c56565b61015b610c7a565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061023b903090600401611687565b60206040518083038186803b15801561025357600080fd5b505afa158015610267573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028b9190611637565b60405163a9059cbb60e01b81529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906102fc907f00000000000000000000000000000000000000000000000000000000000000009085906004016116b5565b602060405180830381600087803b15801561031657600080fd5b505af115801561032a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034e9190611617565b507f338457a4684788e79ccbc66c13488a5a07301d376e8a808029530c6ab2bab9ad7f000000000000000000000000000000000000000000000000000000000000000082426040516103a2939291906116ce565b60405180910390a150565b6000546201000090046001600160a01b031633146103e65760405162461bcd60e51b81526004016103dd906118bd565b60405180910390fd5b6103ef81610c7f565b50565b600054610100900460ff168061040b575060005460ff16155b6104275760405162461bcd60e51b81526004016103dd906118e1565b600054610100900460ff16158015610452576000805460ff1961ff0019909116610100171660011790555b6001600160a01b0383166104785760405162461bcd60e51b81526004016103dd90611851565b600080546001600160a01b03808616620100000275ffffffffffffffffffffffffffffffffffffffff0000199092169190911790915582166104cc5760405162461bcd60e51b81526004016103dd90611878565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384161790558015610506576000805461ff00191690555b505050565b6000610515610d87565b905090565b7f07cd270f61933e350865397345bb1b522ae60abef5b82005e0416810bab9dfd890565b6001546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b3332146105905760405162461bcd60e51b81526004016103dd906117e6565b806105ad5760405162461bcd60e51b81526004016103dd906117af565b6000805b828110156108025760008484838181106105db57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906105f0919061145b565b90506000816001600160a01b03166338d52e0f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561062d57600080fd5b505afa158015610641573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610665919061164f565b90506000826001600160a01b0316638f840ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156106a257600080fd5b505afa1580156106b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106da9190611637565b604051635e318e0760e01b81529091506001600160a01b03841690635e318e07906107099084906004016116ef565b600060405180830381600087803b15801561072357600080fd5b505af1158015610737573d6000803e3d6000fd5b5050604051630b620b8160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169250630b620b81915061078d90859030908190879060040161170f565b602060405180830381600087803b1580156107a757600080fd5b505af11580156107bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107df9190611637565b506107ea8186611a9b565b945050505080806107fa90611af6565b9150506105b1565b507f0598d944b0857fdf4e919ca5fdee9a77206558c40cfda7b844e1c5c27529ad298142604051610834929190611a1d565b60405180910390a1505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546201000090046001600160a01b031633146108955760405162461bcd60e51b81526004016103dd906118bd565b6001600160a01b0381166108bb5760405162461bcd60e51b81526004016103dd90611851565b6000805475ffffffffffffffffffffffffffffffffffffffff00001916620100006001600160a01b038416021790556040517ff271178f5b511b8855b7c1f1222689141a08b906a85b2f25146e7041d6a739f8906103a290839042906116b5565b6000546201000090046001600160a01b0316331461094c5760405162461bcd60e51b81526004016103dd906118bd565b826109695760405162461bcd60e51b81526004016103dd9061193e565b6000805b84811015610acb57600086868381811061099757634e487b7160e01b600052603260045260246000fd5b90506020020160208101906109ac919061145b565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016109dc9190611687565b60206040518083038186803b1580156109f457600080fd5b505afa158015610a08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2c9190611637565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614610aa957610a988282888887818110610a8c57634e487b7160e01b600052603260045260246000fd5b90506020020135610dac565b610aa29085611a9b565b9350610ab6565b610ab38185611a9b565b93505b50508080610ac390611af6565b91505061096d565b507fa435eed83673f8574e95658b0dbb13941f91b0268806b246755e207a200d3ccc8142604051610afd929190611a1d565b60405180910390a15050505050565b6000546201000090046001600160a01b03163314610b3c5760405162461bcd60e51b81526004016103dd906118bd565b6040516370a0823160e01b81526000906001600160a01b038316906370a0823190610b6b903090600401611687565b60206040518083038186803b158015610b8357600080fd5b505afa158015610b97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbb9190611637565b600054909150610bde906001600160a01b03848116916201000090041683610ec2565b7fc2621a57d424224d81e154ec2a00d959ba416d8464b094d5e38ca1b93b5c801d828242604051610c11939291906116ce565b60405180910390a15050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546201000090046001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600181565b6000610c89610d87565b6001600160a01b03161415610cb05760405162461bcd60e51b81526004016103dd90611965565b806001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ce957600080fd5b505afa158015610cfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d219190611637565b610d2961051a565b14610d465760405162461bcd60e51b81526004016103dd9061176c565b610d4f81610f45565b7fe011bc04c286c344a8fcbb8de77f953da762c3e25d8cdea984147fc4168a5dcc610d7861051a565b826040516103a29291906116f8565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b600080610db885610f69565b600154909150610dd5906001600160a01b038781169116866111bb565b6001546040516338ed173960e01b81526000916001600160a01b0316906338ed173990610e299088908890879030907a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000090600401611a2b565b600060405180830381600087803b158015610e4357600080fd5b505af1158015610e57573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e7f9190810190611558565b90508060018251610e909190611ab3565b81518110610eae57634e487b7160e01b600052603260045260246000fd5b6020026020010151925050505b9392505050565b6105068363a9059cbb60e01b8484604051602401610ee19291906116b5565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261126d565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b60607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316141561108e5760408051600280825260608201835290916020830190803683370190505090507f00000000000000000000000000000000000000000000000000000000000000008160008151811061100757634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000008160018151811061106957634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250506111b6565b60408051600380825260808201909252906020820160608036833701905050905081816000815181106110d157634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000008160018151811061113357634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000008160028151811061119557634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250505b919050565b600081846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b81526004016111ec92919061169b565b60206040518083038186803b15801561120457600080fd5b505afa158015611218573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123c9190611637565b6112469190611a9b565b90506112678463095ea7b360e01b8584604051602401610ee19291906116b5565b50505050565b60006112c2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166112fc9092919063ffffffff16565b80519091501561050657808060200190518101906112e09190611617565b6105065760405162461bcd60e51b81526004016103dd906119d3565b606061130b8484600085611313565b949350505050565b6060824710156113355760405162461bcd60e51b81526004016103dd9061180b565b61133e856113d3565b61135a5760405162461bcd60e51b81526004016103dd9061199c565b600080866001600160a01b03168587604051611376919061166b565b60006040518083038185875af1925050503d80600081146113b3576040519150601f19603f3d011682016040523d82523d6000602084013e6113b8565b606091505b50915091506113c88282866113d9565b979650505050505050565b3b151590565b606083156113e8575081610ebb565b8251156113f85782518084602001fd5b8160405162461bcd60e51b81526004016103dd9190611739565b60008083601f840112611423578081fd5b50813567ffffffffffffffff81111561143a578182fd5b602083019150836020808302850101111561145457600080fd5b9250929050565b60006020828403121561146c578081fd5b8135610ebb81611b3d565b60008060408385031215611489578081fd5b823561149481611b3d565b915060208301356114a481611b3d565b809150509250929050565b600080602083850312156114c1578182fd5b823567ffffffffffffffff8111156114d7578283fd5b6114e385828601611412565b90969095509350505050565b60008060008060408587031215611504578182fd5b843567ffffffffffffffff8082111561151b578384fd5b61152788838901611412565b9096509450602087013591508082111561153f578384fd5b5061154c87828801611412565b95989497509550505050565b6000602080838503121561156a578182fd5b825167ffffffffffffffff80821115611581578384fd5b818501915085601f830112611594578384fd5b8151818111156115a6576115a6611b27565b838102604051601f19603f830116810181811085821117156115ca576115ca611b27565b604052828152858101935084860182860187018a10156115e8578788fd5b8795505b8386101561160a5780518552600195909501949386019386016115ec565b5098975050505050505050565b600060208284031215611628578081fd5b81518015158114610ebb578182fd5b600060208284031215611648578081fd5b5051919050565b600060208284031215611660578081fd5b8151610ebb81611b3d565b6000825161167d818460208701611aca565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b90815260200190565b9182526001600160a01b0316602082015260400190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6000602082528251806020840152611758816040850160208701611aca565b601f01601f19169190910160400192915050565b60208082526023908201527f5555505350726f786961626c653a206e6f7420636f6d70617469626c65206c6f60408201526267696360e81b606082015260800190565b60208082526013908201527f6c656e64696e6750616972732e6c656e67746800000000000000000000000000604082015260600190565b6020808252600b908201526a4d5553545f42455f454f4160a81b604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b6020808252600d908201526c24a72b20a624a22fa0a226a4a760991b604082015260600190565b60208082526025908201527f4665655769746864726177616c3a20696e76616c696420726f75746572206164604082015264647265737360d81b606082015260800190565b6020808252600a908201526927a7262cafa0a226a4a760b11b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201527f647920696e697469616c697a6564000000000000000000000000000000000000606082015260800190565b6020808252600d908201526c0c2e6e6cae8e65cd8cadccee8d609b1b604082015260600190565b6020808252601d908201527f5555505350726f786961626c653a206e6f742075706772616461626c65000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b918252602082015260400190565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b81811015611a7a5784516001600160a01b031683529383019391830191600101611a55565b50506001600160a01b03969096166060850152505050608001529392505050565b60008219821115611aae57611aae611b11565b500190565b600082821015611ac557611ac5611b11565b500390565b60005b83811015611ae5578181015183820152602001611acd565b838111156112675750506000910152565b6000600019821415611b0a57611b0a611b11565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146103ef57600080fdfea264697066735822122027881113bf57d041076e6198a9de5ae83daab03178e46ff92bee171acdaa33cc64736f6c63430008010033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063ad5c464811610097578063f7260d3e11610066578063f7260d3e146101cc578063f851a440146101d4578063fbfa77cf146101dc578063ffa1ad74146101e457610100565b8063ad5c46481461018b578063e2f273bd14610193578063e53a7e53146101a6578063e53b2017146101b957610100565b806352d1902d116100d357806352d1902d14610153578063735de9f714610168578063841b0ae414610170578063a697b8c71461017857610100565b8063462567e714610105578063469519541461010f578063485cc9551461012257806350d75d2514610135575b600080fd5b61010d6101ec565b005b61010d61011d36600461145b565b6103ad565b61010d610130366004611477565b6103f2565b61013d61050b565b60405161014a9190611687565b60405180910390f35b61015b61051a565b60405161014a91906116ef565b61013d61053e565b61013d61054d565b61010d6101863660046114af565b610571565b61013d610841565b61010d6101a136600461145b565b610865565b61010d6101b43660046114ef565b61091c565b61010d6101c736600461145b565b610b0c565b61013d610c1d565b61013d610c41565b61013d610c56565b61015b610c7a565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061023b903090600401611687565b60206040518083038186803b15801561025357600080fd5b505afa158015610267573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028b9190611637565b60405163a9059cbb60e01b81529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906102fc907f00000000000000000000000000000000000000000000000000000000000000009085906004016116b5565b602060405180830381600087803b15801561031657600080fd5b505af115801561032a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034e9190611617565b507f338457a4684788e79ccbc66c13488a5a07301d376e8a808029530c6ab2bab9ad7f000000000000000000000000000000000000000000000000000000000000000082426040516103a2939291906116ce565b60405180910390a150565b6000546201000090046001600160a01b031633146103e65760405162461bcd60e51b81526004016103dd906118bd565b60405180910390fd5b6103ef81610c7f565b50565b600054610100900460ff168061040b575060005460ff16155b6104275760405162461bcd60e51b81526004016103dd906118e1565b600054610100900460ff16158015610452576000805460ff1961ff0019909116610100171660011790555b6001600160a01b0383166104785760405162461bcd60e51b81526004016103dd90611851565b600080546001600160a01b03808616620100000275ffffffffffffffffffffffffffffffffffffffff0000199092169190911790915582166104cc5760405162461bcd60e51b81526004016103dd90611878565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384161790558015610506576000805461ff00191690555b505050565b6000610515610d87565b905090565b7f07cd270f61933e350865397345bb1b522ae60abef5b82005e0416810bab9dfd890565b6001546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b3332146105905760405162461bcd60e51b81526004016103dd906117e6565b806105ad5760405162461bcd60e51b81526004016103dd906117af565b6000805b828110156108025760008484838181106105db57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906105f0919061145b565b90506000816001600160a01b03166338d52e0f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561062d57600080fd5b505afa158015610641573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610665919061164f565b90506000826001600160a01b0316638f840ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156106a257600080fd5b505afa1580156106b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106da9190611637565b604051635e318e0760e01b81529091506001600160a01b03841690635e318e07906107099084906004016116ef565b600060405180830381600087803b15801561072357600080fd5b505af1158015610737573d6000803e3d6000fd5b5050604051630b620b8160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169250630b620b81915061078d90859030908190879060040161170f565b602060405180830381600087803b1580156107a757600080fd5b505af11580156107bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107df9190611637565b506107ea8186611a9b565b945050505080806107fa90611af6565b9150506105b1565b507f0598d944b0857fdf4e919ca5fdee9a77206558c40cfda7b844e1c5c27529ad298142604051610834929190611a1d565b60405180910390a1505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546201000090046001600160a01b031633146108955760405162461bcd60e51b81526004016103dd906118bd565b6001600160a01b0381166108bb5760405162461bcd60e51b81526004016103dd90611851565b6000805475ffffffffffffffffffffffffffffffffffffffff00001916620100006001600160a01b038416021790556040517ff271178f5b511b8855b7c1f1222689141a08b906a85b2f25146e7041d6a739f8906103a290839042906116b5565b6000546201000090046001600160a01b0316331461094c5760405162461bcd60e51b81526004016103dd906118bd565b826109695760405162461bcd60e51b81526004016103dd9061193e565b6000805b84811015610acb57600086868381811061099757634e487b7160e01b600052603260045260246000fd5b90506020020160208101906109ac919061145b565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016109dc9190611687565b60206040518083038186803b1580156109f457600080fd5b505afa158015610a08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2c9190611637565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614610aa957610a988282888887818110610a8c57634e487b7160e01b600052603260045260246000fd5b90506020020135610dac565b610aa29085611a9b565b9350610ab6565b610ab38185611a9b565b93505b50508080610ac390611af6565b91505061096d565b507fa435eed83673f8574e95658b0dbb13941f91b0268806b246755e207a200d3ccc8142604051610afd929190611a1d565b60405180910390a15050505050565b6000546201000090046001600160a01b03163314610b3c5760405162461bcd60e51b81526004016103dd906118bd565b6040516370a0823160e01b81526000906001600160a01b038316906370a0823190610b6b903090600401611687565b60206040518083038186803b158015610b8357600080fd5b505afa158015610b97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbb9190611637565b600054909150610bde906001600160a01b03848116916201000090041683610ec2565b7fc2621a57d424224d81e154ec2a00d959ba416d8464b094d5e38ca1b93b5c801d828242604051610c11939291906116ce565b60405180910390a15050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546201000090046001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600181565b6000610c89610d87565b6001600160a01b03161415610cb05760405162461bcd60e51b81526004016103dd90611965565b806001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ce957600080fd5b505afa158015610cfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d219190611637565b610d2961051a565b14610d465760405162461bcd60e51b81526004016103dd9061176c565b610d4f81610f45565b7fe011bc04c286c344a8fcbb8de77f953da762c3e25d8cdea984147fc4168a5dcc610d7861051a565b826040516103a29291906116f8565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b600080610db885610f69565b600154909150610dd5906001600160a01b038781169116866111bb565b6001546040516338ed173960e01b81526000916001600160a01b0316906338ed173990610e299088908890879030907a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000090600401611a2b565b600060405180830381600087803b158015610e4357600080fd5b505af1158015610e57573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e7f9190810190611558565b90508060018251610e909190611ab3565b81518110610eae57634e487b7160e01b600052603260045260246000fd5b6020026020010151925050505b9392505050565b6105068363a9059cbb60e01b8484604051602401610ee19291906116b5565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261126d565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b60607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316141561108e5760408051600280825260608201835290916020830190803683370190505090507f00000000000000000000000000000000000000000000000000000000000000008160008151811061100757634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000008160018151811061106957634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250506111b6565b60408051600380825260808201909252906020820160608036833701905050905081816000815181106110d157634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000008160018151811061113357634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000008160028151811061119557634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250505b919050565b600081846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b81526004016111ec92919061169b565b60206040518083038186803b15801561120457600080fd5b505afa158015611218573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123c9190611637565b6112469190611a9b565b90506112678463095ea7b360e01b8584604051602401610ee19291906116b5565b50505050565b60006112c2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166112fc9092919063ffffffff16565b80519091501561050657808060200190518101906112e09190611617565b6105065760405162461bcd60e51b81526004016103dd906119d3565b606061130b8484600085611313565b949350505050565b6060824710156113355760405162461bcd60e51b81526004016103dd9061180b565b61133e856113d3565b61135a5760405162461bcd60e51b81526004016103dd9061199c565b600080866001600160a01b03168587604051611376919061166b565b60006040518083038185875af1925050503d80600081146113b3576040519150601f19603f3d011682016040523d82523d6000602084013e6113b8565b606091505b50915091506113c88282866113d9565b979650505050505050565b3b151590565b606083156113e8575081610ebb565b8251156113f85782518084602001fd5b8160405162461bcd60e51b81526004016103dd9190611739565b60008083601f840112611423578081fd5b50813567ffffffffffffffff81111561143a578182fd5b602083019150836020808302850101111561145457600080fd5b9250929050565b60006020828403121561146c578081fd5b8135610ebb81611b3d565b60008060408385031215611489578081fd5b823561149481611b3d565b915060208301356114a481611b3d565b809150509250929050565b600080602083850312156114c1578182fd5b823567ffffffffffffffff8111156114d7578283fd5b6114e385828601611412565b90969095509350505050565b60008060008060408587031215611504578182fd5b843567ffffffffffffffff8082111561151b578384fd5b61152788838901611412565b9096509450602087013591508082111561153f578384fd5b5061154c87828801611412565b95989497509550505050565b6000602080838503121561156a578182fd5b825167ffffffffffffffff80821115611581578384fd5b818501915085601f830112611594578384fd5b8151818111156115a6576115a6611b27565b838102604051601f19603f830116810181811085821117156115ca576115ca611b27565b604052828152858101935084860182860187018a10156115e8578788fd5b8795505b8386101561160a5780518552600195909501949386019386016115ec565b5098975050505050505050565b600060208284031215611628578081fd5b81518015158114610ebb578182fd5b600060208284031215611648578081fd5b5051919050565b600060208284031215611660578081fd5b8151610ebb81611b3d565b6000825161167d818460208701611aca565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b90815260200190565b9182526001600160a01b0316602082015260400190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6000602082528251806020840152611758816040850160208701611aca565b601f01601f19169190910160400192915050565b60208082526023908201527f5555505350726f786961626c653a206e6f7420636f6d70617469626c65206c6f60408201526267696360e81b606082015260800190565b60208082526013908201527f6c656e64696e6750616972732e6c656e67746800000000000000000000000000604082015260600190565b6020808252600b908201526a4d5553545f42455f454f4160a81b604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b6020808252600d908201526c24a72b20a624a22fa0a226a4a760991b604082015260600190565b60208082526025908201527f4665655769746864726177616c3a20696e76616c696420726f75746572206164604082015264647265737360d81b606082015260800190565b6020808252600a908201526927a7262cafa0a226a4a760b11b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201527f647920696e697469616c697a6564000000000000000000000000000000000000606082015260800190565b6020808252600d908201526c0c2e6e6cae8e65cd8cadccee8d609b1b604082015260600190565b6020808252601d908201527f5555505350726f786961626c653a206e6f742075706772616461626c65000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b918252602082015260400190565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b81811015611a7a5784516001600160a01b031683529383019391830191600101611a55565b50506001600160a01b03969096166060850152505050608001529392505050565b60008219821115611aae57611aae611b11565b500190565b600082821015611ac557611ac5611b11565b500390565b60005b83811015611ae5578181015183820152602001611acd565b838111156112675750506000910152565b6000600019821415611b0a57611b0a611b11565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146103ef57600080fdfea264697066735822122027881113bf57d041076e6198a9de5ae83daab03178e46ff92bee171acdaa33cc64736f6c63430008010033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_receiver": "address of the contract to transfer Warp to",
          "_vault": "vault address",
          "_warpToken": "address of warp token",
          "_wethAddress": "WETH address"
        }
      },
      "getCodeAddress()": {
        "details": "Get current implementation code address."
      },
      "proxiableUUID()": {
        "details": "Proxiable UUID marker function.      This would help to avoid wrong logic contract to be used for upgrading."
      },
      "swapFees(address[],uint256[])": {
        "details": "swap Fees with warpToken",
        "params": {
          "_assets": "assets to be swaped",
          "amountOuts": "Minimum expected amountOut of the lending pair reserve swap"
        }
      },
      "withdrawFees(address[])": {
        "details": "to avoid gas costs we are gonna send the underlying pair's asset as param & compute the amount off-chain",
        "params": {
          "_lendingPairs": "lending pair addresses"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "WETH()": {
        "notice": "WETH address"
      },
      "admin()": {
        "notice": "The admin"
      },
      "constructor": {
        "notice": "Create a new FeeWithdrawal contract"
      },
      "receiver()": {
        "notice": "The address to transfer the swapped WARP to"
      },
      "uniswapRouter()": {
        "notice": "IUniswapRouter used to swap erc20 fee token into warpToken"
      },
      "vault()": {
        "notice": "vault address"
      },
      "warpToken()": {
        "notice": "the token's address that is swapped against any other fee token"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/helper/FeeWithdrawal.sol:FeeWithdrawal",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 141,
        "contract": "contracts/helper/FeeWithdrawal.sol:FeeWithdrawal",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7571,
        "contract": "contracts/helper/FeeWithdrawal.sol:FeeWithdrawal",
        "label": "admin",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7575,
        "contract": "contracts/helper/FeeWithdrawal.sol:FeeWithdrawal",
        "label": "uniswapRouter",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IUniswapV2Router02)2023"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IUniswapV2Router02)2023": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      }
    }
  }
}