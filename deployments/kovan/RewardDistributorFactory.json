{
  "address": "0x51dd6419A4c3020f09F765F581f7801322b08ACb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_distributorImplementation",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pairLogic",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "NewImpl",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "distributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "NewRewardDistributor",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "contract IERC20",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountDistributePerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_guardian",
          "type": "address"
        }
      ],
      "name": "createRewardDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributorImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardDistributors",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_impl",
          "type": "address"
        }
      ],
      "name": "setDistributorImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc2980878ff74ed1c6ee283e195f8195118749250d121a0ffeced1db13bf08e9d",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xf6DF5d5Ec46CcD10AE514384C292e3ca6E31dFa8",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "442902",
    "logsBloom": "0x
    "blockHash": "0x0f8baec4ef5bc6c609ad62f3459759372db17f95f766c64ce3aa78fca81df196",
    "transactionHash": "0xc2980878ff74ed1c6ee283e195f8195118749250d121a0ffeced1db13bf08e9d",
    "logs": [],
    "blockNumber": 28154635,
    "cumulativeGasUsed": "469157",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf6DF5d5Ec46CcD10AE514384C292e3ca6E31dFa8",
    "0x127864348a3621f82A58dc25E7B4FeA8b3413e64"
  ],
  "solcInputHash": "d8f710d108043478052b140f0bad2611",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_distributorImplementation\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pairLogic\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NewImpl\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NewRewardDistributor\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountDistributePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"}],\"name\":\"createRewardDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributorImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardDistributors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_impl\",\"type\":\"address\"}],\"name\":\"setDistributorImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"distributorImplementation\":{\"details\":\"implementation\"},\"owner\":{\"details\":\"owner\"},\"rewardDistributors\":{\"details\":\"list of all distributors\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/rewards/RewardDistributorFactory.sol\":\"RewardDistributorFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt, address deployer) internal pure returns (address predicted) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x90dec20805396efc780a82c62578626103e03278bc1f48b61bb3aba52a61617c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRewardDistributor {\\n    event Initialized(\\n        IERC20 indexed _rewardToken,\\n        uint256 _amountDistributePerSecond,\\n        uint256 _startTimestamp,\\n        uint256 _endTimestamp,\\n        address _guardian,\\n        uint256 timestamp\\n    );\\n\\n    function accumulateReward(address _tokenAddr, address _user) external;\\n\\n    function endTimestamp() external returns (uint256);\\n\\n    function initialize(\\n        string calldata _name,\\n        IERC20 _rewardToken,\\n        uint256 _amountDistributePerSecond,\\n        uint256 _startTimestamp,\\n        uint256 _endTimestamp,\\n        address _guardian\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2d752f87ed5d75fe0498b53e76ad181ece87eb6287432f15a440b92a4efd18cd\",\"license\":\"MIT\"},\"contracts/rewards/RewardDistributorFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/IRewardDistributor.sol\\\";\\n\\ncontract RewardDistributorFactory {\\n    using Clones for address;\\n\\n    event NewImpl(address pairLogic, uint256 timestamp);\\n    event NewRewardDistributor(address distributor, uint256 timestamp);\\n\\n    /// @dev owner\\n    address public owner;\\n\\n    /// @dev implementation\\n    address public distributorImplementation;\\n\\n    /// @dev list of all distributors\\n    address[] public rewardDistributors;\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"ONLY_OWNER\\\");\\n        _;\\n    }\\n\\n    constructor(address _owner, address _distributorImplementation) {\\n        owner = _owner;\\n        distributorImplementation = _distributorImplementation;\\n    }\\n\\n    function setDistributorImplementation(address _impl) external onlyOwner {\\n        require(_impl != address(0), \\\"INVALID_IMPL\\\");\\n        distributorImplementation = _impl;\\n        emit NewImpl(_impl, block.timestamp);\\n    }\\n\\n    function createRewardDistributor(\\n        string calldata _name,\\n        IERC20 _rewardToken,\\n        uint256 _amountDistributePerSecond,\\n        uint256 _startTimestamp,\\n        uint256 _endTimestamp,\\n        address _guardian\\n    ) external {\\n        bytes32 salt =\\n            keccak256(\\n                abi.encode(\\n                    _rewardToken,\\n                    _amountDistributePerSecond,\\n                    _startTimestamp,\\n                    _guardian,\\n                    rewardDistributors.length\\n                )\\n            );\\n\\n        IRewardDistributor newDistributor =\\n            IRewardDistributor(distributorImplementation.cloneDeterministic(salt));\\n\\n        // initialize\\n        newDistributor.initialize(\\n            _name,\\n            _rewardToken,\\n            _amountDistributePerSecond,\\n            _startTimestamp,\\n            _endTimestamp,\\n            _guardian\\n        );\\n\\n        rewardDistributors.push(address(newDistributor));\\n\\n        emit NewRewardDistributor(address(newDistributor), block.timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0xb83552bd60a90d33fa27dab597270452dcc8ef74f99b89d405e87e3d13b93912\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516106ea3803806106ea83398101604081905261002f9161007c565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100ae565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008e578182fd5b61009783610060565b91506100a560208401610060565b90509250929050565b61062d806100bd6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631ba91a5f1461005c5780636c036fcf146100855780638da5cb5b1461009a578063b09e1b1f146100a2578063faff96ec146100aa575b600080fd5b61006f61006a366004610488565b6100bd565b60405161007c91906104a0565b60405180910390f35b6100986100933660046103bb565b6100e7565b005b61006f6101a5565b61006f6101b4565b6100986100b83660046103de565b6101c3565b600281815481106100cd57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b0316331461011a5760405162461bcd60e51b8152600401610111906105bb565b60405180910390fd5b6001600160a01b0381166101405760405162461bcd60e51b815260040161011190610595565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383161790556040517f7ce494c3e23bbf1fb8b6dcab6c8a6413da902a1963c1c78b6cf0247f1abdc1e59061019a90839042906104b4565b60405180910390a150565b6000546001600160a01b031681565b6001546001600160a01b031681565b6002546040516000916101e09188918891889187916020016104cd565b60408051601f198184030181529190528051602090910120600154909150600090610214906001600160a01b03168361031e565b60405163441482d360e01b81529091506001600160a01b0382169063441482d39061024f908c908c908c908c908c908c908c90600401610500565b600060405180830381600087803b15801561026957600080fd5b505af115801561027d573d6000803e3d6000fd5b5050600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03851617905550506040517ff5bc229d56784ca280a5e0b97fc73231c5dbfc725443783482c00d257bc07b099061030b90839042906104b4565b60405180910390a1505050505050505050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528360601b60148201527f5af43d82803e903d91602b57fd5bf300000000000000000000000000000000006028820152826037826000f59150506001600160a01b0381166103a55760405162461bcd60e51b81526004016101119061055e565b92915050565b80356103b6816105df565b919050565b6000602082840312156103cc578081fd5b81356103d7816105df565b9392505050565b600080600080600080600060c0888a0312156103f8578283fd5b873567ffffffffffffffff8082111561040f578485fd5b818a0191508a601f830112610422578485fd5b813581811115610430578586fd5b8b6020828501011115610441578586fd5b602092830199509750610457918a0190506103ab565b945060408801359350606088013592506080880135915061047a60a089016103ab565b905092959891949750929550565b600060208284031215610499578081fd5b5035919050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039586168152602081019490945260408401929092529092166060820152608081019190915260a00190565b600060c082528760c0830152878960e084013760e08883018101919091526001600160a01b03968716602083015260408201959095526060810193909352608083019190915290921660a0830152601f909201601f19160101919050565b60208082526017908201527f455243313136373a2063726561746532206661696c6564000000000000000000604082015260600190565b6020808252600c908201526b1253959053125117d253541360a21b604082015260600190565b6020808252600a908201526927a7262cafa7aba722a960b11b604082015260600190565b6001600160a01b03811681146105f457600080fd5b5056fea2646970667358221220b531b725f3b4e5fe144ce8ab95747b611d8a573e704cae35b8463a2d4493d51964736f6c63430008010033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80631ba91a5f1461005c5780636c036fcf146100855780638da5cb5b1461009a578063b09e1b1f146100a2578063faff96ec146100aa575b600080fd5b61006f61006a366004610488565b6100bd565b60405161007c91906104a0565b60405180910390f35b6100986100933660046103bb565b6100e7565b005b61006f6101a5565b61006f6101b4565b6100986100b83660046103de565b6101c3565b600281815481106100cd57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b0316331461011a5760405162461bcd60e51b8152600401610111906105bb565b60405180910390fd5b6001600160a01b0381166101405760405162461bcd60e51b815260040161011190610595565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383161790556040517f7ce494c3e23bbf1fb8b6dcab6c8a6413da902a1963c1c78b6cf0247f1abdc1e59061019a90839042906104b4565b60405180910390a150565b6000546001600160a01b031681565b6001546001600160a01b031681565b6002546040516000916101e09188918891889187916020016104cd565b60408051601f198184030181529190528051602090910120600154909150600090610214906001600160a01b03168361031e565b60405163441482d360e01b81529091506001600160a01b0382169063441482d39061024f908c908c908c908c908c908c908c90600401610500565b600060405180830381600087803b15801561026957600080fd5b505af115801561027d573d6000803e3d6000fd5b5050600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03851617905550506040517ff5bc229d56784ca280a5e0b97fc73231c5dbfc725443783482c00d257bc07b099061030b90839042906104b4565b60405180910390a1505050505050505050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528360601b60148201527f5af43d82803e903d91602b57fd5bf300000000000000000000000000000000006028820152826037826000f59150506001600160a01b0381166103a55760405162461bcd60e51b81526004016101119061055e565b92915050565b80356103b6816105df565b919050565b6000602082840312156103cc578081fd5b81356103d7816105df565b9392505050565b600080600080600080600060c0888a0312156103f8578283fd5b873567ffffffffffffffff8082111561040f578485fd5b818a0191508a601f830112610422578485fd5b813581811115610430578586fd5b8b6020828501011115610441578586fd5b602092830199509750610457918a0190506103ab565b945060408801359350606088013592506080880135915061047a60a089016103ab565b905092959891949750929550565b600060208284031215610499578081fd5b5035919050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039586168152602081019490945260408401929092529092166060820152608081019190915260a00190565b600060c082528760c0830152878960e084013760e08883018101919091526001600160a01b03968716602083015260408201959095526060810193909352608083019190915290921660a0830152601f909201601f19160101919050565b60208082526017908201527f455243313136373a2063726561746532206661696c6564000000000000000000604082015260600190565b6020808252600c908201526b1253959053125117d253541360a21b604082015260600190565b6020808252600a908201526927a7262cafa7aba722a960b11b604082015260600190565b6001600160a01b03811681146105f457600080fd5b5056fea2646970667358221220b531b725f3b4e5fe144ce8ab95747b611d8a573e704cae35b8463a2d4493d51964736f6c63430008010033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "stateVariables": {
      "distributorImplementation": {
        "details": "implementation"
      },
      "owner": {
        "details": "owner"
      },
      "rewardDistributors": {
        "details": "list of all distributors"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11432,
        "contract": "contracts/rewards/RewardDistributorFactory.sol:RewardDistributorFactory",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11435,
        "contract": "contracts/rewards/RewardDistributorFactory.sol:RewardDistributorFactory",
        "label": "distributorImplementation",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 11439,
        "contract": "contracts/rewards/RewardDistributorFactory.sol:RewardDistributorFactory",
        "label": "rewardDistributors",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      }
    }
  }
}