{
  "address": "0x50F8d9545D7b8396Fd70dA8D3AD8198d6aE4Ee42",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pairLogic",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralWrapperLogic",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_debtTokenLogic",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrowAssetWrapperLogic",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardDistributionManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pairLogic",
          "type": "address"
        }
      ],
      "name": "LogicContractUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "ir",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "NewInterestRateModel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "created",
          "type": "uint256"
        }
      ],
      "name": "NewLendingPair",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowAssetWrapperImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralWrapperImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "baseRatePerYear",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "multiplierPerYear",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "jumpMultiplierPerYear",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "optimal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowRateMaxMantissa",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "blocksPerYear",
              "type": "uint256"
            }
          ],
          "internalType": "struct LendingPairFactory.NewLendingVaultIRLocalVars",
          "name": "_interestRateVars",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_team",
          "type": "address"
        }
      ],
      "name": "createIR",
      "outputs": [
        {
          "internalType": "address",
          "name": "ir",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "contract IERC20",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "collateralAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "guardian",
              "type": "address"
            }
          ],
          "internalType": "struct DataTypes.LendingPairVars",
          "name": "_pairVars",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "depositCollateralLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "depositBorrowLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalPairDebtLimit",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.RiskConfiguration",
          "name": "_riskConfig",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "borrowAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "initialExchangeRateMantissa",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserveFactorMantissa",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationFee",
              "type": "uint256"
            },
            {
              "internalType": "contract IInterestRateModel",
              "name": "interestRateModel",
              "type": "address"
            }
          ],
          "internalType": "struct LendingPairFactory.BorrowLocalVars",
          "name": "_borrowVars",
          "type": "tuple"
        }
      ],
      "name": "createLendingPairWithProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "newLendingPair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtTokenImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ir",
          "type": "address"
        }
      ],
      "name": "disableIR",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lendingPairImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardDistributionManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newLogicContract",
          "type": "address"
        }
      ],
      "name": "updateBorrowAssetWrapperImpl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newLogicContract",
          "type": "address"
        }
      ],
      "name": "updateCollateralWrapperImpl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newLogicContract",
          "type": "address"
        }
      ],
      "name": "updateDebtTokenImpl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newLogicContract",
          "type": "address"
        }
      ],
      "name": "updatePairImpl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newManager",
          "type": "address"
        }
      ],
      "name": "updateRewardManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "validInterestRateModels",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5c1d8335c6ee56171029e2b703c706f2084ea5e25cdcc968407dab3f43a42ea4",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xF5B35b607377850696cAF2ac4841D61E7d825a3b",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "2164603",
    "logsBloom": "0x
    "blockHash": "0xcec17c754acca08c10a812a5a91d495143c942af3a0970f933eb85932bf71f5f",
    "transactionHash": "0x5c1d8335c6ee56171029e2b703c706f2084ea5e25cdcc968407dab3f43a42ea4",
    "logs": [],
    "blockNumber": 32171331,
    "cumulativeGasUsed": "2164603",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF5B35b607377850696cAF2ac4841D61E7d825a3b",
    "0x8EBA2d656360267E466EE5f989Ec9d42bd4d2570",
    "0xfa0cd591e40520261745E633391715EdcBa1578A",
    "0x5874fE84A1A76F3bd5BcE81336E6120201c0481d",
    "0xCb34b5DF42C1aa4a3AA942006fa1833b3ef0531d",
    "0x1974b6f0bd084651e9a3437B7Aa7109C330fbD78"
  ],
  "solcInputHash": "195f5b343e6204c511d7120296e1ddd4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pairLogic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralWrapperLogic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_debtTokenLogic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrowAssetWrapperLogic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardDistributionManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pairLogic\",\"type\":\"address\"}],\"name\":\"LogicContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ir\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NewInterestRateModel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"}],\"name\":\"NewLendingPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowAssetWrapperImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralWrapperImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"baseRatePerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplierPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jumpMultiplierPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRateMaxMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blocksPerYear\",\"type\":\"uint256\"}],\"internalType\":\"struct LendingPairFactory.NewLendingVaultIRLocalVars\",\"name\":\"_interestRateVars\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_team\",\"type\":\"address\"}],\"name\":\"createIR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"ir\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"internalType\":\"struct DataTypes.LendingPairVars\",\"name\":\"_pairVars\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"depositCollateralLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositBorrowLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPairDebtLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.RiskConfiguration\",\"name\":\"_riskConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"borrowAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialExchangeRateMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationFee\",\"type\":\"uint256\"},{\"internalType\":\"contract IInterestRateModel\",\"name\":\"interestRateModel\",\"type\":\"address\"}],\"internalType\":\"struct LendingPairFactory.BorrowLocalVars\",\"name\":\"_borrowVars\",\"type\":\"tuple\"}],\"name\":\"createLendingPairWithProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newLendingPair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtTokenImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ir\",\"type\":\"address\"}],\"name\":\"disableIR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingPairImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDistributionManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newLogicContract\",\"type\":\"address\"}],\"name\":\"updateBorrowAssetWrapperImpl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newLogicContract\",\"type\":\"address\"}],\"name\":\"updateCollateralWrapperImpl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newLogicContract\",\"type\":\"address\"}],\"name\":\"updateDebtTokenImpl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newLogicContract\",\"type\":\"address\"}],\"name\":\"updatePairImpl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"updateRewardManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"validInterestRateModels\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createIR((uint256,uint256,uint256,uint256,uint256,uint256),address)\":{\"details\":\"create interest rate model\"},\"createLendingPairWithProxy((string,string,address,address,address),(uint256,uint256,uint256),(address,uint256,uint256,uint256,uint256,address))\":{\"details\":\"create lending pair with clones\"},\"disableIR(address)\":{\"details\":\"disable interest rate model\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"pause()\":{\"notice\":\"pause\"},\"unpause()\":{\"notice\":\"unpause\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LendingPairFactory.sol\":\"LendingPairFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt, address deployer) internal pure returns (address predicted) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x90dec20805396efc780a82c62578626103e03278bc1f48b61bb3aba52a61617c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xab1f67e4c96dfe0e3875d22883c3dee5411914f40ce0c54ef407f030d803512e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport \\\"./interfaces/IInterestRateModel.sol\\\";\\nimport \\\"./interfaces/IBSWrapperToken.sol\\\";\\nimport \\\"./interfaces/IDebtToken.sol\\\";\\n\\n////////////////////////////////////////////////////////////////////////////////////////////\\n/// @title DataTypes\\n/// @author @samparsky\\n////////////////////////////////////////////////////////////////////////////////////////////\\n\\nlibrary DataTypes {\\n    struct LendingPairVars {\\n        string name;\\n        string symbol;\\n        IERC20 asset;\\n        IERC20 collateralAsset;\\n        address guardian;\\n    }\\n\\n    struct RiskConfiguration {\\n        uint256 depositCollateralLimit;\\n        uint256 depositBorrowLimit;\\n        uint256 totalPairDebtLimit;\\n    }\\n\\n    struct BorrowAssetConfig {\\n        uint256 initialExchangeRateMantissa;\\n        uint256 reserveFactorMantissa;\\n        uint256 collateralFactor;\\n        IBSWrapperToken wrappedBorrowAsset;\\n        uint256 liquidationFee;\\n        IDebtToken debtToken;\\n    }\\n\\n    function validBorrowAssetConfig(BorrowAssetConfig memory self, address _owner) internal view {\\n        require(self.initialExchangeRateMantissa > 0, \\\"E\\\");\\n        require(self.reserveFactorMantissa > 0, \\\"F\\\");\\n        require(self.collateralFactor > 0, \\\"C\\\");\\n        require(self.liquidationFee > 0, \\\"L\\\");\\n        require(address(self.wrappedBorrowAsset) != address(0), \\\"B\\\");\\n        require(address(self.debtToken) != address(0), \\\"IB\\\");\\n        require(self.wrappedBorrowAsset.owner() == _owner, \\\"IW\\\");\\n        require(self.debtToken.owner() == _owner, \\\"IVW\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x9f0826b1976adf2aa12971840b30306b2399bd130325301fba73d4806b529fe8\",\"license\":\"MIT\"},\"contracts/LendingPairFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"./interfaces/IPriceOracleAggregator.sol\\\";\\nimport \\\"./interfaces/IInterestRateModel.sol\\\";\\nimport \\\"./interfaces/IBSLendingPair.sol\\\";\\nimport \\\"./interfaces/IBSWrapperToken.sol\\\";\\nimport \\\"./interfaces/IDebtToken.sol\\\";\\nimport \\\"./interfaces/IRewardDistributorManager.sol\\\";\\nimport \\\"./interest/JumpRateModelV2.sol\\\";\\nimport \\\"./token/IERC20Details.sol\\\";\\nimport \\\"./DataTypes.sol\\\";\\n\\ncontract LendingPairFactory is Pausable {\\n    using Clones for address;\\n\\n    address public immutable owner;\\n\\n    address public lendingPairImplementation;\\n    address public collateralWrapperImplementation;\\n    address public debtTokenImplementation;\\n    address public borrowAssetWrapperImplementation;\\n    address public rewardDistributionManager;\\n\\n    address[] public allPairs;\\n\\n    mapping(address => bool) public validInterestRateModels;\\n\\n    event NewLendingPair(address pair, uint256 created);\\n    event LogicContractUpdated(address pairLogic);\\n    event NewInterestRateModel(address ir, uint256 timestamp);\\n\\n    /// @notice modifier to allow only the owner to call a function\\n    modifier onlyOwner {\\n        require(msg.sender == owner, \\\"ONLY_OWNER\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _owner,\\n        address _pairLogic,\\n        address _collateralWrapperLogic,\\n        address _debtTokenLogic,\\n        address _borrowAssetWrapperLogic,\\n        address _rewardDistributionManager\\n    ) {\\n        require(_owner != address(0), \\\"inv_o\\\");\\n        require(_pairLogic != address(0), \\\"inv_l\\\");\\n        require(_collateralWrapperLogic != address(0), \\\"inv_c\\\");\\n        require(_debtTokenLogic != address(0), \\\"inv_d\\\");\\n        require(_borrowAssetWrapperLogic != address(0), \\\"inv_b\\\");\\n        require(_rewardDistributionManager != address(0), \\\"inv_r\\\");\\n\\n        owner = _owner;\\n        lendingPairImplementation = _pairLogic;\\n        collateralWrapperImplementation = _collateralWrapperLogic;\\n        debtTokenImplementation = _debtTokenLogic;\\n        borrowAssetWrapperImplementation = _borrowAssetWrapperLogic;\\n        rewardDistributionManager = _rewardDistributionManager;\\n    }\\n\\n    /// @notice pause\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @notice unpause\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function updatePairImpl(address _newLogicContract) external onlyOwner {\\n        require(_newLogicContract != address(0), \\\"INV_C\\\");\\n        lendingPairImplementation = _newLogicContract;\\n        emit LogicContractUpdated(_newLogicContract);\\n    }\\n\\n    function updateCollateralWrapperImpl(address _newLogicContract) external onlyOwner {\\n        require(_newLogicContract != address(0), \\\"INV_C\\\");\\n        collateralWrapperImplementation = _newLogicContract;\\n        emit LogicContractUpdated(_newLogicContract);\\n    }\\n\\n    function updateDebtTokenImpl(address _newLogicContract) external onlyOwner {\\n        require(_newLogicContract != address(0), \\\"INV_C\\\");\\n        debtTokenImplementation = _newLogicContract;\\n        emit LogicContractUpdated(_newLogicContract);\\n    }\\n\\n    function updateBorrowAssetWrapperImpl(address _newLogicContract) external onlyOwner {\\n        require(_newLogicContract != address(0), \\\"INV_C\\\");\\n        borrowAssetWrapperImplementation = _newLogicContract;\\n        emit LogicContractUpdated(_newLogicContract);\\n    }\\n\\n    function updateRewardManager(address _newManager) external onlyOwner {\\n        require(_newManager != address(0), \\\"INV_C\\\");\\n        rewardDistributionManager = _newManager;\\n        emit LogicContractUpdated(_newManager);\\n    }\\n\\n    struct NewLendingVaultIRLocalVars {\\n        uint256 baseRatePerYear;\\n        uint256 multiplierPerYear;\\n        uint256 jumpMultiplierPerYear;\\n        uint256 optimal;\\n        uint256 borrowRateMaxMantissa;\\n        uint256 blocksPerYear;\\n    }\\n\\n    /// @dev create interest rate model\\n    function createIR(NewLendingVaultIRLocalVars calldata _interestRateVars, address _team)\\n        external\\n        onlyOwner\\n        returns (address ir)\\n    {\\n        require(address(_team) != address(0), \\\"inv_t\\\");\\n\\n        ir = address(\\n            new JumpRateModelV2(\\n                _interestRateVars.baseRatePerYear,\\n                _interestRateVars.multiplierPerYear,\\n                _interestRateVars.jumpMultiplierPerYear,\\n                _interestRateVars.optimal,\\n                _team,\\n                _interestRateVars.borrowRateMaxMantissa,\\n                _interestRateVars.blocksPerYear\\n            )\\n        );\\n\\n        validInterestRateModels[ir] = true;\\n\\n        emit NewInterestRateModel(ir, block.timestamp);\\n    }\\n\\n    /// @dev disable interest rate model\\n    function disableIR(address ir) external onlyOwner {\\n        require(validInterestRateModels[ir] == true, \\\"IR_NOT_EXIST\\\");\\n        validInterestRateModels[ir] = false;\\n    }\\n\\n    struct BorrowLocalVars {\\n        IERC20 borrowAsset;\\n        uint256 initialExchangeRateMantissa;\\n        uint256 reserveFactorMantissa;\\n        uint256 collateralFactor;\\n        uint256 liquidationFee;\\n        IInterestRateModel interestRateModel;\\n    }\\n\\n    struct WrappedAssetLocalVars {\\n        IBSWrapperToken wrappedBorrowAsset;\\n        IBSWrapperToken wrappedCollateralAsset;\\n        IDebtToken debtToken;\\n    }\\n\\n    /// @dev create lending pair with clones\\n    function createLendingPairWithProxy(\\n        DataTypes.LendingPairVars memory _pairVars,\\n        DataTypes.RiskConfiguration memory _riskConfig,\\n        BorrowLocalVars calldata _borrowVars\\n    ) external whenNotPaused returns (address newLendingPair) {\\n        require(_pairVars.guardian != address(0), \\\"INV_G\\\");\\n        require(address(_pairVars.collateralAsset) != address(0), \\\"INV_C\\\");\\n        require(address(_borrowVars.borrowAsset) != address(0), \\\"INV_B\\\");\\n        require(validInterestRateModels[address(_borrowVars.interestRateModel)] == true, \\\"INV_I\\\");\\n\\n        WrappedAssetLocalVars memory wrappedAssetLocalVars;\\n\\n        bytes32 salt = keccak256(abi.encode(_pairVars.name, _pairVars.symbol, allPairs.length));\\n        newLendingPair = lendingPairImplementation.cloneDeterministic(salt);\\n\\n        // initialize wrapper borrow asset\\n        wrappedAssetLocalVars.wrappedBorrowAsset = IBSWrapperToken(\\n            initWrapperTokensWithProxy(\\n                borrowAssetWrapperImplementation,\\n                newLendingPair,\\n                address(_borrowVars.borrowAsset),\\n                _pairVars.name,\\n                \\\"BOR\\\",\\n                salt\\n            )\\n        );\\n\\n        // initialize wrapper collateral asset\\n        wrappedAssetLocalVars.wrappedCollateralAsset = IBSWrapperToken(\\n            initWrapperTokensWithProxy(\\n                collateralWrapperImplementation,\\n                newLendingPair,\\n                address(_pairVars.collateralAsset),\\n                _pairVars.name,\\n                \\\"COL\\\",\\n                salt\\n            )\\n        );\\n\\n        // initialize debt token\\n        wrappedAssetLocalVars.debtToken = IDebtToken(\\n            initWrapperTokensWithProxy(\\n                debtTokenImplementation,\\n                newLendingPair,\\n                address(_borrowVars.borrowAsset),\\n                _pairVars.name,\\n                \\\"DEBT\\\",\\n                salt\\n            )\\n        );\\n\\n        DataTypes.BorrowAssetConfig memory borrowConfig =\\n            DataTypes.BorrowAssetConfig(\\n                _borrowVars.initialExchangeRateMantissa,\\n                _borrowVars.reserveFactorMantissa,\\n                _borrowVars.collateralFactor,\\n                wrappedAssetLocalVars.wrappedBorrowAsset,\\n                _borrowVars.liquidationFee,\\n                wrappedAssetLocalVars.debtToken\\n            );\\n\\n        // initialize lending pair\\n        IBSLendingPair(newLendingPair).initialize(\\n            _pairVars,\\n            borrowConfig,\\n            wrappedAssetLocalVars.wrappedCollateralAsset,\\n            _borrowVars.interestRateModel,\\n            _riskConfig\\n        );\\n\\n        allPairs.push(newLendingPair);\\n        emit NewLendingPair(newLendingPair, block.timestamp);\\n    }\\n\\n    function initWrapperTokensWithProxy(\\n        address _implementation,\\n        address _pair,\\n        address _underlying,\\n        string memory _lendingPairName,\\n        string memory _tokenType,\\n        bytes32 _salt\\n    ) internal returns (address wrapper) {\\n        wrapper = _implementation.cloneDeterministic(_salt);\\n\\n        initializeWrapperTokens(\\n            _pair,\\n            IBSWrapperToken(wrapper),\\n            IERC20Details(_underlying),\\n            _lendingPairName,\\n            _tokenType\\n        );\\n    }\\n\\n    function initializeWrapperTokens(\\n        address _pair,\\n        IBSWrapperToken _wrapperToken,\\n        IERC20Details _underlying,\\n        string memory _lendingPairName,\\n        string memory _tokenType\\n    ) internal {\\n        bytes memory name = abi.encodePacked(_lendingPairName);\\n        name = abi.encodePacked(name, \\\"-PAIR-\\\", _tokenType);\\n        bytes memory symbol = abi.encodePacked(_lendingPairName);\\n        symbol = abi.encodePacked(name, _tokenType);\\n        // initialize wrapperToken\\n        IBSWrapperToken(_wrapperToken).initialize(\\n            _pair,\\n            address(_underlying),\\n            string(name),\\n            string(symbol),\\n            IRewardDistributorManager(rewardDistributionManager)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x36cef35782e06acb8830bbdd3ed414ece742978b9afd26c4de9544776731e560\",\"license\":\"MIT\"},\"contracts/interest/JumpRateModelV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\n////////////////////////////////////////////////////////////////////////////////////////////\\n/// @title JumpRateModelV2\\n/// @author\\n////////////////////////////////////////////////////////////////////////////////////////////\\n\\ncontract JumpRateModelV2 {\\n    event NewInterestParams(\\n        uint256 baseRatePerBlock,\\n        uint256 multiplierPerBlock,\\n        uint256 jumpMultiplierPerBlock,\\n        uint256 kink\\n    );\\n\\n    /// @notice The address of the owner, i.e. the Timelock contract, which can update parameters directly\\n    address public owner;\\n\\n    /// @notice The approximate number of blocks per year that is assumed by the interest rate model\\n    uint256 public immutable blocksPerYear;\\n\\n    /// @notice The multiplier of utilization rate that gives the slope of the interest rate\\n    uint256 public multiplierPerBlock;\\n\\n    /// @notice The base interest rate which is the y-intercept when utilization rate is 0\\n    uint256 public baseRatePerBlock;\\n\\n    /// @notice The multiplierPerBlock after hitting a specified utilization point\\n    uint256 public jumpMultiplierPerBlock;\\n\\n    /// @notice The utilization point at which the jump multiplier is applied\\n    uint256 public kink;\\n\\n    /// @dev Maximum borrow rate that can ever be applied per second\\n    uint256 internal immutable borrowRateMaxMantissa;\\n\\n    /// @notice Construct an interest rate model\\n    /// @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\\n    /// @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\\n    /// @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\\n    /// @param kink_ The utilization point at which the jump multiplier is applied\\n    /// @param owner_ The address of the owner, i.e. which has the ability to update parameters directly\\n    /// @param borrowRateMaxMantissa_ maximum borrow rate per second\\n    /// @param blocksPerYear_ the number of blocks on the chain per year\\n    constructor(\\n        uint256 baseRatePerYear,\\n        uint256 multiplierPerYear,\\n        uint256 jumpMultiplierPerYear,\\n        uint256 kink_,\\n        address owner_,\\n        uint256 borrowRateMaxMantissa_,\\n        uint256 blocksPerYear_\\n    ) {\\n        require(baseRatePerYear > 0, \\\"invalid base rate\\\");\\n        require(multiplierPerYear > 0, \\\"invalid multiplier per year\\\");\\n        require(jumpMultiplierPerYear > 0, \\\"invalid jump multiplier per year\\\");\\n        require(kink_ > 0, \\\"invalid kink\\\");\\n        require(owner_ != address(0), \\\"invalid owner\\\");\\n        require(borrowRateMaxMantissa_ > 0, \\\"invalid borrow rate max\\\");\\n        require(blocksPerYear_ > 0, \\\"invalid blocks per year\\\");\\n\\n        owner = owner_;\\n        borrowRateMaxMantissa = borrowRateMaxMantissa_;\\n        blocksPerYear = blocksPerYear_;\\n        updateJumpRateModelInternal(\\n            baseRatePerYear,\\n            multiplierPerYear,\\n            jumpMultiplierPerYear,\\n            kink_,\\n            blocksPerYear_\\n        );\\n    }\\n\\n    /// @notice Update the parameters of the interest rate model (only callable by owner, i.e. Timelock)\\n    /// @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\\n    /// @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\\n    /// @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\\n    /// @param kink_ The utilization point at which the jump multiplier is applied\\n    function updateJumpRateModel(\\n        uint256 baseRatePerYear,\\n        uint256 multiplierPerYear,\\n        uint256 jumpMultiplierPerYear,\\n        uint256 kink_\\n    ) external {\\n        require(msg.sender == owner, \\\"only the owner may call this function.\\\");\\n        require(baseRatePerYear > 0, \\\"invalid base rate\\\");\\n        require(multiplierPerYear > 0, \\\"invalid multiplier per year\\\");\\n        require(jumpMultiplierPerYear > 0, \\\"invalid jump multiplier per year\\\");\\n        require(kink_ > 0, \\\"invalid kink\\\");\\n\\n        updateJumpRateModelInternal(\\n            baseRatePerYear,\\n            multiplierPerYear,\\n            jumpMultiplierPerYear,\\n            kink_,\\n            blocksPerYear\\n        );\\n    }\\n\\n    /// @notice Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\\n    /// @param cash The amount of cash in the market\\n    /// @param borrows The amount of borrows in the market\\n    /// @param reserves The amount of reserves in the market (currently unused)\\n    /// @return The utilization rate as a mantissa between [0, 1e18]\\n    function utilizationRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves\\n    ) public pure returns (uint256) {\\n        // Utilization rate is 0 when there are no borrows\\n        if (borrows == 0) {\\n            return 0;\\n        }\\n\\n        return (borrows * (1e18)) / (cash + borrows - reserves);\\n    }\\n\\n    /// @notice Calculates the current borrow rate per block, with the error code expected by the market\\n    /// @param cash The amount of cash in the market\\n    /// @param borrows The amount of borrows in the market\\n    /// @param reserves The amount of reserves in the market\\n    /// @return The borrow rate percentage per block as a mantissa (scaled by 1e18)\\n    function getBorrowRateInternal(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves\\n    ) internal view returns (uint256) {\\n        uint256 util = utilizationRate(cash, borrows, reserves);\\n\\n        if (util <= kink) {\\n            return (util * multiplierPerBlock) / 1e18 + baseRatePerBlock;\\n        } else {\\n            uint256 normalRate = (kink * multiplierPerBlock) / 1e18 + baseRatePerBlock;\\n            uint256 excessUtil = util - kink;\\n            return (excessUtil * jumpMultiplierPerBlock) / 1e18 + normalRate;\\n        }\\n    }\\n\\n    /**\\n    /// @notice Calculates the current supply rate per block\\n    /// @param cash The amount of cash in the market\\n    /// @param borrows The amount of borrows in the market\\n    /// @param reserves The amount of reserves in the market\\n    /// @param reserveFactorMantissa The current reserve factor for the market\\n    /// @return The supply rate percentage per block as a mantissa (scaled by 1e18)\\n     */\\n    function getSupplyRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves,\\n        uint256 reserveFactorMantissa\\n    ) public view returns (uint256) {\\n        uint256 oneMinusReserveFactor = uint256(1e18) - reserveFactorMantissa;\\n        uint256 borrowRate = getBorrowRateInternal(cash, borrows, reserves);\\n        uint256 rateToPool = (borrowRate * oneMinusReserveFactor) / 1e18;\\n        return (utilizationRate(cash, borrows, reserves) * rateToPool) / 1e18;\\n    }\\n\\n    /// @notice Internal function to update the parameters of the interest rate model\\n    /// @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\\n    /// @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\\n    /// @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\\n    /// @param kink_ The utilization point at which the jump multiplier is applied\\n    function updateJumpRateModelInternal(\\n        uint256 baseRatePerYear,\\n        uint256 multiplierPerYear,\\n        uint256 jumpMultiplierPerYear,\\n        uint256 kink_,\\n        uint256 blocksPerYear_\\n    ) internal {\\n        baseRatePerBlock = baseRatePerYear / blocksPerYear_;\\n        multiplierPerBlock = (multiplierPerYear * 1e18) / (blocksPerYear_ * kink_);\\n        jumpMultiplierPerBlock = jumpMultiplierPerYear / blocksPerYear_;\\n        kink = kink_;\\n\\n        emit NewInterestParams(baseRatePerBlock, multiplierPerBlock, jumpMultiplierPerBlock, kink);\\n    }\\n\\n    /// @notice Calculates the current borrow rate per block\\n    /// @param cash The amount of cash in the market\\n    /// @param borrows The amount of borrows in the market\\n    /// @param reserves The amount of reserves in the market\\n    /// @return The borrow rate percentage per block as a mantissa (scaled by 1e18)\\n    function getBorrowRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves\\n    ) external view returns (uint256) {\\n        uint256 borrowRateMantissa = getBorrowRateInternal(cash, borrows, reserves);\\n        if (borrowRateMantissa > borrowRateMaxMantissa) {\\n            return borrowRateMaxMantissa;\\n        } else {\\n            return borrowRateMantissa;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x50cbd0801c1f7c92384b4e4a628228fd392c34c6d58d2b13c79dfa2a9b2870fe\",\"license\":\"MIT\"},\"contracts/interfaces/IBSLendingPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IPriceOracleAggregator.sol\\\";\\nimport \\\"./IBSWrapperToken.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\nimport \\\"./IBSVault.sol\\\";\\nimport \\\"../DataTypes.sol\\\";\\n\\ninterface IBSLendingPair {\\n    event Initialized(\\n        address indexed pair,\\n        address indexed asset,\\n        address indexed collateralAsset,\\n        address guardian\\n    );\\n\\n    /**\\n     * Emitted on deposit\\n     *\\n     * @param pair The pair being interacted with\\n     * @param asset The asset deposited in the pair\\n     * @param tokenReceipeint The user the receives the bsTokens\\n     * @param user The user that made the deposit\\n     * @param amount The amount of asset tokens that are deposited\\n     * @param shareAmount The amount of vault shares that are transferred\\n     * @param amountOfWrappedMinted The amount of wrapped tokens minted\\n     **/\\n    event Deposit(\\n        address indexed pair,\\n        address indexed asset,\\n        address indexed tokenReceipeint,\\n        address user,\\n        uint256 amount,\\n        uint256 shareAmount,\\n        uint256 amountOfWrappedMinted\\n    );\\n\\n    event Borrow(address indexed borrower, uint256 amount);\\n\\n    /**\\n     * Emitted on Redeem\\n     *\\n     * @param pair The pair being interacted with\\n     * @param asset The asset withdraw in the pair\\n     * @param user The user that's making the withdrawal\\n     * @param to The user the receives the withdrawn tokens\\n     * @param amount The amount being withdrawn\\n     **/\\n    event Redeem(\\n        address indexed pair,\\n        address indexed asset,\\n        address indexed user,\\n        address to,\\n        uint256 amount,\\n        uint256 amountofWrappedBurned\\n    );\\n\\n    event WithdrawCollateral(address account, uint256 amount);\\n\\n    event ReserveWithdraw(address user, uint256 shares);\\n\\n    /**\\n     * Emitted on repay\\n     *\\n     * @param pair The pair being interacted with\\n     * @param asset The asset repaid in the pair\\n     * @param beneficiary The user that's getting their debt reduced\\n     * @param repayer The user that's providing the funds\\n     * @param amount The amount being repaid\\n     **/\\n    event Repay(\\n        address indexed pair,\\n        address indexed asset,\\n        address indexed beneficiary,\\n        address repayer,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * Emitted on liquidation\\n     *\\n     * @param pair The pair being interacted with\\n     * @param asset The asset that getting liquidated\\n     * @param user The user that's getting liquidated\\n     * @param liquidatedCollateralAmount The of collateral transferred to the liquidator\\n     * @param liquidator The liquidator\\n     **/\\n    event Liquidate(\\n        address indexed pair,\\n        address indexed asset,\\n        address indexed user,\\n        uint256 liquidatedCollateralAmount,\\n        address liquidator\\n    );\\n\\n    /**\\n     * @dev Emitted on flashLoan\\n     * @param target The address of the flash loan receiver contract\\n     * @param initiator The address initiating the flash loan\\n     * @param asset The address of the asset being flash borrowed\\n     * @param amount The amount flash borrowed\\n     * @param premium The fee flash borrowed\\n     **/\\n    event FlashLoan(\\n        address indexed target,\\n        address indexed initiator,\\n        address indexed asset,\\n        uint256 amount,\\n        uint256 premium\\n    );\\n\\n    /**\\n     * @dev Emitted on interest accrued\\n     * @param accrualBlockNumber block number\\n     * @param borrowIndex borrow index\\n     * @param totalBorrows total borrows\\n     * @param totalReserves total reserves\\n     **/\\n    event InterestAccrued(\\n        address indexed pair,\\n        uint256 accrualBlockNumber,\\n        uint256 borrowIndex,\\n        uint256 totalBorrows,\\n        uint256 totalReserves\\n    );\\n\\n    /**\\n     * Emitted when update riskConfiguration\\n     *\\n     * @param depositCollateralLimit new deposit collateralAsset limit\\n     * @param depositBorrowLimit new deposit borrowAsset limit\\n     * @param totalPairDebtLimit new debt limit\\n     * @param blockNumber number of blocks when event is triggered\\n     **/\\n    event UpdateRiskConfiguration(\\n        uint256 depositCollateralLimit,\\n        uint256 depositBorrowLimit,\\n        uint256 totalPairDebtLimit,\\n        uint256 blockNumber\\n    );\\n\\n    event InterestShortCircuit(uint256 blockNumber);\\n\\n    event ActionPaused(uint8 action, uint256 timestamp);\\n    event ActionUnPaused(uint8 action, uint256 timestamp);\\n\\n    function initialize(\\n        DataTypes.LendingPairVars memory pariVars,\\n        DataTypes.BorrowAssetConfig calldata borrowConfig,\\n        IBSWrapperToken _wrappedCollateralAsset,\\n        IInterestRateModel _interestRate,\\n        DataTypes.RiskConfiguration memory _riskConfig\\n    ) external;\\n\\n    function asset() external view returns (IERC20);\\n\\n    function depositBorrowAsset(address _tokenReceipeint, uint256 _amount) external;\\n\\n    function depositCollateral(address _tokenReceipeint, uint256 _vaultShareAmount) external;\\n\\n    function redeem(address _to, uint256 _amount) external returns (uint256);\\n\\n    function collateralOfAccount(address _account) external view returns (uint256);\\n\\n    function getMaxWithdrawAllowed(address account) external returns (uint256);\\n\\n    function oracle() external view returns (IPriceOracleAggregator);\\n\\n    function collateralAsset() external view returns (IERC20);\\n\\n    function calcBorrowLimit(uint256 amount) external view returns (uint256);\\n\\n    function accountInterestIndex(address) external view returns (uint256);\\n\\n    function borrowIndex() external view returns (uint256);\\n\\n    function debtToken() external view returns (IDebtToken);\\n\\n    function borrowBalancePrior(address _account) external view returns (uint256);\\n\\n    function wrapperBorrowedAsset() external view returns (IBSWrapperToken);\\n\\n    function wrappedCollateralAsset() external view returns (IBSWrapperToken);\\n\\n    function totalReserves() external view returns (uint256);\\n\\n    function withdrawFees(uint256 amount) external;\\n\\n    function liquidate(address user) external;\\n}\\n\",\"keccak256\":\"0x9989f698249a2f971327a3f0cbddc6758d2f7b4144f6aea16b0ce62915f85ac5\",\"license\":\"MIT\"},\"contracts/interfaces/IBSVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IERC3156FlashLender.sol\\\";\\n\\ninterface IBSVault is IERC3156FlashLender {\\n    // ************** //\\n    // *** EVENTS *** //\\n    // ************** //\\n\\n    /// @notice Emitted on deposit\\n    /// @param token being deposited\\n    /// @param from address making the depsoit\\n    /// @param to address to credit the tokens being deposited\\n    /// @param amount being deposited\\n    /// @param shares the represent the amount deposited in the vault\\n    event Deposit(\\n        IERC20 indexed token,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        uint256 shares\\n    );\\n\\n    /// @notice Emitted on withdraw\\n    /// @param token being deposited\\n    /// @param from address making the depsoit\\n    /// @param to address to credit the tokens being withdrawn\\n    /// @param amount Amount of underlying being withdrawn\\n    /// @param shares the represent the amount withdraw from the vault\\n    event Withdraw(\\n        IERC20 indexed token,\\n        address indexed from,\\n        address indexed to,\\n        uint256 shares,\\n        uint256 amount\\n    );\\n\\n    event Transfer(IERC20 indexed token, address indexed from, address indexed to, uint256 amount);\\n\\n    event FlashLoan(\\n        address indexed borrower,\\n        IERC20 indexed token,\\n        uint256 amount,\\n        uint256 feeAmount,\\n        address indexed receiver\\n    );\\n\\n    event TransferControl(address _newTeam, uint256 timestamp);\\n\\n    event UpdateFlashLoanRate(uint256 newRate);\\n\\n    event Approval(address indexed user, address indexed allowed, bool status);\\n\\n    event OwnershipAccepted(address prevOwner, address newOwner, uint256 timestamp);\\n\\n    event RegisterProtocol(address sender);\\n\\n    event AllowContract(address whitelist, bool status);\\n\\n    event RescueFunds(IERC20 token, uint256 amount);\\n\\n    // ************** //\\n    // *** FUNCTIONS *** //\\n    // ************** //\\n\\n    function initialize(uint256 _flashLoanRate, address _owner) external;\\n\\n    function approveContract(\\n        address _user,\\n        address _contract,\\n        bool _status,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function deposit(\\n        IERC20 _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external returns (uint256, uint256);\\n\\n    function withdraw(\\n        IERC20 _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external returns (uint256);\\n\\n    function balanceOf(IERC20, address) external view returns (uint256);\\n\\n    function transfer(\\n        IERC20 _token,\\n        address _from,\\n        address _to,\\n        uint256 _shares\\n    ) external;\\n\\n    function toShare(\\n        IERC20 token,\\n        uint256 amount,\\n        bool ceil\\n    ) external view returns (uint256);\\n\\n    function toUnderlying(IERC20 token, uint256 share) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc0323afa216ff7958b03edc38475bd0c8b56c7866a66429bf28debeeea22a3ff\",\"license\":\"MIT\"},\"contracts/interfaces/IBSWrapperToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IRewardDistributorManager.sol\\\";\\n\\ninterface IBSWrapperTokenBase is IERC20 {\\n    function initialize(\\n        address _owner,\\n        address _underlying,\\n        string memory _tokenName,\\n        string memory _tokenSymbol,\\n        IRewardDistributorManager _manager\\n    ) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n\\n    function owner() external view returns (address);\\n}\\n\\ninterface IBSWrapperToken is IBSWrapperTokenBase {\\n    function mint(address _to, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xb517729706c5471ef0fea6e8daf03586f6cc926c9eeb716ae7d13a8de2053e70\",\"license\":\"MIT\"},\"contracts/interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport {IBSWrapperTokenBase} from \\\"./IBSWrapperToken.sol\\\";\\n\\ninterface IDebtToken is IBSWrapperTokenBase {\\n    event DelegateBorrow(address from, address to, uint256 amount, uint256 timestamp);\\n\\n    function increaseTotalDebt(uint256 _amount) external;\\n\\n    function principal(address _account) external view returns (uint256);\\n\\n    function mint(\\n        address _to,\\n        address _owner,\\n        uint256 _amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcad520d843e96fae406142ca82ec1333a7600c3900424707c4a91283126e739a\",\"license\":\"MIT\"},\"contracts/interfaces/IERC3156FlashBorrower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\ninterface IERC3156FlashBorrower {\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0xc72afde3ab27c13b3437769c92b10e48dc143565ba2bcf9e78f6713d4695d924\",\"license\":\"MIT\"},\"contracts/interfaces/IERC3156FlashLender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.1;\\nimport \\\"./IERC3156FlashBorrower.sol\\\";\\n\\ninterface IERC3156FlashLender {\\n    /**\\n     * @dev The amount of currency available to be lent.\\n     * @param token The loan currency.\\n     * @return The amount of `token` that can be borrowed.\\n     */\\n    function maxFlashLoan(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev The fee to be charged for a given loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n     */\\n    function flashFee(address token, uint256 amount) external view returns (uint256);\\n\\n    /**\\n     * @dev Initiate a flash loan.\\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     */\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x381589754fc2917129ff2192df23588009fecb73f6df12bc9218dd731d25758d\",\"license\":\"MIT\"},\"contracts/interfaces/IInterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\ninterface IInterestRateModel {\\n    /**\\n     * @notice Calculates the current borrow interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amount of reserves the market has\\n     * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getBorrowRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Calculates the current supply interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amount of reserves the market has\\n     * @param reserveFactorMantissa The current reserve factor the market has\\n     * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getSupplyRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves,\\n        uint256 reserveFactorMantissa\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe6b72371b9b062ac92f3f18f7d6481e951714c95c2dd50a3ee13a266b72c2882\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\ninterface IOracle {\\n    /// @notice Price update event\\n    /// @param asset the asset\\n    /// @param newPrice price of the asset\\n    event PriceUpdated(address asset, uint256 newPrice);\\n\\n    /// @dev returns latest answer\\n    function latestAnswer() external view returns (int256);\\n}\\n\",\"keccak256\":\"0x28eea16f99e07c31d30e3bee3df4491c2e04ca9edbd235fd93903e8c5a21f01b\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceOracleAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\n\\ninterface IPriceOracleAggregator {\\n    event UpdateOracle(IERC20 token, IOracle oracle);\\n\\n    function getPriceInUSD(IERC20 _token) external view returns (uint256);\\n\\n    function getPriceInUSDMultiple(IERC20[] calldata _tokens)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function setOracleForAsset(IERC20[] calldata _asset, IOracle[] calldata _oracle) external;\\n\\n    event OwnershipAccepted(address prevOwner, address newOwner, uint256 timestamp);\\n    event TransferControl(address _newTeam, uint256 timestamp);\\n    event StableTokenAdded(IERC20 _token, uint256 timestamp);\\n}\\n\",\"keccak256\":\"0xc80f3e036368823b093e495b017b23aa7eb541e1909b7c4cf0355f02e423d6a1\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRewardDistributor {\\n    event Initialized(\\n        IERC20 indexed _rewardToken,\\n        uint256 _amountDistributePerSecond,\\n        uint256 _startTimestamp,\\n        uint256 _endTimestamp,\\n        address _guardian,\\n        uint256 timestamp\\n    );\\n\\n    function accumulateReward(address _tokenAddr, address _user) external;\\n\\n    function endTimestamp() external returns (uint256);\\n\\n    function initialize(\\n        string calldata _name,\\n        IERC20 _rewardToken,\\n        uint256 _amountDistributePerSecond,\\n        uint256 _startTimestamp,\\n        uint256 _endTimestamp,\\n        address _guardian\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2d752f87ed5d75fe0498b53e76ad181ece87eb6287432f15a440b92a4efd18cd\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardDistributorManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport \\\"./IRewardDistributor.sol\\\";\\n\\ninterface IRewardDistributorManager {\\n    /// @dev Emitted on Initialization\\n    event Initialized(address owner, uint256 timestamp);\\n\\n    event DistributorStatusUpdated(IRewardDistributor distributor, bool approve, uint256 timestamp);\\n    event AddReward(address tokenAddr, IRewardDistributor distributor, uint256 timestamp);\\n    event RemoveReward(address tokenAddr, IRewardDistributor distributor, uint256 timestamp);\\n    event TransferControl(address _newTeam, uint256 timestamp);\\n    event OwnershipAccepted(address prevOwner, address newOwner, uint256 timestamp);\\n\\n    function activateReward(address _tokenAddr) external;\\n\\n    function removeReward(address _tokenAddr, IRewardDistributor _distributor) external;\\n\\n    function accumulateRewards(address _from, address _to) external;\\n}\\n\",\"keccak256\":\"0xd1a2340e9a25277cd5efdf1f57a26f0bb14c43301c10aa4427d7f5c105c61173\",\"license\":\"MIT\"},\"contracts/token/IERC20Details.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\ninterface IERC20Details {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xcfd6fd5f452a70690addc27342129a8ad648d1bfa8b4780edc3dd637da99dd08\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162002774380380620027748339810160408190526200003491620001da565b6000805460ff191690556001600160a01b038616620000705760405162461bcd60e51b8152600401620000679062000279565b60405180910390fd5b6001600160a01b038516620000995760405162461bcd60e51b815260040162000067906200025a565b6001600160a01b038416620000c25760405162461bcd60e51b8152600401620000679062000298565b6001600160a01b038316620000eb5760405162461bcd60e51b81526004016200006790620002b7565b6001600160a01b038216620001145760405162461bcd60e51b81526004016200006790620002f5565b6001600160a01b0381166200013d5760405162461bcd60e51b81526004016200006790620002d6565b60609590951b6001600160601b03191660805260008054610100600160a81b0319166101006001600160a01b0396871602179055600180546001600160a01b031990811694861694909417905560028054841692851692909217909155600380548316918416919091179055600480549091169190921617905562000314565b80516001600160a01b0381168114620001d557600080fd5b919050565b60008060008060008060c08789031215620001f3578182fd5b620001fe87620001bd565b95506200020e60208801620001bd565b94506200021e60408801620001bd565b93506200022e60608801620001bd565b92506200023e60808801620001bd565b91506200024e60a08801620001bd565b90509295509295509295565b6020808252600590820152641a5b9d97db60da1b604082015260600190565b602080825260059082015264696e765f6f60d81b604082015260600190565b602080825260059082015264696e765f6360d81b604082015260600190565b6020808252600590820152641a5b9d97d960da1b604082015260600190565b60208082526005908201526434b73b2fb960d91b604082015260600190565b60208082526005908201526434b73b2fb160d91b604082015260600190565b60805160601c61240262000372600039600081816102b5015281816107830152818161086f015281816108fc015281816109480152818161097501528181610a4501528181610b1801528181610bd90152610c8701526124026000f3fe60806040523480156200001157600080fd5b50600436106200013c5760003560e01c80637fe4964111620000bd57806397872467116200007b578063978724671462000237578063a01e047c146200024e578063b7e8774f1462000265578063dc1bde23146200027c578063f59c79dc1462000293576200013c565b80637fe4964114620001f85780638456cb5914620002025780638da5cb5b146200020c5780638f8547f0146200021657806396807c84146200022d576200013c565b80631e3dd18b116200010b5780631e3dd18b14620001aa5780633f4ba83a14620001c15780633f9daecc14620001cb5780635c975abb14620001d5578063775c751314620001ee576200013c565b8063050eb2eb14620001415780631c2a7d6f146200015a5780631d3b357414620001895780631e171b0c1462000193575b600080fd5b620001586200015236600462001180565b620002aa565b005b620001716200016b366004620011a6565b6200037f565b6040516200018091906200142f565b60405180910390f35b6200017162000764565b62000158620001a436600462001180565b62000778565b62000171620001bb366004620012e3565b62000839565b6200015862000864565b62000171620008bb565b620001df620008ca565b604051620001809190620014b3565b62000171620008d3565b62000171620008e2565b62000158620008f1565b6200017162000946565b620001586200022736600462001180565b6200096a565b6200017162000a2b565b620001586200024836600462001180565b62000a3a565b620001586200025f36600462001180565b62000b0d565b620001586200027636600462001180565b62000bce565b620001716200028d366004620012a7565b62000c7a565b620001df620002a436600462001180565b62000db5565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614620002fe5760405162461bcd60e51b8152600401620002f5906200163f565b60405180910390fd5b6001600160a01b038116620003275760405162461bcd60e51b8152600401620002f59062001601565b600480546001600160a01b0319166001600160a01b0383161790556040517f8df748e91aa1ee28349ed8a7ff354a3717a778db8d9fbefd53bb60f5ac649e4f90620003749083906200142f565b60405180910390a150565b60006200038b620008ca565b15620003ab5760405162461bcd60e51b8152600401620002f59062001585565b60808401516001600160a01b0316620003d85760405162461bcd60e51b8152600401620002f59062001620565b60608401516001600160a01b0316620004055760405162461bcd60e51b8152600401620002f59062001601565b600062000416602084018462001180565b6001600160a01b03161415620004405760405162461bcd60e51b8152600401620002f5906200152f565b600660006200045660c0850160a0860162001180565b6001600160a01b0316815260208101919091526040016000205460ff161515600114620004975760405162461bcd60e51b8152600401620002f59062001663565b620004a162001078565b8451602080870151600554604051600094620004c2949093929101620014be565b60408051808303601f190181529190528051602090910120600054909150620004fa9061010090046001600160a01b03168262000dca565b60035490935062000541906001600160a01b0316846200051e602088018862001180565b89516040805180820190915260038152622127a960e91b60208201528662000e5a565b6001600160a01b0390811683526001546060880151885160408051808201909152600381526210d3d360ea1b602082015262000587949390931692879291908662000e5a565b6001600160a01b03908116602080850191909152600254620005d99216908590620005b59088018862001180565b89516040805180820190915260048152631111509560e21b60208201528662000e5a565b82604001906001600160a01b031690816001600160a01b03168152505060006040518060c0016040528086602001358152602001866040013581526020018660600135815260200184600001516001600160a01b031681526020018660800135815260200184604001516001600160a01b03168152509050836001600160a01b03166308f18a64888386602001518960a00160208101906200067c919062001180565b8b6040518663ffffffff1660e01b81526004016200069f95949392919062001682565b600060405180830381600087803b158015620006ba57600080fd5b505af1158015620006cf573d6000803e3d6000fd5b5050600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0319166001600160a01b03881617905550506040517f569465810a88162d0f22919f03f6666d504b840ebec118a2df6f23ab67638de0906200075290869042906200149a565b60405180910390a15050509392505050565b60005461010090046001600160a01b031681565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614620007c35760405162461bcd60e51b8152600401620002f5906200163f565b6001600160a01b038116620007ec5760405162461bcd60e51b8152600401620002f59062001601565b600380546001600160a01b0319166001600160a01b0383161790556040517f8df748e91aa1ee28349ed8a7ff354a3717a778db8d9fbefd53bb60f5ac649e4f90620003749083906200142f565b600581815481106200084a57600080fd5b6000918252602090912001546001600160a01b0316905081565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614620008af5760405162461bcd60e51b8152600401620002f5906200163f565b620008b962000e8c565b565b6001546001600160a01b031681565b60005460ff1690565b6003546001600160a01b031681565b6002546001600160a01b031681565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146200093c5760405162461bcd60e51b8152600401620002f5906200163f565b620008b962000f03565b7f000000000000000000000000000000000000000000000000000000000000000081565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614620009b55760405162461bcd60e51b8152600401620002f5906200163f565b6001600160a01b038116620009de5760405162461bcd60e51b8152600401620002f59062001601565b600180546001600160a01b0319166001600160a01b0383161790556040517f8df748e91aa1ee28349ed8a7ff354a3717a778db8d9fbefd53bb60f5ac649e4f90620003749083906200142f565b6004546001600160a01b031681565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161462000a855760405162461bcd60e51b8152600401620002f5906200163f565b6001600160a01b03811662000aae5760405162461bcd60e51b8152600401620002f59062001601565b6000805474ffffffffffffffffffffffffffffffffffffffff0019166101006001600160a01b038416021790556040517f8df748e91aa1ee28349ed8a7ff354a3717a778db8d9fbefd53bb60f5ac649e4f90620003749083906200142f565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161462000b585760405162461bcd60e51b8152600401620002f5906200163f565b6001600160a01b03811662000b815760405162461bcd60e51b8152600401620002f59062001601565b600280546001600160a01b0319166001600160a01b0383161790556040517f8df748e91aa1ee28349ed8a7ff354a3717a778db8d9fbefd53bb60f5ac649e4f90620003749083906200142f565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161462000c195760405162461bcd60e51b8152600401620002f5906200163f565b6001600160a01b03811660009081526006602052604090205460ff16151560011462000c595760405162461bcd60e51b8152600401620002f590620015db565b6001600160a01b03166000908152600660205260409020805460ff19169055565b6000336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161462000cc75760405162461bcd60e51b8152600401620002f5906200163f565b6001600160a01b03821662000cf05760405162461bcd60e51b8152600401620002f590620015bc565b82600001358360200135846040013585606001358587608001358860a0013560405162000d1d9062001098565b62000d2f979695949392919062001736565b604051809103906000f08015801562000d4c573d6000803e3d6000fd5b506001600160a01b03811660009081526006602052604090819020805460ff19166001179055519091507f918897fd1bc2f5f93459d04688d69fa9309915b7aef0f702c7c8080621aeaaf79062000da790839042906200149a565b60405180910390a192915050565b60066020526000908152604090205460ff1681565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528360601b60148201527f5af43d82803e903d91602b57fd5bf300000000000000000000000000000000006028820152826037826000f59150506001600160a01b03811662000e545760405162461bcd60e51b8152600401620002f5906200154e565b92915050565b600062000e716001600160a01b0388168362000dca565b905062000e82868287878762000f65565b9695505050505050565b62000e96620008ca565b62000eb55760405162461bcd60e51b8152600401620002f590620014f8565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa62000eea62001074565b60405162000ef991906200142f565b60405180910390a1565b62000f0d620008ca565b1562000f2d5760405162461bcd60e51b8152600401620002f59062001585565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25862000eea62001074565b60008260405160200162000f7a919062001411565b6040516020818303038152906040529050808260405160200162000fa0929190620013cc565b604051602081830303815290604052905060008360405160200162000fc6919062001411565b6040516020818303038152906040529050818360405160200162000fec92919062001399565b60408051601f198184030181529082905260048054631b1492e160e11b84529193506001600160a01b03808a169363362925c29362001037938d938c938a938a939216910162001443565b600060405180830381600087803b1580156200105257600080fd5b505af115801562001067573d6000803e3d6000fd5b5050505050505050505050565b3390565b604080516060810182526000808252602082018190529181019190915290565b610bc7806200180683390190565b8035620010b381620017ec565b919050565b600082601f830112620010c9578081fd5b813567ffffffffffffffff811115620010e657620010e6620017d6565b620010fb601f8201601f19166020016200176f565b81815284602083860101111562001110578283fd5b816020850160208301379081016020019190915292915050565b600060c082840312156200113c578081fd5b50919050565b60006060828403121562001154578081fd5b6200116060606200176f565b905081358152602082013560208201526040820135604082015292915050565b60006020828403121562001192578081fd5b81356200119f81620017ec565b9392505050565b60008060006101408486031215620011bc578182fd5b833567ffffffffffffffff80821115620011d4578384fd5b9085019060a08288031215620011e8578384fd5b620011f460a06200176f565b82358281111562001203578586fd5b6200121189828601620010b8565b82525060208301358281111562001226578586fd5b6200123489828601620010b8565b602083015250604083013591506200124c82620017ec565b8160408201526200126060608401620010a6565b60608201526200127360808401620010a6565b60808201528095505050506200128d856020860162001142565b91506200129e85608086016200112a565b90509250925092565b60008060e08385031215620012ba578182fd5b620012c684846200112a565b915060c0830135620012d881620017ec565b809150509250929050565b600060208284031215620012f5578081fd5b5035919050565b6001600160a01b03169052565b6000815180845262001323816020860160208601620017a3565b601f01601f19169290920160200192915050565b80518252602081015160208301526040810151604083015260608101516001600160a01b038082166060850152608083015160808501528060a08401511660a085015250505050565b8051825260208082015190830152604090810151910152565b60008351620013ad818460208801620017a3565b835190830190620013c3818360208801620017a3565b01949350505050565b60008351620013e0818460208801620017a3565b652d504149522d60d01b908301908152835162001405816006840160208801620017a3565b01600601949350505050565b6000825162001425818460208701620017a3565b9190910192915050565b6001600160a01b0391909116815260200190565b60006001600160a01b038088168352808716602084015260a060408401526200147060a084018762001309565b838103606085015262001484818762001309565b9250508084166080840152509695505050505050565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b600060608252620014d3606083018662001309565b8281036020840152620014e7818662001309565b915050826040830152949350505050565b60208082526014908201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604082015260600190565b60208082526005908201526424a72b2fa160d91b604082015260600190565b60208082526017908201527f455243313136373a2063726561746532206661696c6564000000000000000000604082015260600190565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b6020808252600590820152641a5b9d97dd60da1b604082015260600190565b6020808252600c908201526b125497d393d517d1561254d560a21b604082015260600190565b602080825260059082015264494e565f4360d81b604082015260600190565b602080825260059082015264494e565f4760d81b604082015260600190565b6020808252600a908201526927a7262cafa7aba722a960b11b604082015260600190565b602080825260059082015264494e565f4960d81b604082015260600190565b6000610180808352875160a082850152620016a261022085018262001309565b915050602088015161017f19848303016101a0850152620016c4828262001309565b60408a01516001600160a01b039081166101c087015260608b015181166101e087015260808b015116610200860152925062001707915050602083018762001337565b6200171660e0830186620012fc565b62001726610100830185620012fc565b62000e8261012083018462001380565b9687526020870195909552604086019390935260608501919091526001600160a01b0316608084015260a083015260c082015260e00190565b604051601f8201601f1916810167ffffffffffffffff811182821017156200179b576200179b620017d6565b604052919050565b60005b83811015620017c0578181015183820152602001620017a6565b83811115620017d0576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200180257600080fd5b5056fe60c06040523480156200001157600080fd5b5060405162000bc738038062000bc7833981016040819052620000349162000216565b60008711620000605760405162461bcd60e51b81526004016200005790620003ab565b60405180910390fd5b60008611620000835760405162461bcd60e51b81526004016200005790620002aa565b60008511620000a65760405162461bcd60e51b815260040162000057906200033f565b60008411620000c95760405162461bcd60e51b8152600401620000579062000284565b6001600160a01b038316620000f25760405162461bcd60e51b8152600401620000579062000318565b60008211620001155760405162461bcd60e51b8152600401620000579062000374565b60008111620001385760405162461bcd60e51b81526004016200005790620002e1565b600080546001600160a01b0319166001600160a01b03851617905560a082905260808190526200016c878787878562000179565b505050505050506200043e565b620001858186620003f1565b60025562000194828262000412565b620001a885670de0b6b3a764000062000412565b620001b49190620003f1565b600155620001c38184620003f1565b600381905560048390556002546001546040517f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d93620002079392918790620003d6565b60405180910390a15050505050565b600080600080600080600060e0888a03121562000231578283fd5b8751602089015160408a015160608b015160808c0151939a50919850965094506001600160a01b038116811462000266578384fd5b8093505060a0880151915060c0880151905092959891949750929550565b6020808252600c908201526b696e76616c6964206b696e6b60a01b604082015260600190565b6020808252601b908201527f696e76616c6964206d756c7469706c6965722070657220796561720000000000604082015260600190565b60208082526017908201527f696e76616c696420626c6f636b73207065722079656172000000000000000000604082015260600190565b6020808252600d908201526c34b73b30b634b21037bbb732b960991b604082015260600190565b6020808252818101527f696e76616c6964206a756d70206d756c7469706c696572207065722079656172604082015260600190565b60208082526017908201527f696e76616c696420626f72726f772072617465206d6178000000000000000000604082015260600190565b602080825260119082015270696e76616c69642062617365207261746560781b604082015260600190565b93845260208401929092526040830152606082015260800190565b6000826200040d57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156200043957634e487b7160e01b81526011600452602481fd5b500290565b60805160a0516107556200047260003960008181610156015261017e01526000818161026b01526102ec01526107556000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063a385fb9611610066578063a385fb9614610111578063b816881614610119578063b9f9850a1461012c578063f14039de14610134578063fd2da3391461013c5761009e565b806315f24053146100a35780632037f3e7146100cc5780636e71e2d8146100e15780638726bb89146100f45780638da5cb5b146100fc575b600080fd5b6100b66100b13660046104f8565b610144565b6040516100c39190610677565b60405180910390f35b6100df6100da366004610523565b6101af565b005b6100b66100ef3660046104f8565b610295565b6100b66102d5565b6101046102db565b6040516100c39190610554565b6100b66102ea565b6100b6610127366004610523565b61030e565b6100b661038a565b6100b6610390565b6100b6610396565b60008061015285858561039c565b90507f00000000000000000000000000000000000000000000000000000000000000008111156101a5577f00000000000000000000000000000000000000000000000000000000000000009150506101a8565b90505b9392505050565b6000546001600160a01b031633146101e25760405162461bcd60e51b81526004016101d990610631565b60405180910390fd5b600084116102025760405162461bcd60e51b81526004016101d9906105fa565b600083116102225760405162461bcd60e51b81526004016101d99061058e565b600082116102425760405162461bcd60e51b81526004016101d9906105c5565b600081116102625760405162461bcd60e51b81526004016101d990610568565b61028f848484847f0000000000000000000000000000000000000000000000000000000000000000610467565b50505050565b6000826102a4575060006101a8565b816102af848661069b565b6102b991906106f2565b6102cb84670de0b6b3a76400006106d3565b6101a591906106b3565b60015481565b6000546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008061032383670de0b6b3a76400006106f2565b9050600061033287878761039c565b90506000670de0b6b3a764000061034984846106d3565b61035391906106b3565b9050670de0b6b3a76400008161036a8a8a8a610295565b61037491906106d3565b61037e91906106b3565b98975050505050505050565b60035481565b60025481565b60045481565b6000806103aa858585610295565b905060045481116103eb57600254670de0b6b3a7640000600154836103cf91906106d3565b6103d991906106b3565b6103e3919061069b565b9150506101a8565b6000600254670de0b6b3a764000060015460045461040991906106d3565b61041391906106b3565b61041d919061069b565b905060006004548361042f91906106f2565b905081670de0b6b3a76400006003548361044991906106d3565b61045391906106b3565b61045d919061069b565b93505050506101a8565b61047181866106b3565b60025561047e82826106d3565b61049085670de0b6b3a76400006106d3565b61049a91906106b3565b6001556104a781846106b3565b600381905560048390556002546001546040517f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d936104e99392918790610680565b60405180910390a15050505050565b60008060006060848603121561050c578283fd5b505081359360208301359350604090920135919050565b60008060008060808587031215610538578081fd5b5050823594602084013594506040840135936060013592509050565b6001600160a01b0391909116815260200190565b6020808252600c908201526b696e76616c6964206b696e6b60a01b604082015260600190565b6020808252601b908201527f696e76616c6964206d756c7469706c6965722070657220796561720000000000604082015260600190565b6020808252818101527f696e76616c6964206a756d70206d756c7469706c696572207065722079656172604082015260600190565b60208082526011908201527f696e76616c696420626173652072617465000000000000000000000000000000604082015260600190565b60208082526026908201527f6f6e6c7920746865206f776e6572206d61792063616c6c20746869732066756e60408201526531ba34b7b71760d11b606082015260800190565b90815260200190565b93845260208401929092526040830152606082015260800190565b600082198211156106ae576106ae610709565b500190565b6000826106ce57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156106ed576106ed610709565b500290565b60008282101561070457610704610709565b500390565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220c95f83be8fa657394176f6a2bba046d2991c3c282628b1836630ee29777e30b464736f6c63430008010033a264697066735822122057a75c884545498bbf89efe36055f7d083e6429aa0277eba0e51c898537af67f64736f6c63430008010033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200013c5760003560e01c80637fe4964111620000bd57806397872467116200007b578063978724671462000237578063a01e047c146200024e578063b7e8774f1462000265578063dc1bde23146200027c578063f59c79dc1462000293576200013c565b80637fe4964114620001f85780638456cb5914620002025780638da5cb5b146200020c5780638f8547f0146200021657806396807c84146200022d576200013c565b80631e3dd18b116200010b5780631e3dd18b14620001aa5780633f4ba83a14620001c15780633f9daecc14620001cb5780635c975abb14620001d5578063775c751314620001ee576200013c565b8063050eb2eb14620001415780631c2a7d6f146200015a5780631d3b357414620001895780631e171b0c1462000193575b600080fd5b620001586200015236600462001180565b620002aa565b005b620001716200016b366004620011a6565b6200037f565b6040516200018091906200142f565b60405180910390f35b6200017162000764565b62000158620001a436600462001180565b62000778565b62000171620001bb366004620012e3565b62000839565b6200015862000864565b62000171620008bb565b620001df620008ca565b604051620001809190620014b3565b62000171620008d3565b62000171620008e2565b62000158620008f1565b6200017162000946565b620001586200022736600462001180565b6200096a565b6200017162000a2b565b620001586200024836600462001180565b62000a3a565b620001586200025f36600462001180565b62000b0d565b620001586200027636600462001180565b62000bce565b620001716200028d366004620012a7565b62000c7a565b620001df620002a436600462001180565b62000db5565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614620002fe5760405162461bcd60e51b8152600401620002f5906200163f565b60405180910390fd5b6001600160a01b038116620003275760405162461bcd60e51b8152600401620002f59062001601565b600480546001600160a01b0319166001600160a01b0383161790556040517f8df748e91aa1ee28349ed8a7ff354a3717a778db8d9fbefd53bb60f5ac649e4f90620003749083906200142f565b60405180910390a150565b60006200038b620008ca565b15620003ab5760405162461bcd60e51b8152600401620002f59062001585565b60808401516001600160a01b0316620003d85760405162461bcd60e51b8152600401620002f59062001620565b60608401516001600160a01b0316620004055760405162461bcd60e51b8152600401620002f59062001601565b600062000416602084018462001180565b6001600160a01b03161415620004405760405162461bcd60e51b8152600401620002f5906200152f565b600660006200045660c0850160a0860162001180565b6001600160a01b0316815260208101919091526040016000205460ff161515600114620004975760405162461bcd60e51b8152600401620002f59062001663565b620004a162001078565b8451602080870151600554604051600094620004c2949093929101620014be565b60408051808303601f190181529190528051602090910120600054909150620004fa9061010090046001600160a01b03168262000dca565b60035490935062000541906001600160a01b0316846200051e602088018862001180565b89516040805180820190915260038152622127a960e91b60208201528662000e5a565b6001600160a01b0390811683526001546060880151885160408051808201909152600381526210d3d360ea1b602082015262000587949390931692879291908662000e5a565b6001600160a01b03908116602080850191909152600254620005d99216908590620005b59088018862001180565b89516040805180820190915260048152631111509560e21b60208201528662000e5a565b82604001906001600160a01b031690816001600160a01b03168152505060006040518060c0016040528086602001358152602001866040013581526020018660600135815260200184600001516001600160a01b031681526020018660800135815260200184604001516001600160a01b03168152509050836001600160a01b03166308f18a64888386602001518960a00160208101906200067c919062001180565b8b6040518663ffffffff1660e01b81526004016200069f95949392919062001682565b600060405180830381600087803b158015620006ba57600080fd5b505af1158015620006cf573d6000803e3d6000fd5b5050600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0319166001600160a01b03881617905550506040517f569465810a88162d0f22919f03f6666d504b840ebec118a2df6f23ab67638de0906200075290869042906200149a565b60405180910390a15050509392505050565b60005461010090046001600160a01b031681565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614620007c35760405162461bcd60e51b8152600401620002f5906200163f565b6001600160a01b038116620007ec5760405162461bcd60e51b8152600401620002f59062001601565b600380546001600160a01b0319166001600160a01b0383161790556040517f8df748e91aa1ee28349ed8a7ff354a3717a778db8d9fbefd53bb60f5ac649e4f90620003749083906200142f565b600581815481106200084a57600080fd5b6000918252602090912001546001600160a01b0316905081565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614620008af5760405162461bcd60e51b8152600401620002f5906200163f565b620008b962000e8c565b565b6001546001600160a01b031681565b60005460ff1690565b6003546001600160a01b031681565b6002546001600160a01b031681565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146200093c5760405162461bcd60e51b8152600401620002f5906200163f565b620008b962000f03565b7f000000000000000000000000000000000000000000000000000000000000000081565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614620009b55760405162461bcd60e51b8152600401620002f5906200163f565b6001600160a01b038116620009de5760405162461bcd60e51b8152600401620002f59062001601565b600180546001600160a01b0319166001600160a01b0383161790556040517f8df748e91aa1ee28349ed8a7ff354a3717a778db8d9fbefd53bb60f5ac649e4f90620003749083906200142f565b6004546001600160a01b031681565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161462000a855760405162461bcd60e51b8152600401620002f5906200163f565b6001600160a01b03811662000aae5760405162461bcd60e51b8152600401620002f59062001601565b6000805474ffffffffffffffffffffffffffffffffffffffff0019166101006001600160a01b038416021790556040517f8df748e91aa1ee28349ed8a7ff354a3717a778db8d9fbefd53bb60f5ac649e4f90620003749083906200142f565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161462000b585760405162461bcd60e51b8152600401620002f5906200163f565b6001600160a01b03811662000b815760405162461bcd60e51b8152600401620002f59062001601565b600280546001600160a01b0319166001600160a01b0383161790556040517f8df748e91aa1ee28349ed8a7ff354a3717a778db8d9fbefd53bb60f5ac649e4f90620003749083906200142f565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161462000c195760405162461bcd60e51b8152600401620002f5906200163f565b6001600160a01b03811660009081526006602052604090205460ff16151560011462000c595760405162461bcd60e51b8152600401620002f590620015db565b6001600160a01b03166000908152600660205260409020805460ff19169055565b6000336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161462000cc75760405162461bcd60e51b8152600401620002f5906200163f565b6001600160a01b03821662000cf05760405162461bcd60e51b8152600401620002f590620015bc565b82600001358360200135846040013585606001358587608001358860a0013560405162000d1d9062001098565b62000d2f979695949392919062001736565b604051809103906000f08015801562000d4c573d6000803e3d6000fd5b506001600160a01b03811660009081526006602052604090819020805460ff19166001179055519091507f918897fd1bc2f5f93459d04688d69fa9309915b7aef0f702c7c8080621aeaaf79062000da790839042906200149a565b60405180910390a192915050565b60066020526000908152604090205460ff1681565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528360601b60148201527f5af43d82803e903d91602b57fd5bf300000000000000000000000000000000006028820152826037826000f59150506001600160a01b03811662000e545760405162461bcd60e51b8152600401620002f5906200154e565b92915050565b600062000e716001600160a01b0388168362000dca565b905062000e82868287878762000f65565b9695505050505050565b62000e96620008ca565b62000eb55760405162461bcd60e51b8152600401620002f590620014f8565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa62000eea62001074565b60405162000ef991906200142f565b60405180910390a1565b62000f0d620008ca565b1562000f2d5760405162461bcd60e51b8152600401620002f59062001585565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25862000eea62001074565b60008260405160200162000f7a919062001411565b6040516020818303038152906040529050808260405160200162000fa0929190620013cc565b604051602081830303815290604052905060008360405160200162000fc6919062001411565b6040516020818303038152906040529050818360405160200162000fec92919062001399565b60408051601f198184030181529082905260048054631b1492e160e11b84529193506001600160a01b03808a169363362925c29362001037938d938c938a938a939216910162001443565b600060405180830381600087803b1580156200105257600080fd5b505af115801562001067573d6000803e3d6000fd5b5050505050505050505050565b3390565b604080516060810182526000808252602082018190529181019190915290565b610bc7806200180683390190565b8035620010b381620017ec565b919050565b600082601f830112620010c9578081fd5b813567ffffffffffffffff811115620010e657620010e6620017d6565b620010fb601f8201601f19166020016200176f565b81815284602083860101111562001110578283fd5b816020850160208301379081016020019190915292915050565b600060c082840312156200113c578081fd5b50919050565b60006060828403121562001154578081fd5b6200116060606200176f565b905081358152602082013560208201526040820135604082015292915050565b60006020828403121562001192578081fd5b81356200119f81620017ec565b9392505050565b60008060006101408486031215620011bc578182fd5b833567ffffffffffffffff80821115620011d4578384fd5b9085019060a08288031215620011e8578384fd5b620011f460a06200176f565b82358281111562001203578586fd5b6200121189828601620010b8565b82525060208301358281111562001226578586fd5b6200123489828601620010b8565b602083015250604083013591506200124c82620017ec565b8160408201526200126060608401620010a6565b60608201526200127360808401620010a6565b60808201528095505050506200128d856020860162001142565b91506200129e85608086016200112a565b90509250925092565b60008060e08385031215620012ba578182fd5b620012c684846200112a565b915060c0830135620012d881620017ec565b809150509250929050565b600060208284031215620012f5578081fd5b5035919050565b6001600160a01b03169052565b6000815180845262001323816020860160208601620017a3565b601f01601f19169290920160200192915050565b80518252602081015160208301526040810151604083015260608101516001600160a01b038082166060850152608083015160808501528060a08401511660a085015250505050565b8051825260208082015190830152604090810151910152565b60008351620013ad818460208801620017a3565b835190830190620013c3818360208801620017a3565b01949350505050565b60008351620013e0818460208801620017a3565b652d504149522d60d01b908301908152835162001405816006840160208801620017a3565b01600601949350505050565b6000825162001425818460208701620017a3565b9190910192915050565b6001600160a01b0391909116815260200190565b60006001600160a01b038088168352808716602084015260a060408401526200147060a084018762001309565b838103606085015262001484818762001309565b9250508084166080840152509695505050505050565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b600060608252620014d3606083018662001309565b8281036020840152620014e7818662001309565b915050826040830152949350505050565b60208082526014908201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604082015260600190565b60208082526005908201526424a72b2fa160d91b604082015260600190565b60208082526017908201527f455243313136373a2063726561746532206661696c6564000000000000000000604082015260600190565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b6020808252600590820152641a5b9d97dd60da1b604082015260600190565b6020808252600c908201526b125497d393d517d1561254d560a21b604082015260600190565b602080825260059082015264494e565f4360d81b604082015260600190565b602080825260059082015264494e565f4760d81b604082015260600190565b6020808252600a908201526927a7262cafa7aba722a960b11b604082015260600190565b602080825260059082015264494e565f4960d81b604082015260600190565b6000610180808352875160a082850152620016a261022085018262001309565b915050602088015161017f19848303016101a0850152620016c4828262001309565b60408a01516001600160a01b039081166101c087015260608b015181166101e087015260808b015116610200860152925062001707915050602083018762001337565b6200171660e0830186620012fc565b62001726610100830185620012fc565b62000e8261012083018462001380565b9687526020870195909552604086019390935260608501919091526001600160a01b0316608084015260a083015260c082015260e00190565b604051601f8201601f1916810167ffffffffffffffff811182821017156200179b576200179b620017d6565b604052919050565b60005b83811015620017c0578181015183820152602001620017a6565b83811115620017d0576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200180257600080fd5b5056fe60c06040523480156200001157600080fd5b5060405162000bc738038062000bc7833981016040819052620000349162000216565b60008711620000605760405162461bcd60e51b81526004016200005790620003ab565b60405180910390fd5b60008611620000835760405162461bcd60e51b81526004016200005790620002aa565b60008511620000a65760405162461bcd60e51b815260040162000057906200033f565b60008411620000c95760405162461bcd60e51b8152600401620000579062000284565b6001600160a01b038316620000f25760405162461bcd60e51b8152600401620000579062000318565b60008211620001155760405162461bcd60e51b8152600401620000579062000374565b60008111620001385760405162461bcd60e51b81526004016200005790620002e1565b600080546001600160a01b0319166001600160a01b03851617905560a082905260808190526200016c878787878562000179565b505050505050506200043e565b620001858186620003f1565b60025562000194828262000412565b620001a885670de0b6b3a764000062000412565b620001b49190620003f1565b600155620001c38184620003f1565b600381905560048390556002546001546040517f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d93620002079392918790620003d6565b60405180910390a15050505050565b600080600080600080600060e0888a03121562000231578283fd5b8751602089015160408a015160608b015160808c0151939a50919850965094506001600160a01b038116811462000266578384fd5b8093505060a0880151915060c0880151905092959891949750929550565b6020808252600c908201526b696e76616c6964206b696e6b60a01b604082015260600190565b6020808252601b908201527f696e76616c6964206d756c7469706c6965722070657220796561720000000000604082015260600190565b60208082526017908201527f696e76616c696420626c6f636b73207065722079656172000000000000000000604082015260600190565b6020808252600d908201526c34b73b30b634b21037bbb732b960991b604082015260600190565b6020808252818101527f696e76616c6964206a756d70206d756c7469706c696572207065722079656172604082015260600190565b60208082526017908201527f696e76616c696420626f72726f772072617465206d6178000000000000000000604082015260600190565b602080825260119082015270696e76616c69642062617365207261746560781b604082015260600190565b93845260208401929092526040830152606082015260800190565b6000826200040d57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156200043957634e487b7160e01b81526011600452602481fd5b500290565b60805160a0516107556200047260003960008181610156015261017e01526000818161026b01526102ec01526107556000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063a385fb9611610066578063a385fb9614610111578063b816881614610119578063b9f9850a1461012c578063f14039de14610134578063fd2da3391461013c5761009e565b806315f24053146100a35780632037f3e7146100cc5780636e71e2d8146100e15780638726bb89146100f45780638da5cb5b146100fc575b600080fd5b6100b66100b13660046104f8565b610144565b6040516100c39190610677565b60405180910390f35b6100df6100da366004610523565b6101af565b005b6100b66100ef3660046104f8565b610295565b6100b66102d5565b6101046102db565b6040516100c39190610554565b6100b66102ea565b6100b6610127366004610523565b61030e565b6100b661038a565b6100b6610390565b6100b6610396565b60008061015285858561039c565b90507f00000000000000000000000000000000000000000000000000000000000000008111156101a5577f00000000000000000000000000000000000000000000000000000000000000009150506101a8565b90505b9392505050565b6000546001600160a01b031633146101e25760405162461bcd60e51b81526004016101d990610631565b60405180910390fd5b600084116102025760405162461bcd60e51b81526004016101d9906105fa565b600083116102225760405162461bcd60e51b81526004016101d99061058e565b600082116102425760405162461bcd60e51b81526004016101d9906105c5565b600081116102625760405162461bcd60e51b81526004016101d990610568565b61028f848484847f0000000000000000000000000000000000000000000000000000000000000000610467565b50505050565b6000826102a4575060006101a8565b816102af848661069b565b6102b991906106f2565b6102cb84670de0b6b3a76400006106d3565b6101a591906106b3565b60015481565b6000546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008061032383670de0b6b3a76400006106f2565b9050600061033287878761039c565b90506000670de0b6b3a764000061034984846106d3565b61035391906106b3565b9050670de0b6b3a76400008161036a8a8a8a610295565b61037491906106d3565b61037e91906106b3565b98975050505050505050565b60035481565b60025481565b60045481565b6000806103aa858585610295565b905060045481116103eb57600254670de0b6b3a7640000600154836103cf91906106d3565b6103d991906106b3565b6103e3919061069b565b9150506101a8565b6000600254670de0b6b3a764000060015460045461040991906106d3565b61041391906106b3565b61041d919061069b565b905060006004548361042f91906106f2565b905081670de0b6b3a76400006003548361044991906106d3565b61045391906106b3565b61045d919061069b565b93505050506101a8565b61047181866106b3565b60025561047e82826106d3565b61049085670de0b6b3a76400006106d3565b61049a91906106b3565b6001556104a781846106b3565b600381905560048390556002546001546040517f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d936104e99392918790610680565b60405180910390a15050505050565b60008060006060848603121561050c578283fd5b505081359360208301359350604090920135919050565b60008060008060808587031215610538578081fd5b5050823594602084013594506040840135936060013592509050565b6001600160a01b0391909116815260200190565b6020808252600c908201526b696e76616c6964206b696e6b60a01b604082015260600190565b6020808252601b908201527f696e76616c6964206d756c7469706c6965722070657220796561720000000000604082015260600190565b6020808252818101527f696e76616c6964206a756d70206d756c7469706c696572207065722079656172604082015260600190565b60208082526011908201527f696e76616c696420626173652072617465000000000000000000000000000000604082015260600190565b60208082526026908201527f6f6e6c7920746865206f776e6572206d61792063616c6c20746869732066756e60408201526531ba34b7b71760d11b606082015260800190565b90815260200190565b93845260208401929092526040830152606082015260800190565b600082198211156106ae576106ae610709565b500190565b6000826106ce57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156106ed576106ed610709565b500290565b60008282101561070457610704610709565b500390565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220c95f83be8fa657394176f6a2bba046d2991c3c282628b1836630ee29777e30b464736f6c63430008010033a264697066735822122057a75c884545498bbf89efe36055f7d083e6429aa0277eba0e51c898537af67f64736f6c63430008010033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createIR((uint256,uint256,uint256,uint256,uint256,uint256),address)": {
        "details": "create interest rate model"
      },
      "createLendingPairWithProxy((string,string,address,address,address),(uint256,uint256,uint256),(address,uint256,uint256,uint256,uint256,address))": {
        "details": "create lending pair with clones"
      },
      "disableIR(address)": {
        "details": "disable interest rate model"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "pause()": {
        "notice": "pause"
      },
      "unpause()": {
        "notice": "unpause"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 306,
        "contract": "contracts/LendingPairFactory.sol:LendingPairFactory",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5614,
        "contract": "contracts/LendingPairFactory.sol:LendingPairFactory",
        "label": "lendingPairImplementation",
        "offset": 1,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5616,
        "contract": "contracts/LendingPairFactory.sol:LendingPairFactory",
        "label": "collateralWrapperImplementation",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5618,
        "contract": "contracts/LendingPairFactory.sol:LendingPairFactory",
        "label": "debtTokenImplementation",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 5620,
        "contract": "contracts/LendingPairFactory.sol:LendingPairFactory",
        "label": "borrowAssetWrapperImplementation",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 5622,
        "contract": "contracts/LendingPairFactory.sol:LendingPairFactory",
        "label": "rewardDistributionManager",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 5625,
        "contract": "contracts/LendingPairFactory.sol:LendingPairFactory",
        "label": "allPairs",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5629,
        "contract": "contracts/LendingPairFactory.sol:LendingPairFactory",
        "label": "validInterestRateModels",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}