{
  "address": "0x0dB7f23cAC620730f639D28b251aED91e9c4caB4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "OwnershipAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "StableTokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newTeam",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TransferControl",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IOracle",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "UpdateOracle",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "addStable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetToOracle",
      "outputs": [
        {
          "internalType": "contract IOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getPriceInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "getPriceInUSDMultiple",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "removeOracleForAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "_asset",
          "type": "address[]"
        },
        {
          "internalType": "contract IOracle[]",
          "name": "_oracle",
          "type": "address[]"
        }
      ],
      "name": "setOracleForAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stableTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferToNewOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "args": [
    "0x90F706114CCA699A59196414a14644446A580D96"
  ],
  "solcInputHash": "d8f710d108043478052b140f0bad2611",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OwnershipAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StableTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newTeam\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TransferControl\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IOracle\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"UpdateOracle\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"addStable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetToOracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getPriceInUSDMultiple\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"removeOracleForAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"_asset\",\"type\":\"address[]\"},{\"internalType\":\"contract IOracle[]\",\"name\":\"_oracle\",\"type\":\"address[]\"}],\"name\":\"setOracleForAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stableTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferToNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"@samparsky\",\"kind\":\"dev\",\"methods\":{\"getPriceInUSD(address)\":{\"params\":{\"_token\":\"token to fetch price\"}},\"setOracleForAsset(address[],address[])\":{\"params\":{\"_asset\":\"the oracle for the asset\",\"_oracle\":\"the oracle address\"}},\"transferToNewOwner(address)\":{\"params\":{\"_newOwner\":\"The new team\"}}},\"stateVariables\":{\"newOwner\":{\"details\":\"new owner\"},\"owner\":{\"details\":\"admin allowed to update price oracle\"}},\"title\":\"PriceOracleAggregator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"accept transfer of control\"},\"addStable(address[])\":{\"notice\":\"addStable use to add stablecoin asset that should be hardcoded\"},\"assetToOracle(address)\":{\"notice\":\"token to the oracle address\"},\"getPriceInUSD(address)\":{\"notice\":\"returns price of token in USD in 1e8 decimals\"},\"removeOracleForAsset(address)\":{\"notice\":\"remove oracle\"},\"setOracleForAsset(address[],address[])\":{\"notice\":\"adds oracle for an asset e.g. ETH\"},\"stableTokens(address)\":{\"notice\":\"stable to is stable status\"},\"transferToNewOwner(address)\":{\"notice\":\"Transfer control from current owner address to another\"}},\"notice\":\"aggregator of price oracle for assets in LendingPairs\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/PriceOracleAggregator.sol\":\"PriceOracleAggregator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9abb3184c06afb50807598533c4c0943dd864080d310ac28cbb5b2cfae6a18b1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\ninterface IOracle {\\n    /// @notice Price update event\\n    /// @param asset the asset\\n    /// @param newPrice price of the asset\\n    event PriceUpdated(address asset, uint256 newPrice);\\n\\n    /// @dev returns latest answer\\n    function latestAnswer() external view returns (int256);\\n}\\n\",\"keccak256\":\"0x28eea16f99e07c31d30e3bee3df4491c2e04ca9edbd235fd93903e8c5a21f01b\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceOracleAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\n\\ninterface IPriceOracleAggregator {\\n    event UpdateOracle(IERC20 token, IOracle oracle);\\n\\n    function getPriceInUSD(IERC20 _token) external view returns (uint256);\\n\\n    function getPriceInUSDMultiple(IERC20[] calldata _tokens)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function setOracleForAsset(IERC20[] calldata _asset, IOracle[] calldata _oracle) external;\\n\\n    event OwnershipAccepted(address newOwner, uint256 timestamp);\\n    event TransferControl(address _newTeam, uint256 timestamp);\\n    event StableTokenAdded(IERC20 _token, uint256 timestamp);\\n}\\n\",\"keccak256\":\"0xee8b12a38e513badf81f26e3ff225cf28c1d6f1b731f61b67fcb3a12f49b8bb9\",\"license\":\"MIT\"},\"contracts/oracle/PriceOracleAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {UUPSProxiable} from \\\"../upgradability/UUPSProxiable.sol\\\";\\nimport \\\"../interfaces/IPriceOracleAggregator.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\n\\n////////////////////////////////////////////////////////////////////////////////////////////\\n/// @title PriceOracleAggregator\\n/// @author @samparsky\\n/// @notice aggregator of price oracle for assets in LendingPairs\\n////////////////////////////////////////////////////////////////////////////////////////////\\n\\ncontract PriceOracleAggregator is IPriceOracleAggregator {\\n    /// STATE VARIABLES ////\\n\\n    /// @dev admin allowed to update price oracle\\n    address public owner;\\n\\n    /// @dev new owner\\n    address internal newOwner;\\n\\n    /// @notice token to the oracle address\\n    mapping(IERC20 => IOracle) public assetToOracle;\\n\\n    /// @notice stable to is stable status\\n    mapping(IERC20 => bool) public stableTokens;\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"ONLY_OWNER\\\");\\n        _;\\n    }\\n\\n    constructor(address _owner) {\\n        require(_owner != address(0), \\\"INVALID_OWNER\\\");\\n        owner = _owner;\\n    }\\n\\n    /// @notice adds oracle for an asset e.g. ETH\\n    /// @param _asset the oracle for the asset\\n    /// @param _oracle the oracle address\\n    function setOracleForAsset(IERC20[] calldata _asset, IOracle[] calldata _oracle)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        require(_asset.length == _oracle.length, \\\"INV\\\");\\n        uint256 size = _asset.length;\\n\\n        for (uint256 i = 0; i < size; i++) {\\n            IOracle oracle = _oracle[i];\\n            require(address(oracle) != address(0), \\\"INVALID_ORACLE\\\");\\n            assetToOracle[_asset[i]] = oracle;\\n            emit UpdateOracle(_asset[i], oracle);\\n        }\\n    }\\n\\n    /// @notice remove oracle\\n    function removeOracleForAsset(IERC20 _asset) external onlyOwner {\\n        assetToOracle[_asset] = IOracle(address(0));\\n        emit UpdateOracle(_asset, IOracle(address(0)));\\n    }\\n\\n    /// @notice addStable use to add stablecoin asset that should be hardcoded\\n    function addStable(IERC20[] calldata _tokens) public onlyOwner {\\n        uint256 size = _tokens.length;\\n        for (uint256 i = 0; i < size; i++) {\\n            stableTokens[_tokens[i]] = true;\\n            emit StableTokenAdded(_tokens[i], block.timestamp);\\n        }\\n    }\\n\\n    /// @notice returns price of token in USD in 1e8 decimals\\n    /// @param _token token to fetch price\\n    function getPriceInUSD(IERC20 _token) public view override returns (uint256 price) {\\n        IOracle oracle = assetToOracle[_token];\\n\\n        if (address(oracle) != address(0)) {\\n            price = uint256(assetToOracle[_token].latestAnswer());\\n        } else if (stableTokens[_token] == true) {\\n            price = 1e8;\\n        }\\n\\n        require(price > 0, \\\"INVALID_PRICE\\\");\\n    }\\n\\n    function getPriceInUSDMultiple(IERC20[] calldata _tokens)\\n        external\\n        view\\n        override\\n        returns (uint256[] memory prices)\\n    {\\n        uint256 size = _tokens.length;\\n        for (uint256 i = 0; i < size; i++) {\\n            prices[i] = getPriceInUSD(_tokens[i]);\\n        }\\n    }\\n\\n    /// @notice accept transfer of control\\n    function acceptOwnership() external {\\n        require(msg.sender == newOwner, \\\"invalid owner\\\");\\n        owner = newOwner;\\n        newOwner = address(0);\\n        emit OwnershipAccepted(newOwner, block.timestamp);\\n    }\\n\\n    /// @notice Transfer control from current owner address to another\\n    /// @param _newOwner The new team\\n    function transferToNewOwner(address _newOwner) external onlyOwner {\\n        require(_newOwner != address(0), \\\"INVALID_NEW_OWNER\\\");\\n        newOwner = _newOwner;\\n        emit TransferControl(_newOwner, block.timestamp);\\n    }\\n}\",\"keccak256\":\"0x4ff3c60397b3327b62dfe66e8731137c22ebce6b95e086b5a38b1c0c64aa564a\",\"license\":\"MIT\"},\"contracts/upgradability/UUPSProxiable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\nimport {UUPSUtils} from \\\"./UUPSUtils.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev UUPS (Universal Upgradeable Proxy Standard) Proxiable contract.\\n */\\nabstract contract UUPSProxiable is Initializable {\\n    /**\\n     * @dev Get current implementation code address.\\n     */\\n    function getCodeAddress() public view returns (address codeAddress) {\\n        return UUPSUtils.implementation();\\n    }\\n\\n    function updateCode(address newAddress) external virtual;\\n\\n    /**\\n     * @dev Proxiable UUID marker function.\\n     *      This would help to avoid wrong logic contract to be used for upgrading.\\n     */\\n    function proxiableUUID() public view virtual returns (bytes32);\\n\\n    /**\\n     * @dev Update code address function.\\n     *      It is internal, so the derived contract could setup its own permission logic.\\n     */\\n    function _updateCodeAddress(address newAddress) internal {\\n        require(UUPSUtils.implementation() != address(0), \\\"UUPSProxiable: not upgradable\\\");\\n        require(\\n            proxiableUUID() == UUPSProxiable(newAddress).proxiableUUID(),\\n            \\\"UUPSProxiable: not compatible logic\\\"\\n        );\\n        UUPSUtils.setImplementation(newAddress);\\n        emit CodeUpdated(proxiableUUID(), newAddress);\\n    }\\n\\n    event CodeUpdated(bytes32 uuid, address codeAddress);\\n}\\n\",\"keccak256\":\"0xd569c1730923697f98cd3d4d74d21749d14ff6bea8b763fcb98343a17a43f535\",\"license\":\"MIT\"},\"contracts/upgradability/UUPSUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\n/**\\n * @title UUPS (Universal Upgradeable Proxy Standard) Shared Library\\n */\\nlibrary UUPSUtils {\\n    /**\\n     * @dev Implementation slot constant.\\n     * Using https://eips.ethereum.org/EIPS/eip-1967 standard\\n     * Storage slot 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\\n     * (obtained as bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1)).\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /// @dev Get implementation address.\\n    function implementation() internal view returns (address impl) {\\n        assembly {\\n            // solium-disable-line\\n            impl := sload(_IMPLEMENTATION_SLOT)\\n        }\\n    }\\n\\n    /// @dev Set new implementation address.\\n    function setImplementation(address codeAddress) internal {\\n        assembly {\\n            // solium-disable-line\\n            sstore(_IMPLEMENTATION_SLOT, codeAddress)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x125441f574989269c1e471e61085d33d064903e006f8b29e81eba2b79e2be1da\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610c01380380610c0183398101604081905261002f91610083565b6001600160a01b03811661005e5760405162461bcd60e51b8152600401610055906100b1565b60405180910390fd5b600080546001600160a01b0319166001600160a01b03929092169190911790556100d8565b600060208284031215610094578081fd5b81516001600160a01b03811681146100aa578182fd5b9392505050565b6020808252600d908201526c24a72b20a624a22fa7aba722a960991b604082015260600190565b610b1a806100e76000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80637372e9be116100665780637372e9be1461014157806379ba5097146101545780638da5cb5b1461015c5780639080ddb114610164578063cafa0fd3146101775761009e565b806302266147146100a357806304fb0b56146100cc5780630dc3d0c8146100e15780632e00d2451461010157806342b60b0314610121575b600080fd5b6100b66100b1366004610825565b61018a565b6040516100c39190610a9c565b60405180910390f35b6100df6100da366004610888565b61029a565b005b6100f46100ef366004610848565b610441565b6040516100c39190610936565b61011461010f366004610825565b6104cc565b6040516100c39190610909565b61013461012f366004610825565b6104e7565b6040516100c3919061097a565b6100df61014f366004610825565b6104fc565b6100df6105a4565b61011461062f565b6100df610172366004610825565b61063e565b6100df610185366004610848565b6106be565b6001600160a01b03808216600090815260026020526040812054909116801561023d576001600160a01b038084166000908152600260209081526040918290205482516350d25bcd60e01b815292519316926350d25bcd926004808201939291829003018186803b1580156101fe57600080fd5b505afa158015610212573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023691906108f1565b915061026b565b6001600160a01b03831660009081526003602052604090205460ff1615156001141561026b576305f5e10091505b600082116102945760405162461bcd60e51b815260040161028b9061099f565b60405180910390fd5b50919050565b6000546001600160a01b031633146102c45760405162461bcd60e51b815260040161028b90610a78565b8281146102e35760405162461bcd60e51b815260040161028b90610a5b565b8260005b8181101561043957600084848381811061031157634e487b7160e01b600052603260045260246000fd5b90506020020160208101906103269190610825565b90506001600160a01b03811661034e5760405162461bcd60e51b815260040161028b90610a24565b806002600089898681811061037357634e487b7160e01b600052603260045260246000fd5b90506020020160208101906103889190610825565b6001600160a01b039081168252602082019290925260400160002080546001600160a01b031916929091169190911790557fb1d1442dba579887e297ac433e5716c847abf2dc052ee9de4869b7b1b8f6206d8787848181106103fa57634e487b7160e01b600052603260045260246000fd5b905060200201602081019061040f9190610825565b8260405161041e929190610985565b60405180910390a1508061043181610aa5565b9150506102e7565b505050505050565b60608160005b818110156104c45761048785858381811061047257634e487b7160e01b600052603260045260246000fd5b90506020020160208101906100b19190610825565b8382815181106104a757634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806104bc81610aa5565b915050610447565b505092915050565b6002602052600090815260409020546001600160a01b031681565b60036020526000908152604090205460ff1681565b6000546001600160a01b031633146105265760405162461bcd60e51b815260040161028b90610a78565b6001600160a01b03811661054c5760405162461bcd60e51b815260040161028b906109c6565b600180546001600160a01b0319166001600160a01b0383161790556040517f75ec58ed4c3b4778d64c8fb2682d99b9844d486931205289f0c8e9951eaab83290610599908390429061091d565b60405180910390a150565b6001546001600160a01b031633146105ce5760405162461bcd60e51b815260040161028b906109fd565b60018054600080546001600160a01b03199081166001600160a01b0384161782559091169091556040517f56a56c31bb3f318488e30872a32d64e9e9092a6a23043f6d9e9d71b2545e71729161062591429061091d565b60405180910390a1565b6000546001600160a01b031681565b6000546001600160a01b031633146106685760405162461bcd60e51b815260040161028b90610a78565b6001600160a01b03811660009081526002602052604080822080546001600160a01b0319169055517fb1d1442dba579887e297ac433e5716c847abf2dc052ee9de4869b7b1b8f6206d9161059991849190610985565b6000546001600160a01b031633146106e85760405162461bcd60e51b815260040161028b90610a78565b8060005b818110156107d65760016003600086868581811061071a57634e487b7160e01b600052603260045260246000fd5b905060200201602081019061072f9190610825565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790557f09ab69151375e37d84ca1c288831fa9670a177da7f4e87216be1e2f12297f9ce84848381811061079857634e487b7160e01b600052603260045260246000fd5b90506020020160208101906107ad9190610825565b426040516107bc92919061091d565b60405180910390a1806107ce81610aa5565b9150506106ec565b50505050565b60008083601f8401126107ed578182fd5b50813567ffffffffffffffff811115610804578182fd5b602083019150836020808302850101111561081e57600080fd5b9250929050565b600060208284031215610836578081fd5b813561084181610acc565b9392505050565b6000806020838503121561085a578081fd5b823567ffffffffffffffff811115610870578182fd5b61087c858286016107dc565b90969095509350505050565b6000806000806040858703121561089d578182fd5b843567ffffffffffffffff808211156108b4578384fd5b6108c0888389016107dc565b909650945060208701359150808211156108d8578384fd5b506108e5878288016107dc565b95989497509550505050565b600060208284031215610902578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b8181101561096e57835183529284019291840191600101610952565b50909695505050505050565b901515815260200190565b6001600160a01b0392831681529116602082015260400190565b6020808252600d908201526c494e56414c49445f505249434560981b604082015260600190565b60208082526011908201527f494e56414c49445f4e45575f4f574e4552000000000000000000000000000000604082015260600190565b6020808252600d908201526c34b73b30b634b21037bbb732b960991b604082015260600190565b6020808252600e908201527f494e56414c49445f4f5241434c45000000000000000000000000000000000000604082015260600190565b60208082526003908201526224a72b60e91b604082015260600190565b6020808252600a908201526927a7262cafa7aba722a960b11b604082015260600190565b90815260200190565b6000600019821415610ac557634e487b7160e01b81526011600452602481fd5b5060010190565b6001600160a01b0381168114610ae157600080fd5b5056fea264697066735822122032191cacf19cf58c47f7f1363ce1c111c6946f6b4a2d2205e0d2710f5c73090964736f6c63430008010033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80637372e9be116100665780637372e9be1461014157806379ba5097146101545780638da5cb5b1461015c5780639080ddb114610164578063cafa0fd3146101775761009e565b806302266147146100a357806304fb0b56146100cc5780630dc3d0c8146100e15780632e00d2451461010157806342b60b0314610121575b600080fd5b6100b66100b1366004610825565b61018a565b6040516100c39190610a9c565b60405180910390f35b6100df6100da366004610888565b61029a565b005b6100f46100ef366004610848565b610441565b6040516100c39190610936565b61011461010f366004610825565b6104cc565b6040516100c39190610909565b61013461012f366004610825565b6104e7565b6040516100c3919061097a565b6100df61014f366004610825565b6104fc565b6100df6105a4565b61011461062f565b6100df610172366004610825565b61063e565b6100df610185366004610848565b6106be565b6001600160a01b03808216600090815260026020526040812054909116801561023d576001600160a01b038084166000908152600260209081526040918290205482516350d25bcd60e01b815292519316926350d25bcd926004808201939291829003018186803b1580156101fe57600080fd5b505afa158015610212573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023691906108f1565b915061026b565b6001600160a01b03831660009081526003602052604090205460ff1615156001141561026b576305f5e10091505b600082116102945760405162461bcd60e51b815260040161028b9061099f565b60405180910390fd5b50919050565b6000546001600160a01b031633146102c45760405162461bcd60e51b815260040161028b90610a78565b8281146102e35760405162461bcd60e51b815260040161028b90610a5b565b8260005b8181101561043957600084848381811061031157634e487b7160e01b600052603260045260246000fd5b90506020020160208101906103269190610825565b90506001600160a01b03811661034e5760405162461bcd60e51b815260040161028b90610a24565b806002600089898681811061037357634e487b7160e01b600052603260045260246000fd5b90506020020160208101906103889190610825565b6001600160a01b039081168252602082019290925260400160002080546001600160a01b031916929091169190911790557fb1d1442dba579887e297ac433e5716c847abf2dc052ee9de4869b7b1b8f6206d8787848181106103fa57634e487b7160e01b600052603260045260246000fd5b905060200201602081019061040f9190610825565b8260405161041e929190610985565b60405180910390a1508061043181610aa5565b9150506102e7565b505050505050565b60608160005b818110156104c45761048785858381811061047257634e487b7160e01b600052603260045260246000fd5b90506020020160208101906100b19190610825565b8382815181106104a757634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806104bc81610aa5565b915050610447565b505092915050565b6002602052600090815260409020546001600160a01b031681565b60036020526000908152604090205460ff1681565b6000546001600160a01b031633146105265760405162461bcd60e51b815260040161028b90610a78565b6001600160a01b03811661054c5760405162461bcd60e51b815260040161028b906109c6565b600180546001600160a01b0319166001600160a01b0383161790556040517f75ec58ed4c3b4778d64c8fb2682d99b9844d486931205289f0c8e9951eaab83290610599908390429061091d565b60405180910390a150565b6001546001600160a01b031633146105ce5760405162461bcd60e51b815260040161028b906109fd565b60018054600080546001600160a01b03199081166001600160a01b0384161782559091169091556040517f56a56c31bb3f318488e30872a32d64e9e9092a6a23043f6d9e9d71b2545e71729161062591429061091d565b60405180910390a1565b6000546001600160a01b031681565b6000546001600160a01b031633146106685760405162461bcd60e51b815260040161028b90610a78565b6001600160a01b03811660009081526002602052604080822080546001600160a01b0319169055517fb1d1442dba579887e297ac433e5716c847abf2dc052ee9de4869b7b1b8f6206d9161059991849190610985565b6000546001600160a01b031633146106e85760405162461bcd60e51b815260040161028b90610a78565b8060005b818110156107d65760016003600086868581811061071a57634e487b7160e01b600052603260045260246000fd5b905060200201602081019061072f9190610825565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790557f09ab69151375e37d84ca1c288831fa9670a177da7f4e87216be1e2f12297f9ce84848381811061079857634e487b7160e01b600052603260045260246000fd5b90506020020160208101906107ad9190610825565b426040516107bc92919061091d565b60405180910390a1806107ce81610aa5565b9150506106ec565b50505050565b60008083601f8401126107ed578182fd5b50813567ffffffffffffffff811115610804578182fd5b602083019150836020808302850101111561081e57600080fd5b9250929050565b600060208284031215610836578081fd5b813561084181610acc565b9392505050565b6000806020838503121561085a578081fd5b823567ffffffffffffffff811115610870578182fd5b61087c858286016107dc565b90969095509350505050565b6000806000806040858703121561089d578182fd5b843567ffffffffffffffff808211156108b4578384fd5b6108c0888389016107dc565b909650945060208701359150808211156108d8578384fd5b506108e5878288016107dc565b95989497509550505050565b600060208284031215610902578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b8181101561096e57835183529284019291840191600101610952565b50909695505050505050565b901515815260200190565b6001600160a01b0392831681529116602082015260400190565b6020808252600d908201526c494e56414c49445f505249434560981b604082015260600190565b60208082526011908201527f494e56414c49445f4e45575f4f574e4552000000000000000000000000000000604082015260600190565b6020808252600d908201526c34b73b30b634b21037bbb732b960991b604082015260600190565b6020808252600e908201527f494e56414c49445f4f5241434c45000000000000000000000000000000000000604082015260600190565b60208082526003908201526224a72b60e91b604082015260600190565b6020808252600a908201526927a7262cafa7aba722a960b11b604082015260600190565b90815260200190565b6000600019821415610ac557634e487b7160e01b81526011600452602481fd5b5060010190565b6001600160a01b0381168114610ae157600080fd5b5056fea264697066735822122032191cacf19cf58c47f7f1363ce1c111c6946f6b4a2d2205e0d2710f5c73090964736f6c63430008010033",
  "devdoc": {
    "author": "@samparsky",
    "kind": "dev",
    "methods": {
      "getPriceInUSD(address)": {
        "params": {
          "_token": "token to fetch price"
        }
      },
      "setOracleForAsset(address[],address[])": {
        "params": {
          "_asset": "the oracle for the asset",
          "_oracle": "the oracle address"
        }
      },
      "transferToNewOwner(address)": {
        "params": {
          "_newOwner": "The new team"
        }
      }
    },
    "stateVariables": {
      "newOwner": {
        "details": "new owner"
      },
      "owner": {
        "details": "admin allowed to update price oracle"
      }
    },
    "title": "PriceOracleAggregator",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "accept transfer of control"
      },
      "addStable(address[])": {
        "notice": "addStable use to add stablecoin asset that should be hardcoded"
      },
      "assetToOracle(address)": {
        "notice": "token to the oracle address"
      },
      "getPriceInUSD(address)": {
        "notice": "returns price of token in USD in 1e8 decimals"
      },
      "removeOracleForAsset(address)": {
        "notice": "remove oracle"
      },
      "setOracleForAsset(address[],address[])": {
        "notice": "adds oracle for an asset e.g. ETH"
      },
      "stableTokens(address)": {
        "notice": "stable to is stable status"
      },
      "transferToNewOwner(address)": {
        "notice": "Transfer control from current owner address to another"
      }
    },
    "notice": "aggregator of price oracle for assets in LendingPairs",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9791,
        "contract": "contracts/oracle/PriceOracleAggregator.sol:PriceOracleAggregator",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9794,
        "contract": "contracts/oracle/PriceOracleAggregator.sol:PriceOracleAggregator",
        "label": "newOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9801,
        "contract": "contracts/oracle/PriceOracleAggregator.sol:PriceOracleAggregator",
        "label": "assetToOracle",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_contract(IERC20)849,t_contract(IOracle)9397)"
      },
      {
        "astId": 9807,
        "contract": "contracts/oracle/PriceOracleAggregator.sol:PriceOracleAggregator",
        "label": "stableTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_contract(IERC20)849,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)849": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IOracle)9397": {
        "encoding": "inplace",
        "label": "contract IOracle",
        "numberOfBytes": "20"
      },
      "t_mapping(t_contract(IERC20)849,t_bool)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)849",
        "label": "mapping(contract IERC20 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_contract(IERC20)849,t_contract(IOracle)9397)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)849",
        "label": "mapping(contract IERC20 => contract IOracle)",
        "numberOfBytes": "32",
        "value": "t_contract(IOracle)9397"
      }
    }
  }
}