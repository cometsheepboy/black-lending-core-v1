{
  "address": "0xDA3fbD509154927Fc8969F85aF73019E7C3daB46",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "DelegateBorrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "borrowAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "delegateBorrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "delegateBorrowWithSignedMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "increaseTotalDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "__owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_tokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_tokenSymbol",
          "type": "string"
        },
        {
          "internalType": "contract IRewardDistributorManager",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_debtOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "principal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardManager",
      "outputs": [
        {
          "internalType": "contract IRewardDistributorManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlying",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userBorrowAllowanceNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "args": [],
  "solcInputHash": "d8f710d108043478052b140f0bad2611",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DelegateBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"borrowAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"delegateBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBorrowWithSignedMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseTotalDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"contract IRewardDistributorManager\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_debtOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"principal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardManager\",\"outputs\":[{\"internalType\":\"contract IRewardDistributorManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBorrowAllowanceNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"@samparsky\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"See {IERC20Permit-DOMAIN_SEPARATOR}.\"},\"balanceOf(address)\":{\"details\":\"calculates the debt balance of account\"},\"burn(address,uint256)\":{\"params\":{\"_amount\":\"is the amount of token to be burnt*\",\"_from\":\"is the address where the tokens will be burnt\"}},\"increaseTotalDebt(uint256)\":{\"params\":{\"_amount\":\"is the amount to increase\"}},\"mint(address,address,uint256)\":{\"details\":\"mint debt tokens to the debtOwner address\",\"params\":{\"_amount\":\"the amount of debt tokens to mint\",\"_debtOwner\":\"the address to mint the debt tokens to\",\"_to\":\"the address requesting the debt, when (_to != _debtOwner) debtOwner must have  delegated some borrow allowance to the _to address\"}},\"nonces(address)\":{\"details\":\"See {IERC20Permit-nonces}.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"}},\"stateVariables\":{\"VERSION\":{\"details\":\"debt token version\"},\"_DEBT_BORROW_DELEGATE_SIGNATURE_TYPE_HASH\":{\"details\":\"debt token delegate borrow message digest\"},\"_borrowAllowances\":{\"details\":\"user delegated borrow allowances\"},\"isDebtToken\":{\"details\":\"for introspection\"}},\"title\":\"DebtToken\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(address,uint256)\":{\"notice\":\"burn is an only owner function that allows the owner to burn  tokens from an input account\"},\"increaseTotalDebt(uint256)\":{\"notice\":\"used to increase the debt of the system\"},\"initialize(address,address,string,string,address)\":{\"notice\":\"initialize\"},\"userBorrowAllowanceNonce(address)\":{\"notice\":\"mapping of user to approval nonce\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DebtToken.sol\":\"DebtToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x44300341eb97e8790e56e0823e8c3d09695fc2ee80555a83a9585f307381f324\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x752ac2a89da774de5c98f8ca1adcad306ce00d0ebb547ad7be8ba7e95468aa73\",\"license\":\"MIT\"},\"contracts/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport \\\"./interfaces/IInterestRateModel.sol\\\";\\nimport \\\"./interfaces/IBSWrapperToken.sol\\\";\\nimport \\\"./interfaces/IDebtToken.sol\\\";\\n\\n////////////////////////////////////////////////////////////////////////////////////////////\\n/// @title DataTypes\\n/// @author @samparsky\\n////////////////////////////////////////////////////////////////////////////////////////////\\n\\nlibrary DataTypes {\\n    struct BorrowAssetConfig {\\n        uint256 initialExchangeRateMantissa;\\n        uint256 reserveFactorMantissa;\\n        uint256 collateralFactor;\\n        IBSWrapperToken wrappedBorrowAsset;\\n        uint256 liquidationFee;\\n        IDebtToken debtToken;\\n    }\\n\\n    function validBorrowAssetConfig(BorrowAssetConfig memory self, address _owner) internal view {\\n        require(self.initialExchangeRateMantissa > 0, \\\"E\\\");\\n        require(self.reserveFactorMantissa > 0, \\\"F\\\");\\n        require(self.collateralFactor > 0, \\\"C\\\");\\n        require(self.liquidationFee > 0, \\\"L\\\");\\n        require(address(self.wrappedBorrowAsset) != address(0), \\\"B\\\");\\n        require(address(self.debtToken) != address(0), \\\"IB\\\");\\n        require(self.wrappedBorrowAsset.owner() == _owner, \\\"IW\\\");\\n        require(self.debtToken.owner() == _owner, \\\"IVW\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xd1864e62a3b1c4ccdd74371dd42742ddbdad9495e534824b6b876a9b7a63cf56\",\"license\":\"MIT\"},\"contracts/DebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\nimport {WrapperTokenBase} from \\\"./WrapperToken.sol\\\";\\nimport \\\"./interfaces/IBSLendingPair.sol\\\";\\nimport \\\"./interfaces/IDebtToken.sol\\\";\\nimport \\\"./token/ERC20Permit.sol\\\";\\nimport \\\"./token/IERC20Details.sol\\\";\\n\\n////////////////////////////////////////////////////////////////////////////////////////////\\n/// @title DebtToken\\n/// @author @samparsky\\n////////////////////////////////////////////////////////////////////////////////////////////\\n\\ncontract DebtToken is IDebtToken, WrapperTokenBase {\\n    /// @dev debt token version\\n    uint256 constant public VERSION = 0x1;\\n\\n    /// @dev for introspection\\n    bool constant isDebtToken = true;\\n\\n    /// @dev debt token delegate borrow message digest\\n    bytes32 internal constant _DEBT_BORROW_DELEGATE_SIGNATURE_TYPE_HASH =\\n        keccak256(\\n            \\\"BorrowDelegate(bytes32 warning,address from,address to,uint amount,uint256 nonce)\\\"\\n        );\\n\\n    /// @dev user delegated borrow allowances\\n    mapping(address => mapping(address => uint256)) private _borrowAllowances;\\n\\n    /// @notice mapping of user to approval nonce\\n    mapping(address => uint256) public userBorrowAllowanceNonce;\\n\\n    /// @notice initialize\\n    function initialize(\\n        address __owner,\\n        address _underlying,\\n        string memory _tokenName,\\n        string memory _tokenSymbol,\\n        IRewardDistributorManager _manager\\n    ) external virtual override initializer {\\n        require(__owner != address(0), \\\"invalid owner\\\");\\n        require(_underlying != address(0), \\\"invalid underlying\\\");\\n\\n        _owner = __owner;\\n        uint8 underlyingDecimal = IERC20Details(_underlying).decimals();\\n        initializeERC20(_tokenName, _tokenSymbol, underlyingDecimal);\\n        initializeERC20Permit(_tokenName);\\n        underlying = _underlying;\\n        rewardManager = _manager;\\n    }\\n\\n    function principal(address _account) external view override returns (uint256) {\\n        return _balances[_account];\\n    }\\n\\n    /// @dev calculates the debt balance of account\\n    function balanceOf(address _account) public view override(IERC20, ERC20) returns (uint256) {\\n        return IBSLendingPair(_owner).borrowBalancePrior(_account);\\n    }\\n\\n    /// @dev mint debt tokens to the debtOwner address\\n    /// @param _debtOwner the address to mint the debt tokens to\\n    /// @param _to the address requesting the debt, when (_to != _debtOwner) debtOwner must have \\n    /// delegated some borrow allowance to the _to address\\n    /// @param _amount the amount of debt tokens to mint\\n    function mint(address _debtOwner, address _to, uint256 _amount) external override onlyLendingPair {\\n        require(_debtOwner != address(0), \\\"INVALID_DEBT_OWNER\\\");\\n        if(_debtOwner != _to) {\\n            _decreaseBorrowAllowance(_debtOwner, _to, _amount);\\n        }\\n        _rewardHook(address(0), _debtOwner);\\n        _mint(_debtOwner, _amount);\\n    }\\n\\n    function _mint(address _account, uint256 _amount) internal virtual override {\\n        require(_account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply += _amount;\\n        _balances[_account] = balanceOf(_account) + _amount;\\n        emit Transfer(address(0), _account, _amount);\\n    }\\n\\n\\n    function owner() external view override returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @notice burn is an only owner function that allows the owner to burn  tokens from an input account\\n     * @param _from is the address where the tokens will be burnt\\n     * @param _amount is the amount of token to be burnt\\n     **/\\n    function burn(address _from, uint256 _amount)\\n        external\\n        override(IBSWrapperTokenBase)\\n        onlyLendingPair\\n    {\\n        _rewardHook(_from, address(0));\\n        _balances[_from] = balanceOf(_from) - _amount;\\n        if (_amount > _totalSupply) {\\n            _totalSupply = 0;\\n        } else {\\n            _totalSupply -= _amount;\\n        }\\n    }\\n\\n    function borrowAllowance(address _from, address _to) external view returns(uint256) {\\n        return _borrowAllowances[_from][_to];\\n    }\\n\\n    function delegateBorrow(address _to, uint256 _amount) external {\\n        _delegateBorrowInternal(msg.sender, _to, _amount);\\n    }\\n\\n    function _delegateBorrowInternal(address _from, address _to, uint256 _amount) internal {\\n        require(_to != address(0), \\\"INVALID_TO\\\");\\n\\n        _borrowAllowances[_from][_to] = _amount;\\n        emit DelegateBorrow(_from, _to, _amount, block.timestamp);\\n    }\\n\\n    function delegateBorrowWithSignedMessage(\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(_to != address(0), \\\"INVALID_TO\\\");\\n\\n         bytes32 digest =\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    _domainSeparatorV4(),\\n                    keccak256(\\n                        abi.encode(\\n                            _DEBT_BORROW_DELEGATE_SIGNATURE_TYPE_HASH,\\n                            keccak256(\\n                                \\\"You are delegating borrow to user, read more here: https://warp.finance/delegate\\\"\\n                            ),\\n                            _from,\\n                            _to,\\n                            _amount,\\n                            userBorrowAllowanceNonce[_from]++\\n                        )\\n                    )\\n                )\\n            );\\n        \\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress == _from, \\\"INVALID_SIGNATURE\\\");\\n\\n        _delegateBorrowInternal(_from, _to, _amount);\\n    }\\n\\n    function _decreaseBorrowAllowance(address _from, address _to, uint256 _amount) internal {\\n        _borrowAllowances[_from][_to] =  _borrowAllowances[_from][_to] - _amount;\\n    }\\n    \\n    /// @notice used to increase the debt of the system\\n    /// @param _amount is the amount to increase\\n    function increaseTotalDebt(uint256 _amount) external override onlyLendingPair {\\n        _totalSupply = _totalSupply + _amount;\\n    }\\n\\n    function transfer(\\n        address, /*recipient*/\\n        uint256 /*amount*/\\n    ) public pure override(ERC20, IERC20) returns (bool) {\\n        revert(\\\"TRANSFER_NOT_SUPPORTED\\\");\\n    }\\n\\n    function approve(\\n        address, /*spender*/\\n        uint256 /*amount*/\\n    ) public virtual override(ERC20, IERC20) returns (bool) {\\n        revert(\\\"APPROVAL_NOT_SUPPORTED\\\");\\n    }\\n\\n    function allowance(\\n        address, /*owner*/\\n        address /*spender*/\\n    ) public view virtual override(ERC20, IERC20) returns (uint256) {\\n        revert(\\\"ALLOWANCE_NOT_SUPPORTED\\\");\\n    }\\n\\n    function transferFrom(\\n        address, /*sender*/\\n        address, /*recipient*/\\n        uint256 /*amount*/\\n    ) public virtual override(ERC20, IERC20) returns (bool) {\\n        revert(\\\"TRANSFER_NOT_SUPPORTED\\\");\\n    }\\n\\n    function increaseAllowance(\\n        address, /*spender*/\\n        uint256 /*addedValue*/\\n    ) public virtual override returns (bool) {\\n        revert(\\\"ALLOWANCE_NOT_SUPPORTED\\\");\\n    }\\n\\n    function decreaseAllowance(\\n        address, /*spender*/\\n        uint256 /*subtractedValue*/\\n    ) public virtual override returns (bool) {\\n        revert(\\\"ALLOWANCE_NOT_SUPPORTED\\\");\\n    }\\n\\n    function permit(\\n        address /* owner */,\\n        address /* spender */,\\n        uint256 /* amount */,\\n        uint256 /* deadline */,\\n        uint8 /* v */,\\n        bytes32 /* r */,\\n        bytes32 /* s */\\n    ) public virtual override {\\n        revert(\\\"PERMIT_NOT_SUPPORTED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5f428c79d49871d986bb8e0c0b2b7fad426962a42f7d6abb1af8e9b34d602f23\",\"license\":\"MIT\"},\"contracts/WrapperToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\nimport \\\"./token/ERC20Permit.sol\\\";\\nimport \\\"./interfaces/IRewardDistributorManager.sol\\\";\\nimport \\\"./interfaces/IBSLendingPair.sol\\\";\\nimport \\\"./interfaces/IBSWrapperToken.sol\\\";\\nimport \\\"./token/IERC20Details.sol\\\";\\nimport \\\"./util/Initializable.sol\\\";\\n\\n////////////////////////////////////////////////////////////////////////////////////////////\\n/// @title WrapperToken\\n/// @author @samparsky\\n/// @dev\\n///\\n////////////////////////////////////////////////////////////////////////////////////////////\\n\\n\\nabstract contract WrapperTokenBase is ERC20Permit, Initializable {\\n\\n    /// @dev reward distributor Manager\\n    IRewardDistributorManager public rewardManager;\\n\\n    /// @dev underlying wrapper token\\n    address public underlying;\\n\\n    /// @dev the LendingPair is the \\\"owner\\\" for WrapperTokens\\n    address internal _owner;\\n\\n\\n     /**\\n     * @dev Throws if called by any account other than the lendingpair.\\n     */\\n    modifier onlyLendingPair() {\\n        require(address(_owner) == msg.sender, \\\"ONLY_LENDING_PAIR\\\");\\n        _;\\n    }\\n\\n    function _rewardHook(address _from, address _to) internal {\\n        rewardManager.accumulateRewards(_from, _to);\\n    }\\n}\\n\\ncontract WrapperToken is  IBSWrapperToken, WrapperTokenBase {\\n    /// @dev wrapper token version\\n    uint256 constant public VERSION = 0x1;\\n\\n    /// @notice\\n    function initialize(\\n        address __owner,\\n        address _underlying,\\n        string memory _tokenName,\\n        string memory _tokenSymbol,\\n        IRewardDistributorManager _manager\\n    ) external virtual override initializer {\\n        require(__owner != address(0), \\\"invalid owner\\\");\\n        require(_underlying != address(0), \\\"invalid underlying\\\");\\n\\n        _owner = __owner;\\n        uint8 underlyingDecimal = IERC20Details(_underlying).decimals();\\n        initializeERC20(_tokenName, _tokenSymbol, underlyingDecimal);\\n        initializeERC20Permit(_tokenName);\\n        underlying = _underlying;\\n        rewardManager = _manager;\\n    }\\n\\n    /**\\n    @notice mint is an only owner function that allows the owner to mint new tokens to an input account\\n    @param _to is the address that will receive the new tokens\\n    @param _amount is the amount of token they will receive\\n    **/\\n    function mint(address _to, uint256 _amount) external virtual override onlyLendingPair {\\n        _rewardHook(address(0), _to);\\n        _mint(_to, _amount);\\n    }\\n\\n    /**\\n     * @notice burn is an only owner function that allows the owner to burn  tokens from an input account\\n     * @dev IMPORTANT: it reverts if user doesn't have enough balance\\n     * @param _from is the address where the tokens will be burnt\\n     * @param _amount is the amount of token to be burnt\\n     **/\\n    function burn(address _from, uint256 _amount) external virtual override onlyLendingPair {\\n        _rewardHook(_from, address(0));\\n        _burn(_from, _amount);\\n    }\\n\\n    function owner() external view override returns (address) {\\n        return _owner;\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual override {\\n        _rewardHook(sender, recipient);\\n        super._transfer(sender, recipient, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xa88eb5104c1b34e574beb5536810c1d1cca1134a3b278aff13c78aeb6154355e\",\"license\":\"MIT\"},\"contracts/interfaces/IBSLendingPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IPriceOracleAggregator.sol\\\";\\nimport \\\"./IBSWrapperToken.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\nimport \\\"./IBSVault.sol\\\";\\nimport \\\"../DataTypes.sol\\\";\\n\\ninterface IBSLendingPair {\\n    event Initialized(\\n        address indexed pair,\\n        address indexed asset,\\n        address indexed collateralAsset,\\n        address pauseGuardian\\n    );\\n\\n    /**\\n     * Emitted on deposit\\n     *\\n     * @param pair The pair being interacted with\\n     * @param asset The asset deposited in the pair\\n     * @param tokenReceipeint The user the receives the bsTokens\\n     * @param user The user that made the deposit\\n     * @param amount The amount deposited\\n     **/\\n    event Deposit(\\n        address indexed pair,\\n        address indexed asset,\\n        address indexed tokenReceipeint,\\n        address user,\\n        uint256 amount\\n    );\\n\\n    event Borrow(address indexed borrower, uint256 amount);\\n\\n    /**\\n     * Emitted on Redeem\\n     *\\n     * @param pair The pair being interacted with\\n     * @param asset The asset withdraw in the pair\\n     * @param user The user that's making the withdrawal\\n     * @param to The user the receives the withdrawn tokens\\n     * @param amount The amount being withdrawn\\n     **/\\n    event Redeem(\\n        address indexed pair,\\n        address indexed asset,\\n        address indexed user,\\n        address to,\\n        uint256 amount,\\n        uint256 amountofWrappedBurned\\n    );\\n\\n    event WithdrawCollateral(address account, uint256 amount);\\n\\n    event ReserveWithdraw(address user, uint256 shares);\\n\\n    /**\\n     * Emitted on repay\\n     *\\n     * @param pair The pair being interacted with\\n     * @param asset The asset repaid in the pair\\n     * @param beneficiary The user that's getting their debt reduced\\n     * @param repayer The user that's providing the funds\\n     * @param amount The amount being repaid\\n     **/\\n    event Repay(\\n        address indexed pair,\\n        address indexed asset,\\n        address indexed beneficiary,\\n        address repayer,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * Emitted on liquidation\\n     *\\n     * @param pair The pair being interacted with\\n     * @param asset The asset that getting liquidated\\n     * @param user The user that's getting liquidated\\n     * @param liquidatedCollateralAmount The of collateral transferred to the liquidator\\n     * @param liquidator The liquidator\\n     **/\\n    event Liquidate(\\n        address indexed pair,\\n        address indexed asset,\\n        address indexed user,\\n        uint256 liquidatedCollateralAmount,\\n        address liquidator\\n    );\\n\\n    /**\\n     * @dev Emitted on flashLoan\\n     * @param target The address of the flash loan receiver contract\\n     * @param initiator The address initiating the flash loan\\n     * @param asset The address of the asset being flash borrowed\\n     * @param amount The amount flash borrowed\\n     * @param premium The fee flash borrowed\\n     **/\\n    event FlashLoan(\\n        address indexed target,\\n        address indexed initiator,\\n        address indexed asset,\\n        uint256 amount,\\n        uint256 premium\\n    );\\n\\n    /**\\n     * @dev Emitted on interest accrued\\n     * @param accrualBlockNumber block number\\n     * @param borrowIndex borrow index\\n     * @param totalBorrows total borrows\\n     * @param totalReserves total reserves\\n     **/\\n    event InterestAccrued(\\n        address indexed pair,\\n        uint256 accrualBlockNumber,\\n        uint256 borrowIndex,\\n        uint256 totalBorrows,\\n        uint256 totalReserves\\n    );\\n\\n    event InterestShortCircuit(uint256 blockNumber);\\n\\n    event ActionPaused(uint8 action, uint256 timestamp);\\n    event ActionUnPaused(uint8 action, uint256 timestamp);\\n\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        IERC20 _asset,\\n        IERC20 _collateralAsset,\\n        DataTypes.BorrowAssetConfig calldata borrowConfig,\\n        IBSWrapperToken _wrappedCollateralAsset,\\n        IInterestRateModel _interestRate,\\n        address _pauseGuardian\\n    ) external;\\n\\n    function asset() external view returns (IERC20);\\n\\n    function depositBorrowAsset(address _tokenReceipeint, uint256 _amount) external;\\n\\n    function depositCollateral(address _tokenReceipeint, uint256 _vaultShareAmount) external;\\n\\n    function redeem(address _to, uint256 _amount) external;\\n\\n    function collateralOfAccount(address _account) external view returns (uint256);\\n\\n    function getMaxWithdrawAllowed(address account) external returns (uint256);\\n\\n    function oracle() external view returns (IPriceOracleAggregator);\\n\\n    function collateralAsset() external view returns (IERC20);\\n\\n    function calcBorrowLimit(uint256 amount) external view returns (uint256);\\n\\n    function accountInterestIndex(address) external view returns (uint256);\\n\\n    function borrowIndex() external view returns (uint256);\\n\\n    function debtToken() external view returns (IDebtToken);\\n\\n    function borrowBalancePrior(address _account) external view returns (uint256);\\n\\n    function wrapperBorrowedAsset() external view returns (IBSWrapperToken);\\n\\n    function wrappedCollateralAsset() external view returns (IBSWrapperToken);\\n\\n    function totalReserves() external view returns (uint256);\\n\\n    function withdrawFees(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xdad72f619915bc1af119ca59398ad1c7247c71cd503e004f55b7056e63928b41\",\"license\":\"MIT\"},\"contracts/interfaces/IBSVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IERC3156FlashLender.sol\\\";\\n\\ninterface IBSVault is IERC3156FlashLender {\\n    // ************** //\\n    // *** EVENTS *** //\\n    // ************** //\\n\\n    /// @notice Emitted on deposit\\n    /// @param token being deposited\\n    /// @param from address making the depsoit\\n    /// @param to address to credit the tokens being deposited\\n    /// @param amount being deposited\\n    /// @param shares the represent the amount deposited in the vault\\n    event Deposit(\\n        IERC20 indexed token,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        uint256 shares\\n    );\\n\\n    /// @notice Emitted on withdraw\\n    /// @param token being deposited\\n    /// @param from address making the depsoit\\n    /// @param to address to credit the tokens being withdrawn\\n    /// @param amount Amount of underlying being withdrawn\\n    /// @param shares the represent the amount withdraw from the vault\\n    event Withdraw(\\n        IERC20 indexed token,\\n        address indexed from,\\n        address indexed to,\\n        uint256 shares,\\n        uint256 amount\\n    );\\n\\n    event Transfer(IERC20 indexed token, address indexed from, address indexed to, uint256 amount);\\n\\n    event FlashLoan(\\n        address indexed borrower,\\n        IERC20 indexed token,\\n        uint256 amount,\\n        uint256 feeAmount,\\n        address indexed receiver\\n    );\\n\\n    event TransferControl(address _newTeam, uint256 timestamp);\\n\\n    event UpdateFlashLoanRate(uint256 newRate);\\n\\n    event Approval(address indexed user, address indexed allowed, bool status);\\n\\n    event OwnershipAccepted(address newOwner, uint256 timestamp);\\n\\n    event RegisterProtocol(address sender);\\n\\n    event AllowContract(address whitelist, bool status);\\n\\n    event RescueFunds(IERC20 token, uint256 amount);\\n\\n    // ************** //\\n    // *** FUNCTIONS *** //\\n    // ************** //\\n\\n    function initialize(uint256 _flashLoanRate, address _owner) external;\\n\\n    function approveContract(\\n        address _user,\\n        address _contract,\\n        bool _status,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function deposit(\\n        IERC20 _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external returns (uint256);\\n\\n    function withdraw(\\n        IERC20 _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external returns (uint256);\\n\\n    function balanceOf(IERC20, address) external view returns (uint256);\\n\\n    function transfer(\\n        IERC20 _token,\\n        address _from,\\n        address _to,\\n        uint256 _shares\\n    ) external;\\n\\n    function toShare(\\n        IERC20 token,\\n        uint256 amount,\\n        bool ceil\\n    ) external view returns (uint256);\\n\\n    function toUnderlying(IERC20 token, uint256 share) external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0x3dd32eeae3b83d329e1498e2f82e608c882c100ea06e7545e0d5c531baea600d\",\"license\":\"MIT\"},\"contracts/interfaces/IBSWrapperToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IRewardDistributorManager.sol\\\";\\n\\ninterface IBSWrapperTokenBase is IERC20 {\\n    function initialize(\\n        address _owner,\\n        address _underlying,\\n        string memory _tokenName,\\n        string memory _tokenSymbol,\\n        IRewardDistributorManager _manager\\n    ) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n\\n    function owner() external view returns (address);\\n}\\n\\ninterface IBSWrapperToken is IBSWrapperTokenBase {\\n    function mint(address _to, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xb517729706c5471ef0fea6e8daf03586f6cc926c9eeb716ae7d13a8de2053e70\",\"license\":\"MIT\"},\"contracts/interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport {IBSWrapperTokenBase} from \\\"./IBSWrapperToken.sol\\\";\\n\\ninterface IDebtToken is IBSWrapperTokenBase {\\n    event DelegateBorrow(address from, address to, uint256 amount, uint256 timestamp);\\n\\n    function increaseTotalDebt(uint256 _amount) external;\\n\\n    function principal(address _account) external view returns (uint256);\\n\\n    function mint(\\n        address _to,\\n        address _owner,\\n        uint256 _amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcad520d843e96fae406142ca82ec1333a7600c3900424707c4a91283126e739a\",\"license\":\"MIT\"},\"contracts/interfaces/IERC3156FlashBorrower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\ninterface IERC3156FlashBorrower {\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0xc72afde3ab27c13b3437769c92b10e48dc143565ba2bcf9e78f6713d4695d924\",\"license\":\"MIT\"},\"contracts/interfaces/IERC3156FlashLender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.1;\\nimport \\\"./IERC3156FlashBorrower.sol\\\";\\n\\ninterface IERC3156FlashLender {\\n    /**\\n     * @dev The amount of currency available to be lent.\\n     * @param token The loan currency.\\n     * @return The amount of `token` that can be borrowed.\\n     */\\n    function maxFlashLoan(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev The fee to be charged for a given loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n     */\\n    function flashFee(address token, uint256 amount) external view returns (uint256);\\n\\n    /**\\n     * @dev Initiate a flash loan.\\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     */\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x381589754fc2917129ff2192df23588009fecb73f6df12bc9218dd731d25758d\",\"license\":\"MIT\"},\"contracts/interfaces/IInterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\ninterface IInterestRateModel {\\n    /**\\n     * @notice Calculates the current borrow interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amount of reserves the market has\\n     * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getBorrowRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Calculates the current supply interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amount of reserves the market has\\n     * @param reserveFactorMantissa The current reserve factor the market has\\n     * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getSupplyRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves,\\n        uint256 reserveFactorMantissa\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe6b72371b9b062ac92f3f18f7d6481e951714c95c2dd50a3ee13a266b72c2882\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\ninterface IOracle {\\n    /// @notice Price update event\\n    /// @param asset the asset\\n    /// @param newPrice price of the asset\\n    event PriceUpdated(address asset, uint256 newPrice);\\n\\n    /// @dev returns latest answer\\n    function latestAnswer() external view returns (int256);\\n}\\n\",\"keccak256\":\"0x28eea16f99e07c31d30e3bee3df4491c2e04ca9edbd235fd93903e8c5a21f01b\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceOracleAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\n\\ninterface IPriceOracleAggregator {\\n    event UpdateOracle(IERC20 token, IOracle oracle);\\n\\n    function getPriceInUSD(IERC20 _token) external view returns (uint256);\\n\\n    function getPriceInUSDMultiple(IERC20[] calldata _tokens)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function setOracleForAsset(IERC20[] calldata _asset, IOracle[] calldata _oracle) external;\\n\\n    event OwnershipAccepted(address newOwner, uint256 timestamp);\\n    event TransferControl(address _newTeam, uint256 timestamp);\\n    event StableTokenAdded(IERC20 _token, uint256 timestamp);\\n}\\n\",\"keccak256\":\"0xee8b12a38e513badf81f26e3ff225cf28c1d6f1b731f61b67fcb3a12f49b8bb9\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRewardDistributor {\\n    event Initialized(\\n        IERC20 indexed _rewardToken,\\n        uint256 _amountDistributePerSecond,\\n        uint256 _startTimestamp,\\n        uint256 _endTimestamp,\\n        address _guardian,\\n        uint256 timestamp\\n    );\\n\\n    function accumulateReward(address _tokenAddr, address _user) external;\\n\\n    function endTimestamp() external returns (uint256);\\n\\n    function initialize(\\n        string calldata _name,\\n        IERC20 _rewardToken,\\n        uint256 _amountDistributePerSecond,\\n        uint256 _startTimestamp,\\n        uint256 _endTimestamp,\\n        address _guardian\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2d752f87ed5d75fe0498b53e76ad181ece87eb6287432f15a440b92a4efd18cd\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardDistributorManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport \\\"./IRewardDistributor.sol\\\";\\n\\ninterface IRewardDistributorManager {\\n    /// @dev Emitted on Initialization\\n    event Initialized(address owner, uint256 timestamp);\\n\\n    event ApprovedDistributor(IRewardDistributor distributor, uint256 timestamp);\\n    event AddReward(address tokenAddr, IRewardDistributor distributor, uint256 timestamp);\\n    event RemoveReward(address tokenAddr, IRewardDistributor distributor, uint256 timestamp);\\n    event TransferControl(address _newTeam, uint256 timestamp);\\n    event OwnershipAccepted(address newOwner, uint256 timestamp);\\n\\n    function activateReward(address _tokenAddr) external;\\n\\n    function removeReward(address _tokenAddr, IRewardDistributor _distributor) external;\\n\\n    function accumulateRewards(address _from, address _to) external;\\n}\\n\",\"keccak256\":\"0xab04e19e0e0f936e38c3cd18bd1f8db04507c2288db488b7051643faf6feb361\",\"license\":\"MIT\"},\"contracts/token/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n */\\n\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    // samparsky: remove immutable to be initiated, it should only be set once in initialize\\n    bytes32 private _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private _CACHED_CHAIN_ID;\\n\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function initializeEIP712(string memory name, string memory version) internal {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash =\\n            keccak256(\\n                \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n            );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = _getChainId();\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (_getChainId() == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 name,\\n        bytes32 version\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, name, version, _getChainId(), address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", _domainSeparatorV4(), structHash));\\n    }\\n\\n    function _getChainId() private view returns (uint256 chainId) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2861b9c53085dccc1d7eefa78731481a047598f2a285d5417802e969f749b98f\",\"license\":\"MIT\"},\"contracts/token/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n *\\n * !!! samparsky modified: use initializeERC20 to replace constructor for proxy\\n */\\ncontract ERC20 is IERC20 {\\n    mapping(address => uint256) internal _balances;\\n\\n    mapping(address => mapping(address => uint256)) internal _allowances;\\n\\n    uint256 internal _totalSupply;\\n\\n    string public name;\\n    uint8 public decimals;\\n    string public symbol;\\n\\n    function initializeERC20(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) internal {\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n    }\\n\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function totalSupply() external view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function transfer(address recipient, uint256 amount) external virtual override returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) external virtual override returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] - subtractedValue);\\n        return true;\\n    }\\n\\n    function _mint(address _account, uint256 _amount) internal virtual {\\n        require(_account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply += _amount;\\n        _balances[_account] += _amount;\\n        emit Transfer(address(0), _account, _amount);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _balances[sender] = _balances[sender] - amount;\\n        _balances[recipient] = _balances[recipient] + amount;\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _balances[account] = _balances[account] - amount;\\n        _totalSupply = _totalSupply - amount;\\n        emit Transfer(account, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x83a2ac8db454b1e4fc60562652d2e77e6673716c2be8e5bc598d4b4b68e0672a\",\"license\":\"MIT\"},\"contracts/token/ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./EIP712.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n */\\n\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    mapping(address => uint256) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _PERMIT_TYPEHASH =\\n        keccak256(\\n            \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n        );\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    function initializeERC20Permit(string memory _name) internal {\\n        initializeEIP712(_name, \\\"1\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        // solhint-disable-next-line not-rely-on-time\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash =\\n            keccak256(\\n                abi.encode(_PERMIT_TYPEHASH, owner, spender, amount, _nonces[owner], deadline)\\n            );\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _nonces[owner]++;\\n        _approve(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view override returns (uint256) {\\n        return _nonces[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n}\\n\",\"keccak256\":\"0x99a380775d15aa41a581c0792eaceb41ca9aeaeb8525e62646dc57ba9ebd546f\",\"license\":\"MIT\"},\"contracts/token/IERC20Details.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\ninterface IERC20Details {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xcfd6fd5f452a70690addc27342129a8ad648d1bfa8b4780edc3dd637da99dd08\",\"license\":\"MIT\"},\"contracts/util/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(\\n            _initializing || _isConstructor() || !_initialized,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            cs := extcodesize(self)\\n        }\\n        return cs == 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa95d85c925336812eebaacae95df0d1ea8714d6e379066513af80fbc81961f5f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101b95760003560e01c80636f307dc3116100f9578063a457c2d711610097578063d505accf11610071578063d505accf1461034f578063dd62ed3e14610362578063ecd2672714610370578063ffa1ad7414610383576101b9565b8063a457c2d7146102a4578063a9059cbb1461032e578063c6c3bbe61461033c576101b9565b80638da5cb5b116100d35780638da5cb5b146102f857806395d89b4114610300578063999af068146103085780639dc29fac1461031b576101b9565b80636f307dc3146102ca57806370a08231146102d25780637ecebe00146102e5576101b9565b806323b872dd11610166578063362925c211610140578063362925c2146102895780633644e5151461029c57806339509351146102a45780636bd76d24146102b7576101b9565b806323b872dd1461024e5780632ce0f9d614610261578063313ce56714610274576101b9565b8063139cace511610197578063139cace514610211578063146fac451461022657806318160ddd14610239576101b9565b806306fdde03146101be578063095ea7b3146101dc5780630f4ef8a6146101fc575b600080fd5b6101c661038b565b6040516101d391906112ac565b60405180910390f35b6101ef6101ea366004611133565b610419565b6040516101d3919061121c565b61020461043c565b6040516101d391906111c5565b61022461021f3660046110cf565b610451565b005b61022461023436600461115e565b6105e0565b61024161061e565b6040516101d39190611227565b6101ef61025c36600461101f565b610625565b61024161026f366004610f29565b61063f565b61027c61065a565b6040516101d39190611596565b610224610297366004610f84565b610663565b610241610843565b6101ef6102b2366004611133565b610852565b6102416102c5366004610f4c565b61086c565b610204610897565b6102416102e0366004610f29565b6108a6565b6102416102f3366004610f29565b61092d565b610204610948565b6101c6610957565b610241610316366004610f29565b610964565b610224610329366004611133565b610976565b6101ef61025c366004611133565b61022461034a36600461101f565b610a08565b61022461035d36600461105f565b610a96565b6102416102b2366004610f4c565b61022461037e366004611133565b610aae565b610241610ab9565b60038054610398906115d3565b80601f01602080910402602001604051908101604052809291908181526020018280546103c4906115d3565b80156104115780601f106103e657610100808354040283529160200191610411565b820191906000526020600020905b8154815290600101906020018083116103f457829003601f168201915b505050505081565b600060405162461bcd60e51b8152600401610433906114f1565b60405180910390fd5b600c546201000090046001600160a01b031681565b6001600160a01b0385166104775760405162461bcd60e51b815260040161043390611402565b6000610481610abe565b6001600160a01b038816600090815260106020526040812080547f0185d0b1db4d8eb3ef78b2d741d2deb2b15f885aab86bc0d22372d976faf1189927f4dbcfb5165b0222661b65bf3148c2d16a4036a909a3e8c9f9436d5b8439a1866928c928c928c92906104ef8361160e565b9190505560405160200161050896959493929190611230565b6040516020818303038152906040528051906020012060405160200161052f9291906111aa565b60405160208183030381529060405280519060200120905060006001828686866040516000815260200160405260405161056c949392919061128e565b6020604051602081039080840390855afa15801561058e573d6000803e3d6000fd5b505050602060405103519050876001600160a01b0316816001600160a01b0316146105cb5760405162461bcd60e51b8152600401610433906113a4565b6105d6888888610af2565b5050505050505050565b600e546001600160a01b0316331461060a5760405162461bcd60e51b8152600401610433906112ff565b8060025461061891906115a4565b60025550565b6002545b90565b600060405162461bcd60e51b81526004016104339061136d565b6001600160a01b031660009081526020819052604090205490565b60045460ff1681565b600c54610100900460ff168061067c575061067c610b83565b8061068a5750600c5460ff16155b6106a65760405162461bcd60e51b815260040161043390611426565b600c54610100900460ff161580156106d157600c805460ff1961ff0019909116610100171660011790555b6001600160a01b0386166106f75760405162461bcd60e51b8152600401610433906113db565b6001600160a01b03851661071d5760405162461bcd60e51b815260040161043390611336565b85600e60006101000a8154816001600160a01b0302191690836001600160a01b031602179055506000856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561077f57600080fd5b505afa158015610793573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b7919061118e565b90506107c4858583610b89565b6107cd85610bc9565b50600d805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0387811691909117909155600c805475ffffffffffffffffffffffffffffffffffffffff000019166201000092851692909202919091179055801561083b57600c805461ff00191690555b505050505050565b600061084d610abe565b905090565b600060405162461bcd60e51b815260040161043390611483565b6001600160a01b039182166000908152600f6020908152604080832093909416825291909152205490565b600d546001600160a01b031681565b600e54604051637746efab60e01b81526000916001600160a01b031690637746efab906108d79085906004016111c5565b60206040518083038186803b1580156108ef57600080fd5b505afa158015610903573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109279190611176565b92915050565b6001600160a01b03166000908152600b602052604090205490565b600e546001600160a01b031690565b60058054610398906115d3565b60106020526000908152604090205481565b600e546001600160a01b031633146109a05760405162461bcd60e51b8152600401610433906112ff565b6109ab826000610bef565b806109b5836108a6565b6109bf91906115bc565b6001600160a01b0383166000908152602081905260409020556002548111156109ec576000600255610a04565b80600260008282546109fe91906115bc565b90915550505b5050565b600e546001600160a01b03163314610a325760405162461bcd60e51b8152600401610433906112ff565b6001600160a01b038316610a585760405162461bcd60e51b8152600401610433906114ba565b816001600160a01b0316836001600160a01b031614610a7c57610a7c838383610c54565b610a87600084610bef565b610a918382610cb6565b505050565b60405162461bcd60e51b815260040161043390611528565b610a04338383610af2565b600181565b6000600754610acb610d63565b1415610ada5750600654610622565b610aeb600a54600854600954610d67565b9050610622565b6001600160a01b038216610b185760405162461bcd60e51b815260040161043390611402565b6001600160a01b038084166000908152600f602090815260408083209386168352929052819020829055517f8af24aec445699c4c2d8918aa7fd258691a51df1e6e7b0cb07888072c752fcc890610b769085908590859042906111f3565b60405180910390a1505050565b303b1590565b8251610b9c906003906020860190610e09565b508151610bb0906005906020850190610e09565b506004805460ff191660ff929092169190911790555050565b610bec81604051806040016040528060018152602001603160f81b815250610da8565b50565b600c54604051633b4198ef60e21b8152620100009091046001600160a01b03169063ed0663bc90610c2690859085906004016111d9565b600060405180830381600087803b158015610c4057600080fd5b505af115801561083b573d6000803e3d6000fd5b6001600160a01b038084166000908152600f6020908152604080832093861683529290522054610c859082906115bc565b6001600160a01b039384166000908152600f6020908152604080832095909616825293909352929091209190915550565b6001600160a01b038216610cdc5760405162461bcd60e51b81526004016104339061155f565b8060026000828254610cee91906115a4565b90915550819050610cfe836108a6565b610d0891906115a4565b6001600160a01b0383166000818152602081905260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610d57908590611227565b60405180910390a35050565b4690565b6000838383610d74610d63565b30604051602001610d89959493929190611262565b6040516020818303038152906040528051906020012090509392505050565b8151602080840191909120825191830191909120600882905560098190557f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f610def610d63565b600755610dfd818484610d67565b600655600a5550505050565b828054610e15906115d3565b90600052602060002090601f016020900481019282610e375760008555610e7d565b82601f10610e5057805160ff1916838001178555610e7d565b82800160010185558215610e7d579182015b82811115610e7d578251825591602001919060010190610e62565b50610e89929150610e8d565b5090565b5b80821115610e895760008155600101610e8e565b600082601f830112610eb2578081fd5b813567ffffffffffffffff80821115610ecd57610ecd61163f565b604051601f8301601f19908116603f01168101908282118183101715610ef557610ef561163f565b81604052838152866020858801011115610f0d578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215610f3a578081fd5b8135610f4581611655565b9392505050565b60008060408385031215610f5e578081fd5b8235610f6981611655565b91506020830135610f7981611655565b809150509250929050565b600080600080600060a08688031215610f9b578081fd5b8535610fa681611655565b94506020860135610fb681611655565b9350604086013567ffffffffffffffff80821115610fd2578283fd5b610fde89838a01610ea2565b94506060880135915080821115610ff3578283fd5b5061100088828901610ea2565b925050608086013561101181611655565b809150509295509295909350565b600080600060608486031215611033578283fd5b833561103e81611655565b9250602084013561104e81611655565b929592945050506040919091013590565b600080600080600080600060e0888a031215611079578182fd5b873561108481611655565b9650602088013561109481611655565b9550604088013594506060880135935060808801356110b28161166a565b9699959850939692959460a0840135945060c09093013592915050565b60008060008060008060c087890312156110e7578182fd5b86356110f281611655565b9550602087013561110281611655565b94506040870135935060608701356111198161166a565b9598949750929560808101359460a0909101359350915050565b60008060408385031215611145578182fd5b823561115081611655565b946020939093013593505050565b60006020828403121561116f578081fd5b5035919050565b600060208284031215611187578081fd5b5051919050565b60006020828403121561119f578081fd5b8151610f458161166a565b61190160f01b81526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b901515815260200190565b90815260200190565b95865260208601949094526001600160a01b03928316604086015291166060840152608083015260a082015260c00190565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b93845260ff9290921660208401526040830152606082015260800190565b6000602080835283518082850152825b818110156112d8578581018301518582016040015282016112bc565b818111156112e95783604083870101525b50601f01601f1916929092016040019392505050565b60208082526011908201527f4f4e4c595f4c454e44494e475f50414952000000000000000000000000000000604082015260600190565b60208082526012908201527f696e76616c696420756e6465726c79696e670000000000000000000000000000604082015260600190565b60208082526016908201527f5452414e534645525f4e4f545f535550504f5254454400000000000000000000604082015260600190565b60208082526011908201527f494e56414c49445f5349474e4154555245000000000000000000000000000000604082015260600190565b6020808252600d908201526c34b73b30b634b21037bbb732b960991b604082015260600190565b6020808252600a9082015269494e56414c49445f544f60b01b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201527f647920696e697469616c697a6564000000000000000000000000000000000000606082015260800190565b60208082526017908201527f414c4c4f57414e43455f4e4f545f535550504f52544544000000000000000000604082015260600190565b60208082526012908201527f494e56414c49445f444542545f4f574e45520000000000000000000000000000604082015260600190565b60208082526016908201527f415050524f56414c5f4e4f545f535550504f5254454400000000000000000000604082015260600190565b60208082526014908201527f5045524d49545f4e4f545f535550504f52544544000000000000000000000000604082015260600190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b60ff91909116815260200190565b600082198211156115b7576115b7611629565b500190565b6000828210156115ce576115ce611629565b500390565b6002810460018216806115e757607f821691505b6020821081141561160857634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561162257611622611629565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610bec57600080fd5b60ff81168114610bec57600080fdfea2646970667358221220de99086efbcede5f20f5476c5c76ea97cc27261d69b2dcf2f0cf8cc890d3d37964736f6c63430008010033",
  "devdoc": {
    "author": "@samparsky",
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "details": "See {IERC20Permit-DOMAIN_SEPARATOR}."
      },
      "balanceOf(address)": {
        "details": "calculates the debt balance of account"
      },
      "burn(address,uint256)": {
        "params": {
          "_amount": "is the amount of token to be burnt*",
          "_from": "is the address where the tokens will be burnt"
        }
      },
      "increaseTotalDebt(uint256)": {
        "params": {
          "_amount": "is the amount to increase"
        }
      },
      "mint(address,address,uint256)": {
        "details": "mint debt tokens to the debtOwner address",
        "params": {
          "_amount": "the amount of debt tokens to mint",
          "_debtOwner": "the address to mint the debt tokens to",
          "_to": "the address requesting the debt, when (_to != _debtOwner) debtOwner must have  delegated some borrow allowance to the _to address"
        }
      },
      "nonces(address)": {
        "details": "See {IERC20Permit-nonces}."
      },
      "totalSupply()": {
        "details": "Returns the amount of tokens in existence."
      }
    },
    "stateVariables": {
      "VERSION": {
        "details": "debt token version"
      },
      "_DEBT_BORROW_DELEGATE_SIGNATURE_TYPE_HASH": {
        "details": "debt token delegate borrow message digest"
      },
      "_borrowAllowances": {
        "details": "user delegated borrow allowances"
      },
      "isDebtToken": {
        "details": "for introspection"
      }
    },
    "title": "DebtToken",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burn(address,uint256)": {
        "notice": "burn is an only owner function that allows the owner to burn  tokens from an input account"
      },
      "increaseTotalDebt(uint256)": {
        "notice": "used to increase the debt of the system"
      },
      "initialize(address,address,string,string,address)": {
        "notice": "initialize"
      },
      "userBorrowAllowanceNonce(address)": {
        "notice": "mapping of user to approval nonce"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12764,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12770,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 12772,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 12774,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 12776,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "decimals",
        "offset": 0,
        "slot": "4",
        "type": "t_uint8"
      },
      {
        "astId": 12778,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "symbol",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 12609,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "_CACHED_DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes32"
      },
      {
        "astId": 12611,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "_CACHED_CHAIN_ID",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 12613,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "_HASHED_NAME",
        "offset": 0,
        "slot": "8",
        "type": "t_bytes32"
      },
      {
        "astId": 12615,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "_HASHED_VERSION",
        "offset": 0,
        "slot": "9",
        "type": "t_bytes32"
      },
      {
        "astId": 12617,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "_TYPE_HASH",
        "offset": 0,
        "slot": "10",
        "type": "t_bytes32"
      },
      {
        "astId": 13164,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "_nonces",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13471,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "_initialized",
        "offset": 0,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 13474,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "_initializing",
        "offset": 1,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 7304,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "rewardManager",
        "offset": 2,
        "slot": "12",
        "type": "t_contract(IRewardDistributorManager)9573"
      },
      {
        "astId": 7307,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "underlying",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 7310,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "_owner",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 2220,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "_borrowAllowances",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2225,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "userBorrowAllowanceNonce",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IRewardDistributorManager)9573": {
        "encoding": "inplace",
        "label": "contract IRewardDistributorManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}