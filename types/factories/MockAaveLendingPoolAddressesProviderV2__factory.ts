/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { MockAaveLendingPoolAddressesProviderV2 } from "../MockAaveLendingPoolAddressesProviderV2";

export class MockAaveLendingPoolAddressesProviderV2__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _lendingPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockAaveLendingPoolAddressesProviderV2> {
    return super.deploy(
      _lendingPool,
      overrides || {}
    ) as Promise<MockAaveLendingPoolAddressesProviderV2>;
  }
  getDeployTransaction(
    _lendingPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_lendingPool, overrides || {});
  }
  attach(address: string): MockAaveLendingPoolAddressesProviderV2 {
    return super.attach(address) as MockAaveLendingPoolAddressesProviderV2;
  }
  connect(signer: Signer): MockAaveLendingPoolAddressesProviderV2__factory {
    return super.connect(
      signer
    ) as MockAaveLendingPoolAddressesProviderV2__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockAaveLendingPoolAddressesProviderV2 {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockAaveLendingPoolAddressesProviderV2;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_lendingPool",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "getLendingPool",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161014a38038061014a83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610082565b600060208284031215610065578081fd5b81516001600160a01b038116811461007b578182fd5b9392505050565b60ba806100906000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80630261bf8b14602d575b600080fd5b60336047565b604051603e91906063565b60405180910390f35b60005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff9190911681526020019056fea2646970667358221220f4202a1733713164d7959c9999e522a1a38297cceef8a51fbd368842101f866164736f6c63430008010033";
